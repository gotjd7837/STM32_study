
project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d14  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000015f8  08005e20  08005e20  00006e20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007418  08007418  0000907c  2**0
                  CONTENTS
  4 .ARM          00000000  08007418  08007418  0000907c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007418  08007418  0000907c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007418  08007418  00008418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800741c  0800741c  0000841c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  08007420  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f0  2000007c  0800749c  0000907c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000076c  0800749c  0000976c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000907c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012535  00000000  00000000  000090a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ffb  00000000  00000000  0001b5da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001228  00000000  00000000  0001e5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e31  00000000  00000000  0001f800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a033  00000000  00000000  00020631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016811  00000000  00000000  0003a664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f8a5  00000000  00000000  00050e75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e071a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000552c  00000000  00000000  000e0760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  000e5c8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000007c 	.word	0x2000007c
 8000128:	00000000 	.word	0x00000000
 800012c:	08005e08 	.word	0x08005e08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000080 	.word	0x20000080
 8000148:	08005e08 	.word	0x08005e08

0800014c <__aeabi_fmul>:
 800014c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000150:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000154:	bf1e      	ittt	ne
 8000156:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015a:	ea92 0f0c 	teqne	r2, ip
 800015e:	ea93 0f0c 	teqne	r3, ip
 8000162:	d06f      	beq.n	8000244 <__aeabi_fmul+0xf8>
 8000164:	441a      	add	r2, r3
 8000166:	ea80 0c01 	eor.w	ip, r0, r1
 800016a:	0240      	lsls	r0, r0, #9
 800016c:	bf18      	it	ne
 800016e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000172:	d01e      	beq.n	80001b2 <__aeabi_fmul+0x66>
 8000174:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000178:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800017c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000180:	fba0 3101 	umull	r3, r1, r0, r1
 8000184:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000188:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800018c:	bf3e      	ittt	cc
 800018e:	0049      	lslcc	r1, r1, #1
 8000190:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000194:	005b      	lslcc	r3, r3, #1
 8000196:	ea40 0001 	orr.w	r0, r0, r1
 800019a:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 800019e:	2afd      	cmp	r2, #253	@ 0xfd
 80001a0:	d81d      	bhi.n	80001de <__aeabi_fmul+0x92>
 80001a2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001a6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001aa:	bf08      	it	eq
 80001ac:	f020 0001 	biceq.w	r0, r0, #1
 80001b0:	4770      	bx	lr
 80001b2:	f090 0f00 	teq	r0, #0
 80001b6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001ba:	bf08      	it	eq
 80001bc:	0249      	lsleq	r1, r1, #9
 80001be:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001c6:	3a7f      	subs	r2, #127	@ 0x7f
 80001c8:	bfc2      	ittt	gt
 80001ca:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001ce:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d2:	4770      	bxgt	lr
 80001d4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001d8:	f04f 0300 	mov.w	r3, #0
 80001dc:	3a01      	subs	r2, #1
 80001de:	dc5d      	bgt.n	800029c <__aeabi_fmul+0x150>
 80001e0:	f112 0f19 	cmn.w	r2, #25
 80001e4:	bfdc      	itt	le
 80001e6:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ea:	4770      	bxle	lr
 80001ec:	f1c2 0200 	rsb	r2, r2, #0
 80001f0:	0041      	lsls	r1, r0, #1
 80001f2:	fa21 f102 	lsr.w	r1, r1, r2
 80001f6:	f1c2 0220 	rsb	r2, r2, #32
 80001fa:	fa00 fc02 	lsl.w	ip, r0, r2
 80001fe:	ea5f 0031 	movs.w	r0, r1, rrx
 8000202:	f140 0000 	adc.w	r0, r0, #0
 8000206:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020a:	bf08      	it	eq
 800020c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000210:	4770      	bx	lr
 8000212:	f092 0f00 	teq	r2, #0
 8000216:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021a:	bf02      	ittt	eq
 800021c:	0040      	lsleq	r0, r0, #1
 800021e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000222:	3a01      	subeq	r2, #1
 8000224:	d0f9      	beq.n	800021a <__aeabi_fmul+0xce>
 8000226:	ea40 000c 	orr.w	r0, r0, ip
 800022a:	f093 0f00 	teq	r3, #0
 800022e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000232:	bf02      	ittt	eq
 8000234:	0049      	lsleq	r1, r1, #1
 8000236:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023a:	3b01      	subeq	r3, #1
 800023c:	d0f9      	beq.n	8000232 <__aeabi_fmul+0xe6>
 800023e:	ea41 010c 	orr.w	r1, r1, ip
 8000242:	e78f      	b.n	8000164 <__aeabi_fmul+0x18>
 8000244:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000248:	ea92 0f0c 	teq	r2, ip
 800024c:	bf18      	it	ne
 800024e:	ea93 0f0c 	teqne	r3, ip
 8000252:	d00a      	beq.n	800026a <__aeabi_fmul+0x11e>
 8000254:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000258:	bf18      	it	ne
 800025a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800025e:	d1d8      	bne.n	8000212 <__aeabi_fmul+0xc6>
 8000260:	ea80 0001 	eor.w	r0, r0, r1
 8000264:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000268:	4770      	bx	lr
 800026a:	f090 0f00 	teq	r0, #0
 800026e:	bf17      	itett	ne
 8000270:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000274:	4608      	moveq	r0, r1
 8000276:	f091 0f00 	teqne	r1, #0
 800027a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800027e:	d014      	beq.n	80002aa <__aeabi_fmul+0x15e>
 8000280:	ea92 0f0c 	teq	r2, ip
 8000284:	d101      	bne.n	800028a <__aeabi_fmul+0x13e>
 8000286:	0242      	lsls	r2, r0, #9
 8000288:	d10f      	bne.n	80002aa <__aeabi_fmul+0x15e>
 800028a:	ea93 0f0c 	teq	r3, ip
 800028e:	d103      	bne.n	8000298 <__aeabi_fmul+0x14c>
 8000290:	024b      	lsls	r3, r1, #9
 8000292:	bf18      	it	ne
 8000294:	4608      	movne	r0, r1
 8000296:	d108      	bne.n	80002aa <__aeabi_fmul+0x15e>
 8000298:	ea80 0001 	eor.w	r0, r0, r1
 800029c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002a8:	4770      	bx	lr
 80002aa:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002ae:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b2:	4770      	bx	lr

080002b4 <__aeabi_frsub>:
 80002b4:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002b8:	e002      	b.n	80002c0 <__addsf3>
 80002ba:	bf00      	nop

080002bc <__aeabi_fsub>:
 80002bc:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c0 <__addsf3>:
 80002c0:	0042      	lsls	r2, r0, #1
 80002c2:	bf1f      	itttt	ne
 80002c4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002c8:	ea92 0f03 	teqne	r2, r3
 80002cc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d4:	d06a      	beq.n	80003ac <__addsf3+0xec>
 80002d6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002da:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002de:	bfc1      	itttt	gt
 80002e0:	18d2      	addgt	r2, r2, r3
 80002e2:	4041      	eorgt	r1, r0
 80002e4:	4048      	eorgt	r0, r1
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	bfb8      	it	lt
 80002ea:	425b      	neglt	r3, r3
 80002ec:	2b19      	cmp	r3, #25
 80002ee:	bf88      	it	hi
 80002f0:	4770      	bxhi	lr
 80002f2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002f6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80002fe:	bf18      	it	ne
 8000300:	4240      	negne	r0, r0
 8000302:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000306:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030a:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800030e:	bf18      	it	ne
 8000310:	4249      	negne	r1, r1
 8000312:	ea92 0f03 	teq	r2, r3
 8000316:	d03f      	beq.n	8000398 <__addsf3+0xd8>
 8000318:	f1a2 0201 	sub.w	r2, r2, #1
 800031c:	fa41 fc03 	asr.w	ip, r1, r3
 8000320:	eb10 000c 	adds.w	r0, r0, ip
 8000324:	f1c3 0320 	rsb	r3, r3, #32
 8000328:	fa01 f103 	lsl.w	r1, r1, r3
 800032c:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000330:	d502      	bpl.n	8000338 <__addsf3+0x78>
 8000332:	4249      	negs	r1, r1
 8000334:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000338:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 800033c:	d313      	bcc.n	8000366 <__addsf3+0xa6>
 800033e:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000342:	d306      	bcc.n	8000352 <__addsf3+0x92>
 8000344:	0840      	lsrs	r0, r0, #1
 8000346:	ea4f 0131 	mov.w	r1, r1, rrx
 800034a:	f102 0201 	add.w	r2, r2, #1
 800034e:	2afe      	cmp	r2, #254	@ 0xfe
 8000350:	d251      	bcs.n	80003f6 <__addsf3+0x136>
 8000352:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000356:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035a:	bf08      	it	eq
 800035c:	f020 0001 	biceq.w	r0, r0, #1
 8000360:	ea40 0003 	orr.w	r0, r0, r3
 8000364:	4770      	bx	lr
 8000366:	0049      	lsls	r1, r1, #1
 8000368:	eb40 0000 	adc.w	r0, r0, r0
 800036c:	3a01      	subs	r2, #1
 800036e:	bf28      	it	cs
 8000370:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000374:	d2ed      	bcs.n	8000352 <__addsf3+0x92>
 8000376:	fab0 fc80 	clz	ip, r0
 800037a:	f1ac 0c08 	sub.w	ip, ip, #8
 800037e:	ebb2 020c 	subs.w	r2, r2, ip
 8000382:	fa00 f00c 	lsl.w	r0, r0, ip
 8000386:	bfaa      	itet	ge
 8000388:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800038c:	4252      	neglt	r2, r2
 800038e:	4318      	orrge	r0, r3
 8000390:	bfbc      	itt	lt
 8000392:	40d0      	lsrlt	r0, r2
 8000394:	4318      	orrlt	r0, r3
 8000396:	4770      	bx	lr
 8000398:	f092 0f00 	teq	r2, #0
 800039c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a0:	bf06      	itte	eq
 80003a2:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003a6:	3201      	addeq	r2, #1
 80003a8:	3b01      	subne	r3, #1
 80003aa:	e7b5      	b.n	8000318 <__addsf3+0x58>
 80003ac:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b4:	bf18      	it	ne
 80003b6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003ba:	d021      	beq.n	8000400 <__addsf3+0x140>
 80003bc:	ea92 0f03 	teq	r2, r3
 80003c0:	d004      	beq.n	80003cc <__addsf3+0x10c>
 80003c2:	f092 0f00 	teq	r2, #0
 80003c6:	bf08      	it	eq
 80003c8:	4608      	moveq	r0, r1
 80003ca:	4770      	bx	lr
 80003cc:	ea90 0f01 	teq	r0, r1
 80003d0:	bf1c      	itt	ne
 80003d2:	2000      	movne	r0, #0
 80003d4:	4770      	bxne	lr
 80003d6:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003da:	d104      	bne.n	80003e6 <__addsf3+0x126>
 80003dc:	0040      	lsls	r0, r0, #1
 80003de:	bf28      	it	cs
 80003e0:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e4:	4770      	bx	lr
 80003e6:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ea:	bf3c      	itt	cc
 80003ec:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f0:	4770      	bxcc	lr
 80003f2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003f6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003fe:	4770      	bx	lr
 8000400:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000404:	bf16      	itet	ne
 8000406:	4608      	movne	r0, r1
 8000408:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 800040c:	4601      	movne	r1, r0
 800040e:	0242      	lsls	r2, r0, #9
 8000410:	bf06      	itte	eq
 8000412:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000416:	ea90 0f01 	teqeq	r0, r1
 800041a:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 800041e:	4770      	bx	lr

08000420 <__aeabi_ui2f>:
 8000420:	f04f 0300 	mov.w	r3, #0
 8000424:	e004      	b.n	8000430 <__aeabi_i2f+0x8>
 8000426:	bf00      	nop

08000428 <__aeabi_i2f>:
 8000428:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 800042c:	bf48      	it	mi
 800042e:	4240      	negmi	r0, r0
 8000430:	ea5f 0c00 	movs.w	ip, r0
 8000434:	bf08      	it	eq
 8000436:	4770      	bxeq	lr
 8000438:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 800043c:	4601      	mov	r1, r0
 800043e:	f04f 0000 	mov.w	r0, #0
 8000442:	e01c      	b.n	800047e <__aeabi_l2f+0x2a>

08000444 <__aeabi_ul2f>:
 8000444:	ea50 0201 	orrs.w	r2, r0, r1
 8000448:	bf08      	it	eq
 800044a:	4770      	bxeq	lr
 800044c:	f04f 0300 	mov.w	r3, #0
 8000450:	e00a      	b.n	8000468 <__aeabi_l2f+0x14>
 8000452:	bf00      	nop

08000454 <__aeabi_l2f>:
 8000454:	ea50 0201 	orrs.w	r2, r0, r1
 8000458:	bf08      	it	eq
 800045a:	4770      	bxeq	lr
 800045c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000460:	d502      	bpl.n	8000468 <__aeabi_l2f+0x14>
 8000462:	4240      	negs	r0, r0
 8000464:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000468:	ea5f 0c01 	movs.w	ip, r1
 800046c:	bf02      	ittt	eq
 800046e:	4684      	moveq	ip, r0
 8000470:	4601      	moveq	r1, r0
 8000472:	2000      	moveq	r0, #0
 8000474:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000478:	bf08      	it	eq
 800047a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800047e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000482:	fabc f28c 	clz	r2, ip
 8000486:	3a08      	subs	r2, #8
 8000488:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800048c:	db10      	blt.n	80004b0 <__aeabi_l2f+0x5c>
 800048e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000492:	4463      	add	r3, ip
 8000494:	fa00 fc02 	lsl.w	ip, r0, r2
 8000498:	f1c2 0220 	rsb	r2, r2, #32
 800049c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a0:	fa20 f202 	lsr.w	r2, r0, r2
 80004a4:	eb43 0002 	adc.w	r0, r3, r2
 80004a8:	bf08      	it	eq
 80004aa:	f020 0001 	biceq.w	r0, r0, #1
 80004ae:	4770      	bx	lr
 80004b0:	f102 0220 	add.w	r2, r2, #32
 80004b4:	fa01 fc02 	lsl.w	ip, r1, r2
 80004b8:	f1c2 0220 	rsb	r2, r2, #32
 80004bc:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c0:	fa21 f202 	lsr.w	r2, r1, r2
 80004c4:	eb43 0002 	adc.w	r0, r3, r2
 80004c8:	bf08      	it	eq
 80004ca:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_f2iz>:
 80004d0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004d4:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004d8:	d30f      	bcc.n	80004fa <__aeabi_f2iz+0x2a>
 80004da:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004de:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e2:	d90d      	bls.n	8000500 <__aeabi_f2iz+0x30>
 80004e4:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004e8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004ec:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80004f0:	fa23 f002 	lsr.w	r0, r3, r2
 80004f4:	bf18      	it	ne
 80004f6:	4240      	negne	r0, r0
 80004f8:	4770      	bx	lr
 80004fa:	f04f 0000 	mov.w	r0, #0
 80004fe:	4770      	bx	lr
 8000500:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000504:	d101      	bne.n	800050a <__aeabi_f2iz+0x3a>
 8000506:	0242      	lsls	r2, r0, #9
 8000508:	d105      	bne.n	8000516 <__aeabi_f2iz+0x46>
 800050a:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800050e:	bf08      	it	eq
 8000510:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000514:	4770      	bx	lr
 8000516:	f04f 0000 	mov.w	r0, #0
 800051a:	4770      	bx	lr

0800051c <Ds18b20_Init>:
	osThreadDef(myTask_Ds18b20, Task_Ds18b20, Priority, 0, 128);
  Ds18b20Handle = osThreadCreate(osThread(myTask_Ds18b20), NULL);	
}
#else
bool	Ds18b20_Init(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
	uint8_t	Ds18b20TryToFind=5;
 8000522:	2305      	movs	r3, #5
 8000524:	71fb      	strb	r3, [r7, #7]
	do
	{
		OneWire_Init(&OneWire,_DS18B20_GPIO ,_DS18B20_PIN);
 8000526:	2208      	movs	r2, #8
 8000528:	4937      	ldr	r1, [pc, #220]	@ (8000608 <Ds18b20_Init+0xec>)
 800052a:	4838      	ldr	r0, [pc, #224]	@ (800060c <Ds18b20_Init+0xf0>)
 800052c:	f000 fb6c 	bl	8000c08 <OneWire_Init>
		TempSensorCount = 0;	
 8000530:	4b37      	ldr	r3, [pc, #220]	@ (8000610 <Ds18b20_Init+0xf4>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
		while(HAL_GetTick() < 3000)
 8000536:	e002      	b.n	800053e <Ds18b20_Init+0x22>
			Ds18b20Delay(100);
 8000538:	2064      	movs	r0, #100	@ 0x64
 800053a:	f001 ffdd 	bl	80024f8 <HAL_Delay>
		while(HAL_GetTick() < 3000)
 800053e:	f001 ffd1 	bl	80024e4 <HAL_GetTick>
 8000542:	4603      	mov	r3, r0
 8000544:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000548:	4293      	cmp	r3, r2
 800054a:	d9f5      	bls.n	8000538 <Ds18b20_Init+0x1c>
		OneWireDevices = OneWire_First(&OneWire);
 800054c:	482f      	ldr	r0, [pc, #188]	@ (800060c <Ds18b20_Init+0xf0>)
 800054e:	f000 fc4e 	bl	8000dee <OneWire_First>
 8000552:	4603      	mov	r3, r0
 8000554:	461a      	mov	r2, r3
 8000556:	4b2f      	ldr	r3, [pc, #188]	@ (8000614 <Ds18b20_Init+0xf8>)
 8000558:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 800055a:	e019      	b.n	8000590 <Ds18b20_Init+0x74>
		{
			Ds18b20Delay(100);
 800055c:	2064      	movs	r0, #100	@ 0x64
 800055e:	f001 ffcb 	bl	80024f8 <HAL_Delay>
			TempSensorCount++;
 8000562:	4b2b      	ldr	r3, [pc, #172]	@ (8000610 <Ds18b20_Init+0xf4>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	3301      	adds	r3, #1
 8000568:	b2da      	uxtb	r2, r3
 800056a:	4b29      	ldr	r3, [pc, #164]	@ (8000610 <Ds18b20_Init+0xf4>)
 800056c:	701a      	strb	r2, [r3, #0]
			OneWire_GetFullROM(&OneWire, ds18b20[TempSensorCount-1].Address);
 800056e:	4b28      	ldr	r3, [pc, #160]	@ (8000610 <Ds18b20_Init+0xf4>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	3b01      	subs	r3, #1
 8000574:	011b      	lsls	r3, r3, #4
 8000576:	4a28      	ldr	r2, [pc, #160]	@ (8000618 <Ds18b20_Init+0xfc>)
 8000578:	4413      	add	r3, r2
 800057a:	4619      	mov	r1, r3
 800057c:	4823      	ldr	r0, [pc, #140]	@ (800060c <Ds18b20_Init+0xf0>)
 800057e:	f000 fd4a 	bl	8001016 <OneWire_GetFullROM>
			OneWireDevices = OneWire_Next(&OneWire);
 8000582:	4822      	ldr	r0, [pc, #136]	@ (800060c <Ds18b20_Init+0xf0>)
 8000584:	f000 fc43 	bl	8000e0e <OneWire_Next>
 8000588:	4603      	mov	r3, r0
 800058a:	461a      	mov	r2, r3
 800058c:	4b21      	ldr	r3, [pc, #132]	@ (8000614 <Ds18b20_Init+0xf8>)
 800058e:	701a      	strb	r2, [r3, #0]
		while (OneWireDevices)
 8000590:	4b20      	ldr	r3, [pc, #128]	@ (8000614 <Ds18b20_Init+0xf8>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	2b00      	cmp	r3, #0
 8000596:	d1e1      	bne.n	800055c <Ds18b20_Init+0x40>
		}
		if(TempSensorCount>0)
 8000598:	4b1d      	ldr	r3, [pc, #116]	@ (8000610 <Ds18b20_Init+0xf4>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b00      	cmp	r3, #0
 800059e:	d106      	bne.n	80005ae <Ds18b20_Init+0x92>
			break;
		Ds18b20TryToFind--;
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	3b01      	subs	r3, #1
 80005a4:	71fb      	strb	r3, [r7, #7]
	}while(Ds18b20TryToFind>0);
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d1bc      	bne.n	8000526 <Ds18b20_Init+0xa>
 80005ac:	e000      	b.n	80005b0 <Ds18b20_Init+0x94>
			break;
 80005ae:	bf00      	nop
	if(Ds18b20TryToFind==0)
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <Ds18b20_Init+0x9e>
		return false;
 80005b6:	2300      	movs	r3, #0
 80005b8:	e022      	b.n	8000600 <Ds18b20_Init+0xe4>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80005ba:	2300      	movs	r3, #0
 80005bc:	71bb      	strb	r3, [r7, #6]
 80005be:	e019      	b.n	80005f4 <Ds18b20_Init+0xd8>
	{
		Ds18b20Delay(50);
 80005c0:	2032      	movs	r0, #50	@ 0x32
 80005c2:	f001 ff99 	bl	80024f8 <HAL_Delay>
    DS18B20_SetResolution(&OneWire, ds18b20[i].Address, DS18B20_Resolution_12bits);
 80005c6:	79bb      	ldrb	r3, [r7, #6]
 80005c8:	011b      	lsls	r3, r3, #4
 80005ca:	4a13      	ldr	r2, [pc, #76]	@ (8000618 <Ds18b20_Init+0xfc>)
 80005cc:	4413      	add	r3, r2
 80005ce:	220c      	movs	r2, #12
 80005d0:	4619      	mov	r1, r3
 80005d2:	480e      	ldr	r0, [pc, #56]	@ (800060c <Ds18b20_Init+0xf0>)
 80005d4:	f000 f9b0 	bl	8000938 <DS18B20_SetResolution>
		Ds18b20Delay(50);
 80005d8:	2032      	movs	r0, #50	@ 0x32
 80005da:	f001 ff8d 	bl	80024f8 <HAL_Delay>
    DS18B20_DisableAlarmTemperature(&OneWire,  ds18b20[i].Address);
 80005de:	79bb      	ldrb	r3, [r7, #6]
 80005e0:	011b      	lsls	r3, r3, #4
 80005e2:	4a0d      	ldr	r2, [pc, #52]	@ (8000618 <Ds18b20_Init+0xfc>)
 80005e4:	4413      	add	r3, r2
 80005e6:	4619      	mov	r1, r3
 80005e8:	4808      	ldr	r0, [pc, #32]	@ (800060c <Ds18b20_Init+0xf0>)
 80005ea:	f000 fa3d 	bl	8000a68 <DS18B20_DisableAlarmTemperature>
	for (uint8_t i = 0; i < TempSensorCount; i++)
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	3301      	adds	r3, #1
 80005f2:	71bb      	strb	r3, [r7, #6]
 80005f4:	4b06      	ldr	r3, [pc, #24]	@ (8000610 <Ds18b20_Init+0xf4>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	79ba      	ldrb	r2, [r7, #6]
 80005fa:	429a      	cmp	r2, r3
 80005fc:	d3e0      	bcc.n	80005c0 <Ds18b20_Init+0xa4>
  }
	return true;
 80005fe:	2301      	movs	r3, #1
}
 8000600:	4618      	mov	r0, r3
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40010800 	.word	0x40010800
 800060c:	200000a8 	.word	0x200000a8
 8000610:	200000bd 	.word	0x200000bd
 8000614:	200000bc 	.word	0x200000bc
 8000618:	20000098 	.word	0x20000098

0800061c <Ds18b20_ManualConvert>:
#endif
//###########################################################################################
bool	Ds18b20_ManualConvert(void)
{
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
	if(Ds18b20Timeout==0)
		return false;
	else
		return true;	
	#else	
	Ds18b20Timeout=_DS18B20_CONVERT_TIMEOUT_MS/10;
 8000622:	4b36      	ldr	r3, [pc, #216]	@ (80006fc <Ds18b20_ManualConvert+0xe0>)
 8000624:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000628:	801a      	strh	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3);
 800062a:	4835      	ldr	r0, [pc, #212]	@ (8000700 <Ds18b20_ManualConvert+0xe4>)
 800062c:	f003 fd32 	bl	8004094 <HAL_TIM_Base_Stop_IT>
	DS18B20_StartAll(&OneWire);
 8000630:	4834      	ldr	r0, [pc, #208]	@ (8000704 <Ds18b20_ManualConvert+0xe8>)
 8000632:	f000 f86d 	bl	8000710 <DS18B20_StartAll>
	HAL_TIM_Base_Start_IT(&htim3);
 8000636:	4832      	ldr	r0, [pc, #200]	@ (8000700 <Ds18b20_ManualConvert+0xe4>)
 8000638:	f003 fcda 	bl	8003ff0 <HAL_TIM_Base_Start_IT>
	Ds18b20Delay(100);
 800063c:	2064      	movs	r0, #100	@ 0x64
 800063e:	f001 ff5b 	bl	80024f8 <HAL_Delay>
	while (!DS18B20_AllDone(&OneWire))
 8000642:	e00c      	b.n	800065e <Ds18b20_ManualConvert+0x42>
	{
		Ds18b20Delay(10);  
 8000644:	200a      	movs	r0, #10
 8000646:	f001 ff57 	bl	80024f8 <HAL_Delay>
		Ds18b20Timeout-=1;
 800064a:	4b2c      	ldr	r3, [pc, #176]	@ (80006fc <Ds18b20_ManualConvert+0xe0>)
 800064c:	881b      	ldrh	r3, [r3, #0]
 800064e:	3b01      	subs	r3, #1
 8000650:	b29a      	uxth	r2, r3
 8000652:	4b2a      	ldr	r3, [pc, #168]	@ (80006fc <Ds18b20_ManualConvert+0xe0>)
 8000654:	801a      	strh	r2, [r3, #0]
		if(Ds18b20Timeout==0)
 8000656:	4b29      	ldr	r3, [pc, #164]	@ (80006fc <Ds18b20_ManualConvert+0xe0>)
 8000658:	881b      	ldrh	r3, [r3, #0]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d006      	beq.n	800066c <Ds18b20_ManualConvert+0x50>
	while (!DS18B20_AllDone(&OneWire))
 800065e:	4829      	ldr	r0, [pc, #164]	@ (8000704 <Ds18b20_ManualConvert+0xe8>)
 8000660:	f000 fa5d 	bl	8000b1e <DS18B20_AllDone>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0ec      	beq.n	8000644 <Ds18b20_ManualConvert+0x28>
 800066a:	e000      	b.n	800066e <Ds18b20_ManualConvert+0x52>
			break;
 800066c:	bf00      	nop
	}	
	if(Ds18b20Timeout>0)
 800066e:	4b23      	ldr	r3, [pc, #140]	@ (80006fc <Ds18b20_ManualConvert+0xe0>)
 8000670:	881b      	ldrh	r3, [r3, #0]
 8000672:	2b00      	cmp	r3, #0
 8000674:	d024      	beq.n	80006c0 <Ds18b20_ManualConvert+0xa4>
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 8000676:	2300      	movs	r3, #0
 8000678:	71fb      	strb	r3, [r7, #7]
 800067a:	e01b      	b.n	80006b4 <Ds18b20_ManualConvert+0x98>
		{
			Ds18b20Delay(100);
 800067c:	2064      	movs	r0, #100	@ 0x64
 800067e:	f001 ff3b 	bl	80024f8 <HAL_Delay>
			ds18b20[i].DataIsValid = DS18B20_Read(&OneWire, ds18b20[i].Address, &ds18b20[i].Temperature);
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	011b      	lsls	r3, r3, #4
 8000686:	4a20      	ldr	r2, [pc, #128]	@ (8000708 <Ds18b20_ManualConvert+0xec>)
 8000688:	1899      	adds	r1, r3, r2
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	011b      	lsls	r3, r3, #4
 800068e:	3308      	adds	r3, #8
 8000690:	4a1d      	ldr	r2, [pc, #116]	@ (8000708 <Ds18b20_ManualConvert+0xec>)
 8000692:	4413      	add	r3, r2
 8000694:	79fc      	ldrb	r4, [r7, #7]
 8000696:	461a      	mov	r2, r3
 8000698:	481a      	ldr	r0, [pc, #104]	@ (8000704 <Ds18b20_ManualConvert+0xe8>)
 800069a:	f000 f84d 	bl	8000738 <DS18B20_Read>
 800069e:	4603      	mov	r3, r0
 80006a0:	4619      	mov	r1, r3
 80006a2:	4a19      	ldr	r2, [pc, #100]	@ (8000708 <Ds18b20_ManualConvert+0xec>)
 80006a4:	0123      	lsls	r3, r4, #4
 80006a6:	4413      	add	r3, r2
 80006a8:	330c      	adds	r3, #12
 80006aa:	460a      	mov	r2, r1
 80006ac:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	3301      	adds	r3, #1
 80006b2:	71fb      	strb	r3, [r7, #7]
 80006b4:	4b15      	ldr	r3, [pc, #84]	@ (800070c <Ds18b20_ManualConvert+0xf0>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	79fa      	ldrb	r2, [r7, #7]
 80006ba:	429a      	cmp	r2, r3
 80006bc:	d3de      	bcc.n	800067c <Ds18b20_ManualConvert+0x60>
 80006be:	e011      	b.n	80006e4 <Ds18b20_ManualConvert+0xc8>
		}
	}
	else
	{
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80006c0:	2300      	movs	r3, #0
 80006c2:	71bb      	strb	r3, [r7, #6]
 80006c4:	e009      	b.n	80006da <Ds18b20_ManualConvert+0xbe>
			ds18b20[i].DataIsValid = false;
 80006c6:	79bb      	ldrb	r3, [r7, #6]
 80006c8:	4a0f      	ldr	r2, [pc, #60]	@ (8000708 <Ds18b20_ManualConvert+0xec>)
 80006ca:	011b      	lsls	r3, r3, #4
 80006cc:	4413      	add	r3, r2
 80006ce:	330c      	adds	r3, #12
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < TempSensorCount; i++)
 80006d4:	79bb      	ldrb	r3, [r7, #6]
 80006d6:	3301      	adds	r3, #1
 80006d8:	71bb      	strb	r3, [r7, #6]
 80006da:	4b0c      	ldr	r3, [pc, #48]	@ (800070c <Ds18b20_ManualConvert+0xf0>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	79ba      	ldrb	r2, [r7, #6]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d3f0      	bcc.n	80006c6 <Ds18b20_ManualConvert+0xaa>
	}
	if(Ds18b20Timeout==0)
 80006e4:	4b05      	ldr	r3, [pc, #20]	@ (80006fc <Ds18b20_ManualConvert+0xe0>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d101      	bne.n	80006f0 <Ds18b20_ManualConvert+0xd4>
		return false;
 80006ec:	2300      	movs	r3, #0
 80006ee:	e000      	b.n	80006f2 <Ds18b20_ManualConvert+0xd6>
	else
		return true;
 80006f0:	2301      	movs	r3, #1
	#endif
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd90      	pop	{r4, r7, pc}
 80006fa:	bf00      	nop
 80006fc:	200000be 	.word	0x200000be
 8000700:	20000588 	.word	0x20000588
 8000704:	200000a8 	.word	0x200000a8
 8000708:	20000098 	.word	0x20000098
 800070c:	200000bd 	.word	0x200000bd

08000710 <DS18B20_StartAll>:
	
	return 1;
}

void DS18B20_StartAll(OneWire_t* OneWire)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
	/* Reset pulse */
	OneWire_Reset(OneWire);
 8000718:	6878      	ldr	r0, [r7, #4]
 800071a:	f000 faa3 	bl	8000c64 <OneWire_Reset>
	/* Skip rom */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_SKIPROM);
 800071e:	21cc      	movs	r1, #204	@ 0xcc
 8000720:	6878      	ldr	r0, [r7, #4]
 8000722:	f000 fb25 	bl	8000d70 <OneWire_WriteByte>
	/* Start conversion on all connected devices */
	OneWire_WriteByte(OneWire, DS18B20_CMD_CONVERTTEMP);
 8000726:	2144      	movs	r1, #68	@ 0x44
 8000728:	6878      	ldr	r0, [r7, #4]
 800072a:	f000 fb21 	bl	8000d70 <OneWire_WriteByte>
}
 800072e:	bf00      	nop
 8000730:	3708      	adds	r7, #8
 8000732:	46bd      	mov	sp, r7
 8000734:	bd80      	pop	{r7, pc}
	...

08000738 <DS18B20_Read>:

bool DS18B20_Read(OneWire_t* OneWire, uint8_t *ROM, float *destination) 
{
 8000738:	b590      	push	{r4, r7, lr}
 800073a:	b08b      	sub	sp, #44	@ 0x2c
 800073c:	af00      	add	r7, sp, #0
 800073e:	60f8      	str	r0, [r7, #12]
 8000740:	60b9      	str	r1, [r7, #8]
 8000742:	607a      	str	r2, [r7, #4]
	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	float decimal;
	uint8_t i = 0;
 800074a:	2300      	movs	r3, #0
 800074c:	77fb      	strb	r3, [r7, #31]
	uint8_t data[9];
	uint8_t crc;
	
	/* Check if device is DS18B20 */
	if (!DS18B20_Is(ROM)) {
 800074e:	68b8      	ldr	r0, [r7, #8]
 8000750:	f000 f97a 	bl	8000a48 <DS18B20_Is>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d101      	bne.n	800075e <DS18B20_Read+0x26>
		return false;
 800075a:	2300      	movs	r3, #0
 800075c:	e0e4      	b.n	8000928 <DS18B20_Read+0x1f0>
	}
	
	/* Check if line is released, if it is, then conversion is complete */
	if (!OneWire_ReadBit(OneWire)) 
 800075e:	68f8      	ldr	r0, [r7, #12]
 8000760:	f000 fadc 	bl	8000d1c <OneWire_ReadBit>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d101      	bne.n	800076e <DS18B20_Read+0x36>
	{
		/* Conversion is not finished yet */
		return false; 
 800076a:	2300      	movs	r3, #0
 800076c:	e0dc      	b.n	8000928 <DS18B20_Read+0x1f0>
	}


	HAL_TIM_Base_Stop_IT(&htim3);
 800076e:	4870      	ldr	r0, [pc, #448]	@ (8000930 <DS18B20_Read+0x1f8>)
 8000770:	f003 fc90 	bl	8004094 <HAL_TIM_Base_Stop_IT>
	/* Reset line */
	OneWire_Reset(OneWire);
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f000 fa75 	bl	8000c64 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800077a:	68b9      	ldr	r1, [r7, #8]
 800077c:	68f8      	ldr	r0, [r7, #12]
 800077e:	f000 fc2b 	bl	8000fd8 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000782:	21be      	movs	r1, #190	@ 0xbe
 8000784:	68f8      	ldr	r0, [r7, #12]
 8000786:	f000 faf3 	bl	8000d70 <OneWire_WriteByte>
	HAL_TIM_Base_Start_IT(&htim3);
 800078a:	4869      	ldr	r0, [pc, #420]	@ (8000930 <DS18B20_Read+0x1f8>)
 800078c:	f003 fc30 	bl	8003ff0 <HAL_TIM_Base_Start_IT>
	
	HAL_TIM_Base_Stop_IT(&htim3);
 8000790:	4867      	ldr	r0, [pc, #412]	@ (8000930 <DS18B20_Read+0x1f8>)
 8000792:	f003 fc7f 	bl	8004094 <HAL_TIM_Base_Stop_IT>
	/* Get data */
	for (i = 0; i < 9; i++) 
 8000796:	2300      	movs	r3, #0
 8000798:	77fb      	strb	r3, [r7, #31]
 800079a:	e00d      	b.n	80007b8 <DS18B20_Read+0x80>
	{
		/* Read byte by byte */
		data[i] = OneWire_ReadByte(OneWire);
 800079c:	7ffc      	ldrb	r4, [r7, #31]
 800079e:	68f8      	ldr	r0, [r7, #12]
 80007a0:	f000 fb04 	bl	8000dac <OneWire_ReadByte>
 80007a4:	4603      	mov	r3, r0
 80007a6:	461a      	mov	r2, r3
 80007a8:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 80007ac:	443b      	add	r3, r7
 80007ae:	f803 2c14 	strb.w	r2, [r3, #-20]
	for (i = 0; i < 9; i++) 
 80007b2:	7ffb      	ldrb	r3, [r7, #31]
 80007b4:	3301      	adds	r3, #1
 80007b6:	77fb      	strb	r3, [r7, #31]
 80007b8:	7ffb      	ldrb	r3, [r7, #31]
 80007ba:	2b08      	cmp	r3, #8
 80007bc:	d9ee      	bls.n	800079c <DS18B20_Read+0x64>
	}
	HAL_TIM_Base_Start_IT(&htim3);
 80007be:	485c      	ldr	r0, [pc, #368]	@ (8000930 <DS18B20_Read+0x1f8>)
 80007c0:	f003 fc16 	bl	8003ff0 <HAL_TIM_Base_Start_IT>
	
	/* Calculate CRC */
	crc = OneWire_CRC8(data, 8);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	2108      	movs	r1, #8
 80007ca:	4618      	mov	r0, r3
 80007cc:	f000 fc3f 	bl	800104e <OneWire_CRC8>
 80007d0:	4603      	mov	r3, r0
 80007d2:	77bb      	strb	r3, [r7, #30]
	
	/* Check if CRC is ok */
	if (crc != data[8])
 80007d4:	7f3b      	ldrb	r3, [r7, #28]
 80007d6:	7fba      	ldrb	r2, [r7, #30]
 80007d8:	429a      	cmp	r2, r3
 80007da:	d001      	beq.n	80007e0 <DS18B20_Read+0xa8>
		/* CRC invalid */
		return 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	e0a3      	b.n	8000928 <DS18B20_Read+0x1f0>

	
	/* First two bytes of scratchpad are temperature values */
	temperature = data[0] | (data[1] << 8);
 80007e0:	7d3b      	ldrb	r3, [r7, #20]
 80007e2:	b21a      	sxth	r2, r3
 80007e4:	7d7b      	ldrb	r3, [r7, #21]
 80007e6:	021b      	lsls	r3, r3, #8
 80007e8:	b21b      	sxth	r3, r3
 80007ea:	4313      	orrs	r3, r2
 80007ec:	b21b      	sxth	r3, r3
 80007ee:	84fb      	strh	r3, [r7, #38]	@ 0x26

	/* Reset line */
	OneWire_Reset(OneWire);
 80007f0:	68f8      	ldr	r0, [r7, #12]
 80007f2:	f000 fa37 	bl	8000c64 <OneWire_Reset>
	
	/* Check if temperature is negative */
	if (temperature & 0x8000)
 80007f6:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	da05      	bge.n	800080a <DS18B20_Read+0xd2>
	{
		/* Two's complement, temperature is negative */
		temperature = ~temperature + 1;
 80007fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000800:	425b      	negs	r3, r3
 8000802:	84fb      	strh	r3, [r7, #38]	@ 0x26
		minus = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
	}

	
	/* Get sensor resolution */
	resolution = ((data[4] & 0x60) >> 5) + 9;
 800080a:	7e3b      	ldrb	r3, [r7, #24]
 800080c:	115b      	asrs	r3, r3, #5
 800080e:	b2db      	uxtb	r3, r3
 8000810:	f003 0303 	and.w	r3, r3, #3
 8000814:	b2db      	uxtb	r3, r3
 8000816:	3309      	adds	r3, #9
 8000818:	777b      	strb	r3, [r7, #29]

	
	/* Store temperature integer digits and decimal digits */
	digit = temperature >> 4;
 800081a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800081c:	091b      	lsrs	r3, r3, #4
 800081e:	b29b      	uxth	r3, r3
 8000820:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	digit |= ((temperature >> 8) & 0x7) << 4;
 8000824:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000826:	0a1b      	lsrs	r3, r3, #8
 8000828:	b29b      	uxth	r3, r3
 800082a:	011b      	lsls	r3, r3, #4
 800082c:	b25b      	sxtb	r3, r3
 800082e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8000832:	b25a      	sxtb	r2, r3
 8000834:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8000838:	4313      	orrs	r3, r2
 800083a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	
	/* Store decimal digits */
	switch (resolution) 
 800083e:	7f7b      	ldrb	r3, [r7, #29]
 8000840:	3b09      	subs	r3, #9
 8000842:	2b03      	cmp	r3, #3
 8000844:	d850      	bhi.n	80008e8 <DS18B20_Read+0x1b0>
 8000846:	a201      	add	r2, pc, #4	@ (adr r2, 800084c <DS18B20_Read+0x114>)
 8000848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084c:	0800085d 	.word	0x0800085d
 8000850:	08000881 	.word	0x08000881
 8000854:	080008a5 	.word	0x080008a5
 8000858:	080008c9 	.word	0x080008c9
	{
		case 9:
			decimal = (temperature >> 3) & 0x01;
 800085c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800085e:	08db      	lsrs	r3, r3, #3
 8000860:	b29b      	uxth	r3, r3
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fdde 	bl	8000428 <__aeabi_i2f>
 800086c:	4603      	mov	r3, r0
 800086e:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_9BIT;
 8000870:	f04f 517c 	mov.w	r1, #1056964608	@ 0x3f000000
 8000874:	6a38      	ldr	r0, [r7, #32]
 8000876:	f7ff fc69 	bl	800014c <__aeabi_fmul>
 800087a:	4603      	mov	r3, r0
 800087c:	623b      	str	r3, [r7, #32]
		break;
 800087e:	e038      	b.n	80008f2 <DS18B20_Read+0x1ba>
		case 10:
			decimal = (temperature >> 2) & 0x03;
 8000880:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8000882:	089b      	lsrs	r3, r3, #2
 8000884:	b29b      	uxth	r3, r3
 8000886:	f003 0303 	and.w	r3, r3, #3
 800088a:	4618      	mov	r0, r3
 800088c:	f7ff fdcc 	bl	8000428 <__aeabi_i2f>
 8000890:	4603      	mov	r3, r0
 8000892:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_10BIT;
 8000894:	f04f 517a 	mov.w	r1, #1048576000	@ 0x3e800000
 8000898:	6a38      	ldr	r0, [r7, #32]
 800089a:	f7ff fc57 	bl	800014c <__aeabi_fmul>
 800089e:	4603      	mov	r3, r0
 80008a0:	623b      	str	r3, [r7, #32]
		 break;
 80008a2:	e026      	b.n	80008f2 <DS18B20_Read+0x1ba>
		case 11: 
			decimal = (temperature >> 1) & 0x07;
 80008a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008a6:	085b      	lsrs	r3, r3, #1
 80008a8:	b29b      	uxth	r3, r3
 80008aa:	f003 0307 	and.w	r3, r3, #7
 80008ae:	4618      	mov	r0, r3
 80008b0:	f7ff fdba 	bl	8000428 <__aeabi_i2f>
 80008b4:	4603      	mov	r3, r0
 80008b6:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_11BIT;
 80008b8:	f04f 5178 	mov.w	r1, #1040187392	@ 0x3e000000
 80008bc:	6a38      	ldr	r0, [r7, #32]
 80008be:	f7ff fc45 	bl	800014c <__aeabi_fmul>
 80008c2:	4603      	mov	r3, r0
 80008c4:	623b      	str	r3, [r7, #32]
		break;
 80008c6:	e014      	b.n	80008f2 <DS18B20_Read+0x1ba>
		case 12: 
			decimal = temperature & 0x0F;
 80008c8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80008ca:	f003 030f 	and.w	r3, r3, #15
 80008ce:	4618      	mov	r0, r3
 80008d0:	f7ff fdaa 	bl	8000428 <__aeabi_i2f>
 80008d4:	4603      	mov	r3, r0
 80008d6:	623b      	str	r3, [r7, #32]
			decimal *= (float)DS18B20_DECIMAL_STEPS_12BIT;
 80008d8:	f04f 5176 	mov.w	r1, #1031798784	@ 0x3d800000
 80008dc:	6a38      	ldr	r0, [r7, #32]
 80008de:	f7ff fc35 	bl	800014c <__aeabi_fmul>
 80008e2:	4603      	mov	r3, r0
 80008e4:	623b      	str	r3, [r7, #32]
		 break;
 80008e6:	e004      	b.n	80008f2 <DS18B20_Read+0x1ba>
		default: 
			decimal = 0xFF;
 80008e8:	4b12      	ldr	r3, [pc, #72]	@ (8000934 <DS18B20_Read+0x1fc>)
 80008ea:	623b      	str	r3, [r7, #32]
			digit = 0;
 80008ec:	2300      	movs	r3, #0
 80008ee:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	}
	
	/* Check for negative part */
	decimal = digit + decimal;
 80008f2:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 80008f6:	4618      	mov	r0, r3
 80008f8:	f7ff fd96 	bl	8000428 <__aeabi_i2f>
 80008fc:	4603      	mov	r3, r0
 80008fe:	4619      	mov	r1, r3
 8000900:	6a38      	ldr	r0, [r7, #32]
 8000902:	f7ff fcdd 	bl	80002c0 <__addsf3>
 8000906:	4603      	mov	r3, r0
 8000908:	623b      	str	r3, [r7, #32]
	if (minus) 
 800090a:	f997 3024 	ldrsb.w	r3, [r7, #36]	@ 0x24
 800090e:	2b00      	cmp	r3, #0
 8000910:	d006      	beq.n	8000920 <DS18B20_Read+0x1e8>
		decimal = 0 - decimal;
 8000912:	6a39      	ldr	r1, [r7, #32]
 8000914:	f04f 0000 	mov.w	r0, #0
 8000918:	f7ff fcd0 	bl	80002bc <__aeabi_fsub>
 800091c:	4603      	mov	r3, r0
 800091e:	623b      	str	r3, [r7, #32]
	
	
	/* Set to pointer */
	*destination = decimal;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	6a3a      	ldr	r2, [r7, #32]
 8000924:	601a      	str	r2, [r3, #0]
	
	/* Return 1, temperature valid */
	return true;
 8000926:	2301      	movs	r3, #1
}
 8000928:	4618      	mov	r0, r3
 800092a:	372c      	adds	r7, #44	@ 0x2c
 800092c:	46bd      	mov	sp, r7
 800092e:	bd90      	pop	{r4, r7, pc}
 8000930:	20000588 	.word	0x20000588
 8000934:	437f0000 	.word	0x437f0000

08000938 <DS18B20_SetResolution>:
	/* Return 9 - 12 value according to number of bits */
	return ((conf & 0x60) >> 5) + 9;
}

uint8_t DS18B20_SetResolution(OneWire_t* OneWire, uint8_t *ROM, DS18B20_Resolution_t resolution) 
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b086      	sub	sp, #24
 800093c:	af00      	add	r7, sp, #0
 800093e:	60f8      	str	r0, [r7, #12]
 8000940:	60b9      	str	r1, [r7, #8]
 8000942:	4613      	mov	r3, r2
 8000944:	71fb      	strb	r3, [r7, #7]
	uint8_t th, tl, conf;
	if (!DS18B20_Is(ROM)) 
 8000946:	68b8      	ldr	r0, [r7, #8]
 8000948:	f000 f87e 	bl	8000a48 <DS18B20_Is>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d101      	bne.n	8000956 <DS18B20_SetResolution+0x1e>
		return 0;
 8000952:	2300      	movs	r3, #0
 8000954:	e074      	b.n	8000a40 <DS18B20_SetResolution+0x108>
	
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000956:	68f8      	ldr	r0, [r7, #12]
 8000958:	f000 f984 	bl	8000c64 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 800095c:	68b9      	ldr	r1, [r7, #8]
 800095e:	68f8      	ldr	r0, [r7, #12]
 8000960:	f000 fb3a 	bl	8000fd8 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000964:	21be      	movs	r1, #190	@ 0xbe
 8000966:	68f8      	ldr	r0, [r7, #12]
 8000968:	f000 fa02 	bl	8000d70 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 800096c:	68f8      	ldr	r0, [r7, #12]
 800096e:	f000 fa1d 	bl	8000dac <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000972:	68f8      	ldr	r0, [r7, #12]
 8000974:	f000 fa1a 	bl	8000dac <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8000978:	68f8      	ldr	r0, [r7, #12]
 800097a:	f000 fa17 	bl	8000dac <OneWire_ReadByte>
 800097e:	4603      	mov	r3, r0
 8000980:	75bb      	strb	r3, [r7, #22]
	tl = OneWire_ReadByte(OneWire);
 8000982:	68f8      	ldr	r0, [r7, #12]
 8000984:	f000 fa12 	bl	8000dac <OneWire_ReadByte>
 8000988:	4603      	mov	r3, r0
 800098a:	757b      	strb	r3, [r7, #21]
	conf = OneWire_ReadByte(OneWire);
 800098c:	68f8      	ldr	r0, [r7, #12]
 800098e:	f000 fa0d 	bl	8000dac <OneWire_ReadByte>
 8000992:	4603      	mov	r3, r0
 8000994:	75fb      	strb	r3, [r7, #23]
	
	if (resolution == DS18B20_Resolution_9bits) 
 8000996:	79fb      	ldrb	r3, [r7, #7]
 8000998:	2b09      	cmp	r3, #9
 800099a:	d108      	bne.n	80009ae <DS18B20_SetResolution+0x76>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 800099c:	7dfb      	ldrb	r3, [r7, #23]
 800099e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80009a2:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80009a4:	7dfb      	ldrb	r3, [r7, #23]
 80009a6:	f023 0320 	bic.w	r3, r3, #32
 80009aa:	75fb      	strb	r3, [r7, #23]
 80009ac:	e022      	b.n	80009f4 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_10bits) 
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	2b0a      	cmp	r3, #10
 80009b2:	d108      	bne.n	80009c6 <DS18B20_SetResolution+0x8e>
	{
		conf &= ~(1 << DS18B20_RESOLUTION_R1);
 80009b4:	7dfb      	ldrb	r3, [r7, #23]
 80009b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80009ba:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80009bc:	7dfb      	ldrb	r3, [r7, #23]
 80009be:	f043 0320 	orr.w	r3, r3, #32
 80009c2:	75fb      	strb	r3, [r7, #23]
 80009c4:	e016      	b.n	80009f4 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_11bits)
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b0b      	cmp	r3, #11
 80009ca:	d108      	bne.n	80009de <DS18B20_SetResolution+0xa6>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80009cc:	7dfb      	ldrb	r3, [r7, #23]
 80009ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009d2:	75fb      	strb	r3, [r7, #23]
		conf &= ~(1 << DS18B20_RESOLUTION_R0);
 80009d4:	7dfb      	ldrb	r3, [r7, #23]
 80009d6:	f023 0320 	bic.w	r3, r3, #32
 80009da:	75fb      	strb	r3, [r7, #23]
 80009dc:	e00a      	b.n	80009f4 <DS18B20_SetResolution+0xbc>
	}
	else if (resolution == DS18B20_Resolution_12bits)
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	2b0c      	cmp	r3, #12
 80009e2:	d107      	bne.n	80009f4 <DS18B20_SetResolution+0xbc>
	{
		conf |= 1 << DS18B20_RESOLUTION_R1;
 80009e4:	7dfb      	ldrb	r3, [r7, #23]
 80009e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80009ea:	75fb      	strb	r3, [r7, #23]
		conf |= 1 << DS18B20_RESOLUTION_R0;
 80009ec:	7dfb      	ldrb	r3, [r7, #23]
 80009ee:	f043 0320 	orr.w	r3, r3, #32
 80009f2:	75fb      	strb	r3, [r7, #23]
	}
	
	/* Reset line */
	OneWire_Reset(OneWire);
 80009f4:	68f8      	ldr	r0, [r7, #12]
 80009f6:	f000 f935 	bl	8000c64 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 80009fa:	68b9      	ldr	r1, [r7, #8]
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f000 faeb 	bl	8000fd8 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000a02:	214e      	movs	r1, #78	@ 0x4e
 8000a04:	68f8      	ldr	r0, [r7, #12]
 8000a06:	f000 f9b3 	bl	8000d70 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000a0a:	7dbb      	ldrb	r3, [r7, #22]
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f000 f9ae 	bl	8000d70 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000a14:	7d7b      	ldrb	r3, [r7, #21]
 8000a16:	4619      	mov	r1, r3
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f000 f9a9 	bl	8000d70 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000a1e:	7dfb      	ldrb	r3, [r7, #23]
 8000a20:	4619      	mov	r1, r3
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f000 f9a4 	bl	8000d70 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000a28:	68f8      	ldr	r0, [r7, #12]
 8000a2a:	f000 f91b 	bl	8000c64 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000a2e:	68b9      	ldr	r1, [r7, #8]
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f000 fad1 	bl	8000fd8 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000a36:	2148      	movs	r1, #72	@ 0x48
 8000a38:	68f8      	ldr	r0, [r7, #12]
 8000a3a:	f000 f999 	bl	8000d70 <OneWire_WriteByte>
	
	return 1;
 8000a3e:	2301      	movs	r3, #1
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <DS18B20_Is>:

uint8_t DS18B20_Is(uint8_t *ROM) 
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b083      	sub	sp, #12
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
	/* Checks if first byte is equal to DS18B20's family code */
	if (*ROM == DS18B20_FAMILY_CODE) 
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	2b28      	cmp	r3, #40	@ 0x28
 8000a56:	d101      	bne.n	8000a5c <DS18B20_Is+0x14>
		return 1;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e000      	b.n	8000a5e <DS18B20_Is+0x16>
	
	return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bc80      	pop	{r7}
 8000a66:	4770      	bx	lr

08000a68 <DS18B20_DisableAlarmTemperature>:
	
	return 1;
}

uint8_t DS18B20_DisableAlarmTemperature(OneWire_t* OneWire, uint8_t *ROM) 
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
	uint8_t tl, th, conf;
	if (!DS18B20_Is(ROM)) 
 8000a72:	6838      	ldr	r0, [r7, #0]
 8000a74:	f7ff ffe8 	bl	8000a48 <DS18B20_Is>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d101      	bne.n	8000a82 <DS18B20_DisableAlarmTemperature+0x1a>
		return 0;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	e049      	b.n	8000b16 <DS18B20_DisableAlarmTemperature+0xae>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f000 f8ee 	bl	8000c64 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000a88:	6839      	ldr	r1, [r7, #0]
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f000 faa4 	bl	8000fd8 <OneWire_SelectWithPointer>
	/* Read scratchpad command by onewire protocol */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_RSCRATCHPAD);
 8000a90:	21be      	movs	r1, #190	@ 0xbe
 8000a92:	6878      	ldr	r0, [r7, #4]
 8000a94:	f000 f96c 	bl	8000d70 <OneWire_WriteByte>
	
	/* Ignore first 2 bytes */
	OneWire_ReadByte(OneWire);
 8000a98:	6878      	ldr	r0, [r7, #4]
 8000a9a:	f000 f987 	bl	8000dac <OneWire_ReadByte>
	OneWire_ReadByte(OneWire);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 f984 	bl	8000dac <OneWire_ReadByte>
	
	th = OneWire_ReadByte(OneWire);
 8000aa4:	6878      	ldr	r0, [r7, #4]
 8000aa6:	f000 f981 	bl	8000dac <OneWire_ReadByte>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	73fb      	strb	r3, [r7, #15]
	tl = OneWire_ReadByte(OneWire);
 8000aae:	6878      	ldr	r0, [r7, #4]
 8000ab0:	f000 f97c 	bl	8000dac <OneWire_ReadByte>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	73bb      	strb	r3, [r7, #14]
	conf = OneWire_ReadByte(OneWire);
 8000ab8:	6878      	ldr	r0, [r7, #4]
 8000aba:	f000 f977 	bl	8000dac <OneWire_ReadByte>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	737b      	strb	r3, [r7, #13]
	
	th = 125;
 8000ac2:	237d      	movs	r3, #125	@ 0x7d
 8000ac4:	73fb      	strb	r3, [r7, #15]
	tl = (uint8_t)-55;
 8000ac6:	23c9      	movs	r3, #201	@ 0xc9
 8000ac8:	73bb      	strb	r3, [r7, #14]

	/* Reset line */
	OneWire_Reset(OneWire);
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f000 f8ca 	bl	8000c64 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000ad0:	6839      	ldr	r1, [r7, #0]
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f000 fa80 	bl	8000fd8 <OneWire_SelectWithPointer>
	/* Write scratchpad command by onewire protocol, only th, tl and conf register can be written */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_WSCRATCHPAD);
 8000ad8:	214e      	movs	r1, #78	@ 0x4e
 8000ada:	6878      	ldr	r0, [r7, #4]
 8000adc:	f000 f948 	bl	8000d70 <OneWire_WriteByte>
	
	/* Write bytes */
	OneWire_WriteByte(OneWire, th);
 8000ae0:	7bfb      	ldrb	r3, [r7, #15]
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	6878      	ldr	r0, [r7, #4]
 8000ae6:	f000 f943 	bl	8000d70 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, tl);
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	4619      	mov	r1, r3
 8000aee:	6878      	ldr	r0, [r7, #4]
 8000af0:	f000 f93e 	bl	8000d70 <OneWire_WriteByte>
	OneWire_WriteByte(OneWire, conf);
 8000af4:	7b7b      	ldrb	r3, [r7, #13]
 8000af6:	4619      	mov	r1, r3
 8000af8:	6878      	ldr	r0, [r7, #4]
 8000afa:	f000 f939 	bl	8000d70 <OneWire_WriteByte>
	
	/* Reset line */
	OneWire_Reset(OneWire);
 8000afe:	6878      	ldr	r0, [r7, #4]
 8000b00:	f000 f8b0 	bl	8000c64 <OneWire_Reset>
	/* Select ROM number */
	OneWire_SelectWithPointer(OneWire, ROM);
 8000b04:	6839      	ldr	r1, [r7, #0]
 8000b06:	6878      	ldr	r0, [r7, #4]
 8000b08:	f000 fa66 	bl	8000fd8 <OneWire_SelectWithPointer>
	/* Copy scratchpad to EEPROM of DS18B20 */
	OneWire_WriteByte(OneWire, ONEWIRE_CMD_CPYSCRATCHPAD);
 8000b0c:	2148      	movs	r1, #72	@ 0x48
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f000 f92e 	bl	8000d70 <OneWire_WriteByte>
	
	return 1;
 8000b14:	2301      	movs	r3, #1
}
 8000b16:	4618      	mov	r0, r3
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}

08000b1e <DS18B20_AllDone>:
	/* Start alarm search */
	return OneWire_Search(OneWire, DS18B20_CMD_ALARMSEARCH);
}

uint8_t DS18B20_AllDone(OneWire_t* OneWire)
{
 8000b1e:	b580      	push	{r7, lr}
 8000b20:	b082      	sub	sp, #8
 8000b22:	af00      	add	r7, sp, #0
 8000b24:	6078      	str	r0, [r7, #4]
	/* If read bit is low, then device is not finished yet with calculation temperature */
	return OneWire_ReadBit(OneWire);
 8000b26:	6878      	ldr	r0, [r7, #4]
 8000b28:	f000 f8f8 	bl	8000d1c <OneWire_ReadBit>
 8000b2c:	4603      	mov	r3, r0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	3708      	adds	r7, #8
 8000b32:	46bd      	mov	sp, r7
 8000b34:	bd80      	pop	{r7, pc}
	...

08000b38 <ONEWIRE_DELAY>:

extern TIM_HandleTypeDef htim2;
extern TIM_HandleTypeDef htim3;

void ONEWIRE_DELAY(uint16_t time_us)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	80fb      	strh	r3, [r7, #6]
	_DS18B20_TIMER.Instance->CNT = 0;
 8000b42:	4b08      	ldr	r3, [pc, #32]	@ (8000b64 <ONEWIRE_DELAY+0x2c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	2200      	movs	r2, #0
 8000b48:	625a      	str	r2, [r3, #36]	@ 0x24
	while(_DS18B20_TIMER.Instance->CNT <= time_us);
 8000b4a:	bf00      	nop
 8000b4c:	4b05      	ldr	r3, [pc, #20]	@ (8000b64 <ONEWIRE_DELAY+0x2c>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000b52:	88fb      	ldrh	r3, [r7, #6]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d9f9      	bls.n	8000b4c <ONEWIRE_DELAY+0x14>
}
 8000b58:	bf00      	nop
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bc80      	pop	{r7}
 8000b62:	4770      	bx	lr
 8000b64:	20000540 	.word	0x20000540

08000b68 <ONEWIRE_LOW>:
void ONEWIRE_LOW(OneWire_t *gp)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin<<16;
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	889b      	ldrh	r3, [r3, #4]
 8000b74:	461a      	mov	r2, r3
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	0412      	lsls	r2, r2, #16
 8000b7c:	611a      	str	r2, [r3, #16]
}	
 8000b7e:	bf00      	nop
 8000b80:	370c      	adds	r7, #12
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bc80      	pop	{r7}
 8000b86:	4770      	bx	lr

08000b88 <ONEWIRE_HIGH>:
void ONEWIRE_HIGH(OneWire_t *gp)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
	gp->GPIOx->BSRR = gp->GPIO_Pin;
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	889a      	ldrh	r2, [r3, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	611a      	str	r2, [r3, #16]
}	
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bc80      	pop	{r7}
 8000ba2:	4770      	bx	lr

08000ba4 <ONEWIRE_INPUT>:
void ONEWIRE_INPUT(OneWire_t *gp)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_INPUT;
 8000bac:	2300      	movs	r3, #0
 8000bae:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;	
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	889b      	ldrh	r3, [r3, #4]
 8000bbc:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f107 0208 	add.w	r2, r7, #8
 8000bc6:	4611      	mov	r1, r2
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f001 fdc7 	bl	800275c <HAL_GPIO_Init>
}	
 8000bce:	bf00      	nop
 8000bd0:	3718      	adds	r7, #24
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <ONEWIRE_OUTPUT>:
void ONEWIRE_OUTPUT(OneWire_t *gp)
{
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef	gpinit;
	gpinit.Mode = GPIO_MODE_OUTPUT_OD;
 8000bde:	2311      	movs	r3, #17
 8000be0:	60fb      	str	r3, [r7, #12]
	gpinit.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
	gpinit.Speed = GPIO_SPEED_FREQ_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	617b      	str	r3, [r7, #20]
	gpinit.Pin = gp->GPIO_Pin;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	889b      	ldrh	r3, [r3, #4]
 8000bee:	60bb      	str	r3, [r7, #8]
	HAL_GPIO_Init(gp->GPIOx,&gpinit);
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f107 0208 	add.w	r2, r7, #8
 8000bf8:	4611      	mov	r1, r2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fdae 	bl	800275c <HAL_GPIO_Init>

}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}

08000c08 <OneWire_Init>:
void OneWire_Init(OneWire_t* OneWireStruct, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin) 
{	
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	60f8      	str	r0, [r7, #12]
 8000c10:	60b9      	str	r1, [r7, #8]
 8000c12:	4613      	mov	r3, r2
 8000c14:	80fb      	strh	r3, [r7, #6]
	HAL_TIM_Base_Start(&_DS18B20_TIMER);
 8000c16:	4812      	ldr	r0, [pc, #72]	@ (8000c60 <OneWire_Init+0x58>)
 8000c18:	f003 f9a0 	bl	8003f5c <HAL_TIM_Base_Start>

	OneWireStruct->GPIOx = GPIOx;
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	68ba      	ldr	r2, [r7, #8]
 8000c20:	601a      	str	r2, [r3, #0]
	OneWireStruct->GPIO_Pin = GPIO_Pin;
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	88fa      	ldrh	r2, [r7, #6]
 8000c26:	809a      	strh	r2, [r3, #4]
	ONEWIRE_OUTPUT(OneWireStruct);
 8000c28:	68f8      	ldr	r0, [r7, #12]
 8000c2a:	f7ff ffd4 	bl	8000bd6 <ONEWIRE_OUTPUT>
	ONEWIRE_HIGH(OneWireStruct);
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f7ff ffaa 	bl	8000b88 <ONEWIRE_HIGH>
	OneWireDelay(1000);
 8000c34:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c38:	f001 fc5e 	bl	80024f8 <HAL_Delay>
	ONEWIRE_LOW(OneWireStruct);
 8000c3c:	68f8      	ldr	r0, [r7, #12]
 8000c3e:	f7ff ff93 	bl	8000b68 <ONEWIRE_LOW>
	OneWireDelay(1000);
 8000c42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c46:	f001 fc57 	bl	80024f8 <HAL_Delay>
	ONEWIRE_HIGH(OneWireStruct);
 8000c4a:	68f8      	ldr	r0, [r7, #12]
 8000c4c:	f7ff ff9c 	bl	8000b88 <ONEWIRE_HIGH>
	OneWireDelay(2000);
 8000c50:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000c54:	f001 fc50 	bl	80024f8 <HAL_Delay>
}
 8000c58:	bf00      	nop
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	20000540 	.word	0x20000540

08000c64 <OneWire_Reset>:

inline uint8_t OneWire_Reset(OneWire_t* OneWireStruct)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
	uint8_t i;
	
	/* Line low, and wait 480us */
	ONEWIRE_LOW(OneWireStruct);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ff7b 	bl	8000b68 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8000c72:	6878      	ldr	r0, [r7, #4]
 8000c74:	f7ff ffaf 	bl	8000bd6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(480);
 8000c78:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 8000c7c:	f7ff ff5c 	bl	8000b38 <ONEWIRE_DELAY>
	ONEWIRE_DELAY(20);
 8000c80:	2014      	movs	r0, #20
 8000c82:	f7ff ff59 	bl	8000b38 <ONEWIRE_DELAY>
	/* Release line and wait for 70us */
	ONEWIRE_INPUT(OneWireStruct);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f7ff ff8c 	bl	8000ba4 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(70);
 8000c8c:	2046      	movs	r0, #70	@ 0x46
 8000c8e:	f7ff ff53 	bl	8000b38 <ONEWIRE_DELAY>
	/* Check bit value */
	i = HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	889b      	ldrh	r3, [r3, #4]
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4610      	mov	r0, r2
 8000c9e:	f001 fee1 	bl	8002a64 <HAL_GPIO_ReadPin>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	73fb      	strb	r3, [r7, #15]
	
	/* Delay for 410 us */
	ONEWIRE_DELAY(410);
 8000ca6:	f44f 70cd 	mov.w	r0, #410	@ 0x19a
 8000caa:	f7ff ff45 	bl	8000b38 <ONEWIRE_DELAY>
	/* Return value of presence pulse, 0 = OK, 1 = ERROR */
	return i;
 8000cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	3710      	adds	r7, #16
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <OneWire_WriteBit>:

inline void OneWire_WriteBit(OneWire_t* OneWireStruct, uint8_t bit)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	460b      	mov	r3, r1
 8000cc2:	70fb      	strb	r3, [r7, #3]
	if (bit) 
 8000cc4:	78fb      	ldrb	r3, [r7, #3]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d012      	beq.n	8000cf0 <OneWire_WriteBit+0x38>
	{
		/* Set line low */
		ONEWIRE_LOW(OneWireStruct);
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	f7ff ff4c 	bl	8000b68 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8000cd0:	6878      	ldr	r0, [r7, #4]
 8000cd2:	f7ff ff80 	bl	8000bd6 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(10);
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f7ff ff2e 	bl	8000b38 <ONEWIRE_DELAY>
		
		/* Bit high */
		ONEWIRE_INPUT(OneWireStruct);
 8000cdc:	6878      	ldr	r0, [r7, #4]
 8000cde:	f7ff ff61 	bl	8000ba4 <ONEWIRE_INPUT>
		
		/* Wait for 55 us and release the line */
		ONEWIRE_DELAY(55);
 8000ce2:	2037      	movs	r0, #55	@ 0x37
 8000ce4:	f7ff ff28 	bl	8000b38 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8000ce8:	6878      	ldr	r0, [r7, #4]
 8000cea:	f7ff ff5b 	bl	8000ba4 <ONEWIRE_INPUT>
		/* Wait for 5 us and release the line */
		ONEWIRE_DELAY(5);
		ONEWIRE_INPUT(OneWireStruct);
	}

}
 8000cee:	e011      	b.n	8000d14 <OneWire_WriteBit+0x5c>
		ONEWIRE_LOW(OneWireStruct);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f7ff ff39 	bl	8000b68 <ONEWIRE_LOW>
		ONEWIRE_OUTPUT(OneWireStruct);
 8000cf6:	6878      	ldr	r0, [r7, #4]
 8000cf8:	f7ff ff6d 	bl	8000bd6 <ONEWIRE_OUTPUT>
		ONEWIRE_DELAY(65);
 8000cfc:	2041      	movs	r0, #65	@ 0x41
 8000cfe:	f7ff ff1b 	bl	8000b38 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	f7ff ff4e 	bl	8000ba4 <ONEWIRE_INPUT>
		ONEWIRE_DELAY(5);
 8000d08:	2005      	movs	r0, #5
 8000d0a:	f7ff ff15 	bl	8000b38 <ONEWIRE_DELAY>
		ONEWIRE_INPUT(OneWireStruct);
 8000d0e:	6878      	ldr	r0, [r7, #4]
 8000d10:	f7ff ff48 	bl	8000ba4 <ONEWIRE_INPUT>
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <OneWire_ReadBit>:

inline uint8_t OneWire_ReadBit(OneWire_t* OneWireStruct) 
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b084      	sub	sp, #16
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
	uint8_t bit = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	73fb      	strb	r3, [r7, #15]
	
	/* Line low */
	ONEWIRE_LOW(OneWireStruct);
 8000d28:	6878      	ldr	r0, [r7, #4]
 8000d2a:	f7ff ff1d 	bl	8000b68 <ONEWIRE_LOW>
	ONEWIRE_OUTPUT(OneWireStruct);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff ff51 	bl	8000bd6 <ONEWIRE_OUTPUT>
	ONEWIRE_DELAY(2);
 8000d34:	2002      	movs	r0, #2
 8000d36:	f7ff feff 	bl	8000b38 <ONEWIRE_DELAY>
	
	/* Release line */
	ONEWIRE_INPUT(OneWireStruct);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f7ff ff32 	bl	8000ba4 <ONEWIRE_INPUT>
	ONEWIRE_DELAY(10);
 8000d40:	200a      	movs	r0, #10
 8000d42:	f7ff fef9 	bl	8000b38 <ONEWIRE_DELAY>
	
	/* Read line value */
	if (HAL_GPIO_ReadPin(OneWireStruct->GPIOx, OneWireStruct->GPIO_Pin)) {
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	889b      	ldrh	r3, [r3, #4]
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4610      	mov	r0, r2
 8000d52:	f001 fe87 	bl	8002a64 <HAL_GPIO_ReadPin>
 8000d56:	4603      	mov	r3, r0
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d001      	beq.n	8000d60 <OneWire_ReadBit+0x44>
		/* Bit is HIGH */
		bit = 1;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	73fb      	strb	r3, [r7, #15]
	}
	
	/* Wait 50us to complete 60us period */
	ONEWIRE_DELAY(50);
 8000d60:	2032      	movs	r0, #50	@ 0x32
 8000d62:	f7ff fee9 	bl	8000b38 <ONEWIRE_DELAY>
	
	/* Return bit value */
	return bit;
 8000d66:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3710      	adds	r7, #16
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <OneWire_WriteByte>:

void OneWire_WriteByte(OneWire_t* OneWireStruct, uint8_t byte) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	70fb      	strb	r3, [r7, #3]
	uint8_t i = 8;
 8000d7c:	2308      	movs	r3, #8
 8000d7e:	73fb      	strb	r3, [r7, #15]
	/* Write 8 bits */
	while (i--) {
 8000d80:	e00a      	b.n	8000d98 <OneWire_WriteByte+0x28>
		/* LSB bit is first */
		OneWire_WriteBit(OneWireStruct, byte & 0x01);
 8000d82:	78fb      	ldrb	r3, [r7, #3]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f7ff ff93 	bl	8000cb8 <OneWire_WriteBit>
		byte >>= 1;
 8000d92:	78fb      	ldrb	r3, [r7, #3]
 8000d94:	085b      	lsrs	r3, r3, #1
 8000d96:	70fb      	strb	r3, [r7, #3]
	while (i--) {
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
 8000d9a:	1e5a      	subs	r2, r3, #1
 8000d9c:	73fa      	strb	r2, [r7, #15]
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d1ef      	bne.n	8000d82 <OneWire_WriteByte+0x12>
	}
}
 8000da2:	bf00      	nop
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <OneWire_ReadByte>:

uint8_t OneWire_ReadByte(OneWire_t* OneWireStruct) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
	uint8_t i = 8, byte = 0;
 8000db4:	2308      	movs	r3, #8
 8000db6:	73fb      	strb	r3, [r7, #15]
 8000db8:	2300      	movs	r3, #0
 8000dba:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8000dbc:	e00d      	b.n	8000dda <OneWire_ReadByte+0x2e>
		byte >>= 1;
 8000dbe:	7bbb      	ldrb	r3, [r7, #14]
 8000dc0:	085b      	lsrs	r3, r3, #1
 8000dc2:	73bb      	strb	r3, [r7, #14]
		byte |= (OneWire_ReadBit(OneWireStruct) << 7);
 8000dc4:	6878      	ldr	r0, [r7, #4]
 8000dc6:	f7ff ffa9 	bl	8000d1c <OneWire_ReadBit>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	01db      	lsls	r3, r3, #7
 8000dce:	b25a      	sxtb	r2, r3
 8000dd0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	b25b      	sxtb	r3, r3
 8000dd8:	73bb      	strb	r3, [r7, #14]
	while (i--) {
 8000dda:	7bfb      	ldrb	r3, [r7, #15]
 8000ddc:	1e5a      	subs	r2, r3, #1
 8000dde:	73fa      	strb	r2, [r7, #15]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d1ec      	bne.n	8000dbe <OneWire_ReadByte+0x12>
	}
	
	return byte;
 8000de4:	7bbb      	ldrb	r3, [r7, #14]
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3710      	adds	r7, #16
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}

08000dee <OneWire_First>:

uint8_t OneWire_First(OneWire_t* OneWireStruct) {
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
	/* Reset search values */
	OneWire_ResetSearch(OneWireStruct);
 8000df6:	6878      	ldr	r0, [r7, #4]
 8000df8:	f000 f816 	bl	8000e28 <OneWire_ResetSearch>

	/* Start with searching */
	return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8000dfc:	21f0      	movs	r1, #240	@ 0xf0
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f000 f824 	bl	8000e4c <OneWire_Search>
 8000e04:	4603      	mov	r3, r0
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <OneWire_Next>:

uint8_t OneWire_Next(OneWire_t* OneWireStruct) {
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
   /* Leave the search state alone */
   return OneWire_Search(OneWireStruct, ONEWIRE_CMD_SEARCHROM);
 8000e16:	21f0      	movs	r1, #240	@ 0xf0
 8000e18:	6878      	ldr	r0, [r7, #4]
 8000e1a:	f000 f817 	bl	8000e4c <OneWire_Search>
 8000e1e:	4603      	mov	r3, r0
}
 8000e20:	4618      	mov	r0, r3
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <OneWire_ResetSearch>:

void OneWire_ResetSearch(OneWire_t* OneWireStruct) {
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
	/* Reset the search state */
	OneWireStruct->LastDiscrepancy = 0;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	719a      	strb	r2, [r3, #6]
	OneWireStruct->LastDeviceFlag = 0;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2200      	movs	r2, #0
 8000e3a:	721a      	strb	r2, [r3, #8]
	OneWireStruct->LastFamilyDiscrepancy = 0;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	71da      	strb	r2, [r3, #7]
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bc80      	pop	{r7}
 8000e4a:	4770      	bx	lr

08000e4c <OneWire_Search>:

uint8_t OneWire_Search(OneWire_t* OneWireStruct, uint8_t command) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	460b      	mov	r3, r1
 8000e56:	70fb      	strb	r3, [r7, #3]
	uint8_t last_zero, rom_byte_number, search_result;
	uint8_t id_bit, cmp_id_bit;
	uint8_t rom_byte_mask, search_direction;

	/* Initialize for search */
	id_bit_number = 1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	73fb      	strb	r3, [r7, #15]
	last_zero = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73bb      	strb	r3, [r7, #14]
	rom_byte_number = 0;
 8000e60:	2300      	movs	r3, #0
 8000e62:	737b      	strb	r3, [r7, #13]
	rom_byte_mask = 1;
 8000e64:	2301      	movs	r3, #1
 8000e66:	72fb      	strb	r3, [r7, #11]
	search_result = 0;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	733b      	strb	r3, [r7, #12]

	// if the last call was not the last one
	if (!OneWireStruct->LastDeviceFlag)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	7a1b      	ldrb	r3, [r3, #8]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f040 809a 	bne.w	8000faa <OneWire_Search+0x15e>
	{
		// 1-Wire reset
		if (OneWire_Reset(OneWireStruct)) 
 8000e76:	6878      	ldr	r0, [r7, #4]
 8000e78:	f7ff fef4 	bl	8000c64 <OneWire_Reset>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d00a      	beq.n	8000e98 <OneWire_Search+0x4c>
		{
			/* Reset the search */
			OneWireStruct->LastDiscrepancy = 0;
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	719a      	strb	r2, [r3, #6]
			OneWireStruct->LastDeviceFlag = 0;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	721a      	strb	r2, [r3, #8]
			OneWireStruct->LastFamilyDiscrepancy = 0;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	71da      	strb	r2, [r3, #7]
			return 0;
 8000e94:	2300      	movs	r3, #0
 8000e96:	e09b      	b.n	8000fd0 <OneWire_Search+0x184>
		}

		// issue the search command 
		OneWire_WriteByte(OneWireStruct, command);  
 8000e98:	78fb      	ldrb	r3, [r7, #3]
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ff67 	bl	8000d70 <OneWire_WriteByte>

		// loop to do the search
		do {
			// read a bit and its complement
			id_bit = OneWire_ReadBit(OneWireStruct);
 8000ea2:	6878      	ldr	r0, [r7, #4]
 8000ea4:	f7ff ff3a 	bl	8000d1c <OneWire_ReadBit>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	727b      	strb	r3, [r7, #9]
			cmp_id_bit = OneWire_ReadBit(OneWireStruct);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f7ff ff35 	bl	8000d1c <OneWire_ReadBit>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	723b      	strb	r3, [r7, #8]

			// check for no devices on 1-wire
			if ((id_bit == 1) && (cmp_id_bit == 1)) {
 8000eb6:	7a7b      	ldrb	r3, [r7, #9]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d102      	bne.n	8000ec2 <OneWire_Search+0x76>
 8000ebc:	7a3b      	ldrb	r3, [r7, #8]
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d064      	beq.n	8000f8c <OneWire_Search+0x140>
				break;
			} else {
				// all devices coupled have 0 or 1
				if (id_bit != cmp_id_bit) {
 8000ec2:	7a7a      	ldrb	r2, [r7, #9]
 8000ec4:	7a3b      	ldrb	r3, [r7, #8]
 8000ec6:	429a      	cmp	r2, r3
 8000ec8:	d002      	beq.n	8000ed0 <OneWire_Search+0x84>
					search_direction = id_bit;  // bit write value for search
 8000eca:	7a7b      	ldrb	r3, [r7, #9]
 8000ecc:	72bb      	strb	r3, [r7, #10]
 8000ece:	e026      	b.n	8000f1e <OneWire_Search+0xd2>
				} else {
					// if this discrepancy if before the Last Discrepancy
					// on a previous next then pick the same as last time
					if (id_bit_number < OneWireStruct->LastDiscrepancy) {
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	799b      	ldrb	r3, [r3, #6]
 8000ed4:	7bfa      	ldrb	r2, [r7, #15]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d20d      	bcs.n	8000ef6 <OneWire_Search+0xaa>
						search_direction = ((OneWireStruct->ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8000eda:	7b7b      	ldrb	r3, [r7, #13]
 8000edc:	687a      	ldr	r2, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	7a5a      	ldrb	r2, [r3, #9]
 8000ee2:	7afb      	ldrb	r3, [r7, #11]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	bf14      	ite	ne
 8000eec:	2301      	movne	r3, #1
 8000eee:	2300      	moveq	r3, #0
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	72bb      	strb	r3, [r7, #10]
 8000ef4:	e008      	b.n	8000f08 <OneWire_Search+0xbc>
					} else {
						// if equal to last pick 1, if not then pick 0
						search_direction = (id_bit_number == OneWireStruct->LastDiscrepancy);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	799b      	ldrb	r3, [r3, #6]
 8000efa:	7bfa      	ldrb	r2, [r7, #15]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	bf0c      	ite	eq
 8000f00:	2301      	moveq	r3, #1
 8000f02:	2300      	movne	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	72bb      	strb	r3, [r7, #10]
					}
					
					// if 0 was picked then record its position in LastZero
					if (search_direction == 0) {
 8000f08:	7abb      	ldrb	r3, [r7, #10]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d107      	bne.n	8000f1e <OneWire_Search+0xd2>
						last_zero = id_bit_number;
 8000f0e:	7bfb      	ldrb	r3, [r7, #15]
 8000f10:	73bb      	strb	r3, [r7, #14]

						// check for Last discrepancy in family
						if (last_zero < 9) {
 8000f12:	7bbb      	ldrb	r3, [r7, #14]
 8000f14:	2b08      	cmp	r3, #8
 8000f16:	d802      	bhi.n	8000f1e <OneWire_Search+0xd2>
							OneWireStruct->LastFamilyDiscrepancy = last_zero;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	7bba      	ldrb	r2, [r7, #14]
 8000f1c:	71da      	strb	r2, [r3, #7]
					}
				}

				// set or clear the bit in the ROM byte rom_byte_number
				// with mask rom_byte_mask
				if (search_direction == 1) {
 8000f1e:	7abb      	ldrb	r3, [r7, #10]
 8000f20:	2b01      	cmp	r3, #1
 8000f22:	d10c      	bne.n	8000f3e <OneWire_Search+0xf2>
					OneWireStruct->ROM_NO[rom_byte_number] |= rom_byte_mask;
 8000f24:	7b7b      	ldrb	r3, [r7, #13]
 8000f26:	687a      	ldr	r2, [r7, #4]
 8000f28:	4413      	add	r3, r2
 8000f2a:	7a59      	ldrb	r1, [r3, #9]
 8000f2c:	7b7b      	ldrb	r3, [r7, #13]
 8000f2e:	7afa      	ldrb	r2, [r7, #11]
 8000f30:	430a      	orrs	r2, r1
 8000f32:	b2d1      	uxtb	r1, r2
 8000f34:	687a      	ldr	r2, [r7, #4]
 8000f36:	4413      	add	r3, r2
 8000f38:	460a      	mov	r2, r1
 8000f3a:	725a      	strb	r2, [r3, #9]
 8000f3c:	e010      	b.n	8000f60 <OneWire_Search+0x114>
				} else {
					OneWireStruct->ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 8000f3e:	7b7b      	ldrb	r3, [r7, #13]
 8000f40:	687a      	ldr	r2, [r7, #4]
 8000f42:	4413      	add	r3, r2
 8000f44:	7a5b      	ldrb	r3, [r3, #9]
 8000f46:	b25a      	sxtb	r2, r3
 8000f48:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	b25b      	sxtb	r3, r3
 8000f50:	4013      	ands	r3, r2
 8000f52:	b25a      	sxtb	r2, r3
 8000f54:	7b7b      	ldrb	r3, [r7, #13]
 8000f56:	b2d1      	uxtb	r1, r2
 8000f58:	687a      	ldr	r2, [r7, #4]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	460a      	mov	r2, r1
 8000f5e:	725a      	strb	r2, [r3, #9]
				}
				
				// serial number search direction write bit
				OneWire_WriteBit(OneWireStruct, search_direction);
 8000f60:	7abb      	ldrb	r3, [r7, #10]
 8000f62:	4619      	mov	r1, r3
 8000f64:	6878      	ldr	r0, [r7, #4]
 8000f66:	f7ff fea7 	bl	8000cb8 <OneWire_WriteBit>

				// increment the byte counter id_bit_number
				// and shift the mask rom_byte_mask
				id_bit_number++;
 8000f6a:	7bfb      	ldrb	r3, [r7, #15]
 8000f6c:	3301      	adds	r3, #1
 8000f6e:	73fb      	strb	r3, [r7, #15]
				rom_byte_mask <<= 1;
 8000f70:	7afb      	ldrb	r3, [r7, #11]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	72fb      	strb	r3, [r7, #11]

				// if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
				if (rom_byte_mask == 0) {
 8000f76:	7afb      	ldrb	r3, [r7, #11]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d104      	bne.n	8000f86 <OneWire_Search+0x13a>
					//docrc8(ROM_NO[rom_byte_number]);  // accumulate the CRC
					rom_byte_number++;
 8000f7c:	7b7b      	ldrb	r3, [r7, #13]
 8000f7e:	3301      	adds	r3, #1
 8000f80:	737b      	strb	r3, [r7, #13]
					rom_byte_mask = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	72fb      	strb	r3, [r7, #11]
				}
			}
		} while (rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8000f86:	7b7b      	ldrb	r3, [r7, #13]
 8000f88:	2b07      	cmp	r3, #7
 8000f8a:	d98a      	bls.n	8000ea2 <OneWire_Search+0x56>

		// if the search was successful then
		if (!(id_bit_number < 65)) {
 8000f8c:	7bfb      	ldrb	r3, [r7, #15]
 8000f8e:	2b40      	cmp	r3, #64	@ 0x40
 8000f90:	d90b      	bls.n	8000faa <OneWire_Search+0x15e>
			// search successful so set LastDiscrepancy,LastDeviceFlag,search_result
			OneWireStruct->LastDiscrepancy = last_zero;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	7bba      	ldrb	r2, [r7, #14]
 8000f96:	719a      	strb	r2, [r3, #6]

			// check for last device
			if (OneWireStruct->LastDiscrepancy == 0) {
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	799b      	ldrb	r3, [r3, #6]
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d102      	bne.n	8000fa6 <OneWire_Search+0x15a>
				OneWireStruct->LastDeviceFlag = 1;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	721a      	strb	r2, [r3, #8]
			}

			search_result = 1;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	733b      	strb	r3, [r7, #12]
		}
	}

	// if no device found then reset counters so next 'search' will be like a first
	if (!search_result || !OneWireStruct->ROM_NO[0]) {
 8000faa:	7b3b      	ldrb	r3, [r7, #12]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d003      	beq.n	8000fb8 <OneWire_Search+0x16c>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7a5b      	ldrb	r3, [r3, #9]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d10a      	bne.n	8000fce <OneWire_Search+0x182>
		OneWireStruct->LastDiscrepancy = 0;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	2200      	movs	r2, #0
 8000fbc:	719a      	strb	r2, [r3, #6]
		OneWireStruct->LastDeviceFlag = 0;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	721a      	strb	r2, [r3, #8]
		OneWireStruct->LastFamilyDiscrepancy = 0;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	71da      	strb	r2, [r3, #7]
		search_result = 0;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	733b      	strb	r3, [r7, #12]
	}

	return search_result;
 8000fce:	7b3b      	ldrb	r3, [r7, #12]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3710      	adds	r7, #16
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}

08000fd8 <OneWire_SelectWithPointer>:
	for (i = 0; i < 8; i++) {
		OneWire_WriteByte(OneWireStruct, *(addr + i));
	}
}

void OneWire_SelectWithPointer(OneWire_t* OneWireStruct, uint8_t *ROM) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
 8000fe0:	6039      	str	r1, [r7, #0]
	uint8_t i;
	OneWire_WriteByte(OneWireStruct, ONEWIRE_CMD_MATCHROM);
 8000fe2:	2155      	movs	r1, #85	@ 0x55
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff fec3 	bl	8000d70 <OneWire_WriteByte>
	
	for (i = 0; i < 8; i++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	73fb      	strb	r3, [r7, #15]
 8000fee:	e00a      	b.n	8001006 <OneWire_SelectWithPointer+0x2e>
		OneWire_WriteByte(OneWireStruct, *(ROM + i));
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	683a      	ldr	r2, [r7, #0]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff feb8 	bl	8000d70 <OneWire_WriteByte>
	for (i = 0; i < 8; i++) {
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	3301      	adds	r3, #1
 8001004:	73fb      	strb	r3, [r7, #15]
 8001006:	7bfb      	ldrb	r3, [r7, #15]
 8001008:	2b07      	cmp	r3, #7
 800100a:	d9f1      	bls.n	8000ff0 <OneWire_SelectWithPointer+0x18>
	}	
}
 800100c:	bf00      	nop
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <OneWire_GetFullROM>:

void OneWire_GetFullROM(OneWire_t* OneWireStruct, uint8_t *firstIndex) {
 8001016:	b480      	push	{r7}
 8001018:	b085      	sub	sp, #20
 800101a:	af00      	add	r7, sp, #0
 800101c:	6078      	str	r0, [r7, #4]
 800101e:	6039      	str	r1, [r7, #0]
	uint8_t i;
	for (i = 0; i < 8; i++) {
 8001020:	2300      	movs	r3, #0
 8001022:	73fb      	strb	r3, [r7, #15]
 8001024:	e00a      	b.n	800103c <OneWire_GetFullROM+0x26>
		*(firstIndex + i) = OneWireStruct->ROM_NO[i];
 8001026:	7bfa      	ldrb	r2, [r7, #15]
 8001028:	7bfb      	ldrb	r3, [r7, #15]
 800102a:	6839      	ldr	r1, [r7, #0]
 800102c:	440b      	add	r3, r1
 800102e:	6879      	ldr	r1, [r7, #4]
 8001030:	440a      	add	r2, r1
 8001032:	7a52      	ldrb	r2, [r2, #9]
 8001034:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < 8; i++) {
 8001036:	7bfb      	ldrb	r3, [r7, #15]
 8001038:	3301      	adds	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	7bfb      	ldrb	r3, [r7, #15]
 800103e:	2b07      	cmp	r3, #7
 8001040:	d9f1      	bls.n	8001026 <OneWire_GetFullROM+0x10>
	}
}
 8001042:	bf00      	nop
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <OneWire_CRC8>:

uint8_t OneWire_CRC8(uint8_t *addr, uint8_t len) {
 800104e:	b480      	push	{r7}
 8001050:	b085      	sub	sp, #20
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	460b      	mov	r3, r1
 8001058:	70fb      	strb	r3, [r7, #3]
	uint8_t crc = 0, inbyte, i, mix;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]
	
	while (len--) {
 800105e:	e022      	b.n	80010a6 <OneWire_CRC8+0x58>
		inbyte = *addr++;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	1c5a      	adds	r2, r3, #1
 8001064:	607a      	str	r2, [r7, #4]
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800106a:	2308      	movs	r3, #8
 800106c:	737b      	strb	r3, [r7, #13]
 800106e:	e017      	b.n	80010a0 <OneWire_CRC8+0x52>
			mix = (crc ^ inbyte) & 0x01;
 8001070:	7bfa      	ldrb	r2, [r7, #15]
 8001072:	7bbb      	ldrb	r3, [r7, #14]
 8001074:	4053      	eors	r3, r2
 8001076:	b2db      	uxtb	r3, r3
 8001078:	f003 0301 	and.w	r3, r3, #1
 800107c:	733b      	strb	r3, [r7, #12]
			crc >>= 1;
 800107e:	7bfb      	ldrb	r3, [r7, #15]
 8001080:	085b      	lsrs	r3, r3, #1
 8001082:	73fb      	strb	r3, [r7, #15]
			if (mix) {
 8001084:	7b3b      	ldrb	r3, [r7, #12]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d004      	beq.n	8001094 <OneWire_CRC8+0x46>
				crc ^= 0x8C;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	f083 0373 	eor.w	r3, r3, #115	@ 0x73
 8001090:	43db      	mvns	r3, r3
 8001092:	73fb      	strb	r3, [r7, #15]
			}
			inbyte >>= 1;
 8001094:	7bbb      	ldrb	r3, [r7, #14]
 8001096:	085b      	lsrs	r3, r3, #1
 8001098:	73bb      	strb	r3, [r7, #14]
		for (i = 8; i; i--) {
 800109a:	7b7b      	ldrb	r3, [r7, #13]
 800109c:	3b01      	subs	r3, #1
 800109e:	737b      	strb	r3, [r7, #13]
 80010a0:	7b7b      	ldrb	r3, [r7, #13]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1e4      	bne.n	8001070 <OneWire_CRC8+0x22>
	while (len--) {
 80010a6:	78fb      	ldrb	r3, [r7, #3]
 80010a8:	1e5a      	subs	r2, r3, #1
 80010aa:	70fa      	strb	r2, [r7, #3]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d1d7      	bne.n	8001060 <OneWire_CRC8+0x12>
		}
	}
	
	/* Return calculated CRC */
	return crc;
 80010b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	3714      	adds	r7, #20
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bc80      	pop	{r7}
 80010ba:	4770      	bx	lr

080010bc <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80010c2:	f000 fa1d 	bl	8001500 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&HANDLER_I2C, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80010c6:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80010ca:	2201      	movs	r2, #1
 80010cc:	2178      	movs	r1, #120	@ 0x78
 80010ce:	485b      	ldr	r0, [pc, #364]	@ (800123c <SSD1306_Init+0x180>)
 80010d0:	f001 ff5c 	bl	8002f8c <HAL_I2C_IsDeviceReady>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	e0a9      	b.n	8001232 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80010de:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 80010e2:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010e4:	e002      	b.n	80010ec <SSD1306_Init+0x30>
		p--;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	3b01      	subs	r3, #1
 80010ea:	607b      	str	r3, [r7, #4]
	while(p>0)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d1f9      	bne.n	80010e6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80010f2:	22ae      	movs	r2, #174	@ 0xae
 80010f4:	2100      	movs	r1, #0
 80010f6:	2078      	movs	r0, #120	@ 0x78
 80010f8:	f000 fa7c 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80010fc:	2220      	movs	r2, #32
 80010fe:	2100      	movs	r1, #0
 8001100:	2078      	movs	r0, #120	@ 0x78
 8001102:	f000 fa77 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001106:	2210      	movs	r2, #16
 8001108:	2100      	movs	r1, #0
 800110a:	2078      	movs	r0, #120	@ 0x78
 800110c:	f000 fa72 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001110:	22b0      	movs	r2, #176	@ 0xb0
 8001112:	2100      	movs	r1, #0
 8001114:	2078      	movs	r0, #120	@ 0x78
 8001116:	f000 fa6d 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800111a:	22c8      	movs	r2, #200	@ 0xc8
 800111c:	2100      	movs	r1, #0
 800111e:	2078      	movs	r0, #120	@ 0x78
 8001120:	f000 fa68 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001124:	2200      	movs	r2, #0
 8001126:	2100      	movs	r1, #0
 8001128:	2078      	movs	r0, #120	@ 0x78
 800112a:	f000 fa63 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800112e:	2210      	movs	r2, #16
 8001130:	2100      	movs	r1, #0
 8001132:	2078      	movs	r0, #120	@ 0x78
 8001134:	f000 fa5e 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001138:	2240      	movs	r2, #64	@ 0x40
 800113a:	2100      	movs	r1, #0
 800113c:	2078      	movs	r0, #120	@ 0x78
 800113e:	f000 fa59 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001142:	2281      	movs	r2, #129	@ 0x81
 8001144:	2100      	movs	r1, #0
 8001146:	2078      	movs	r0, #120	@ 0x78
 8001148:	f000 fa54 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800114c:	22ff      	movs	r2, #255	@ 0xff
 800114e:	2100      	movs	r1, #0
 8001150:	2078      	movs	r0, #120	@ 0x78
 8001152:	f000 fa4f 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001156:	22a1      	movs	r2, #161	@ 0xa1
 8001158:	2100      	movs	r1, #0
 800115a:	2078      	movs	r0, #120	@ 0x78
 800115c:	f000 fa4a 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001160:	22a6      	movs	r2, #166	@ 0xa6
 8001162:	2100      	movs	r1, #0
 8001164:	2078      	movs	r0, #120	@ 0x78
 8001166:	f000 fa45 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800116a:	22a8      	movs	r2, #168	@ 0xa8
 800116c:	2100      	movs	r1, #0
 800116e:	2078      	movs	r0, #120	@ 0x78
 8001170:	f000 fa40 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001174:	223f      	movs	r2, #63	@ 0x3f
 8001176:	2100      	movs	r1, #0
 8001178:	2078      	movs	r0, #120	@ 0x78
 800117a:	f000 fa3b 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800117e:	22a4      	movs	r2, #164	@ 0xa4
 8001180:	2100      	movs	r1, #0
 8001182:	2078      	movs	r0, #120	@ 0x78
 8001184:	f000 fa36 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001188:	22d3      	movs	r2, #211	@ 0xd3
 800118a:	2100      	movs	r1, #0
 800118c:	2078      	movs	r0, #120	@ 0x78
 800118e:	f000 fa31 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001192:	2200      	movs	r2, #0
 8001194:	2100      	movs	r1, #0
 8001196:	2078      	movs	r0, #120	@ 0x78
 8001198:	f000 fa2c 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800119c:	22d5      	movs	r2, #213	@ 0xd5
 800119e:	2100      	movs	r1, #0
 80011a0:	2078      	movs	r0, #120	@ 0x78
 80011a2:	f000 fa27 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80011a6:	22f0      	movs	r2, #240	@ 0xf0
 80011a8:	2100      	movs	r1, #0
 80011aa:	2078      	movs	r0, #120	@ 0x78
 80011ac:	f000 fa22 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80011b0:	22d9      	movs	r2, #217	@ 0xd9
 80011b2:	2100      	movs	r1, #0
 80011b4:	2078      	movs	r0, #120	@ 0x78
 80011b6:	f000 fa1d 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80011ba:	2222      	movs	r2, #34	@ 0x22
 80011bc:	2100      	movs	r1, #0
 80011be:	2078      	movs	r0, #120	@ 0x78
 80011c0:	f000 fa18 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80011c4:	22da      	movs	r2, #218	@ 0xda
 80011c6:	2100      	movs	r1, #0
 80011c8:	2078      	movs	r0, #120	@ 0x78
 80011ca:	f000 fa13 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80011ce:	2212      	movs	r2, #18
 80011d0:	2100      	movs	r1, #0
 80011d2:	2078      	movs	r0, #120	@ 0x78
 80011d4:	f000 fa0e 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80011d8:	22db      	movs	r2, #219	@ 0xdb
 80011da:	2100      	movs	r1, #0
 80011dc:	2078      	movs	r0, #120	@ 0x78
 80011de:	f000 fa09 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80011e2:	2220      	movs	r2, #32
 80011e4:	2100      	movs	r1, #0
 80011e6:	2078      	movs	r0, #120	@ 0x78
 80011e8:	f000 fa04 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80011ec:	228d      	movs	r2, #141	@ 0x8d
 80011ee:	2100      	movs	r1, #0
 80011f0:	2078      	movs	r0, #120	@ 0x78
 80011f2:	f000 f9ff 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80011f6:	2214      	movs	r2, #20
 80011f8:	2100      	movs	r1, #0
 80011fa:	2078      	movs	r0, #120	@ 0x78
 80011fc:	f000 f9fa 	bl	80015f4 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001200:	22af      	movs	r2, #175	@ 0xaf
 8001202:	2100      	movs	r1, #0
 8001204:	2078      	movs	r0, #120	@ 0x78
 8001206:	f000 f9f5 	bl	80015f4 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800120a:	222e      	movs	r2, #46	@ 0x2e
 800120c:	2100      	movs	r1, #0
 800120e:	2078      	movs	r0, #120	@ 0x78
 8001210:	f000 f9f0 	bl	80015f4 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001214:	2000      	movs	r0, #0
 8001216:	f000 f843 	bl	80012a0 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800121a:	f000 f813 	bl	8001244 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800121e:	4b08      	ldr	r3, [pc, #32]	@ (8001240 <SSD1306_Init+0x184>)
 8001220:	2200      	movs	r2, #0
 8001222:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001224:	4b06      	ldr	r3, [pc, #24]	@ (8001240 <SSD1306_Init+0x184>)
 8001226:	2200      	movs	r2, #0
 8001228:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800122a:	4b05      	ldr	r3, [pc, #20]	@ (8001240 <SSD1306_Init+0x184>)
 800122c:	2201      	movs	r2, #1
 800122e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001230:	2301      	movs	r3, #1
}
 8001232:	4618      	mov	r0, r3
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200004ec 	.word	0x200004ec
 8001240:	200004c0 	.word	0x200004c0

08001244 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800124a:	2300      	movs	r3, #0
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	e01d      	b.n	800128c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001250:	79fb      	ldrb	r3, [r7, #7]
 8001252:	3b50      	subs	r3, #80	@ 0x50
 8001254:	b2db      	uxtb	r3, r3
 8001256:	461a      	mov	r2, r3
 8001258:	2100      	movs	r1, #0
 800125a:	2078      	movs	r0, #120	@ 0x78
 800125c:	f000 f9ca 	bl	80015f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	2078      	movs	r0, #120	@ 0x78
 8001266:	f000 f9c5 	bl	80015f4 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800126a:	2210      	movs	r2, #16
 800126c:	2100      	movs	r1, #0
 800126e:	2078      	movs	r0, #120	@ 0x78
 8001270:	f000 f9c0 	bl	80015f4 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001274:	79fb      	ldrb	r3, [r7, #7]
 8001276:	01db      	lsls	r3, r3, #7
 8001278:	4a08      	ldr	r2, [pc, #32]	@ (800129c <SSD1306_UpdateScreen+0x58>)
 800127a:	441a      	add	r2, r3
 800127c:	2380      	movs	r3, #128	@ 0x80
 800127e:	2140      	movs	r1, #64	@ 0x40
 8001280:	2078      	movs	r0, #120	@ 0x78
 8001282:	f000 f951 	bl	8001528 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	3301      	adds	r3, #1
 800128a:	71fb      	strb	r3, [r7, #7]
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	2b07      	cmp	r3, #7
 8001290:	d9de      	bls.n	8001250 <SSD1306_UpdateScreen+0xc>
	}
}
 8001292:	bf00      	nop
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	200000c0 	.word	0x200000c0

080012a0 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d101      	bne.n	80012b4 <SSD1306_Fill+0x14>
 80012b0:	2300      	movs	r3, #0
 80012b2:	e000      	b.n	80012b6 <SSD1306_Fill+0x16>
 80012b4:	23ff      	movs	r3, #255	@ 0xff
 80012b6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012ba:	4619      	mov	r1, r3
 80012bc:	4803      	ldr	r0, [pc, #12]	@ (80012cc <SSD1306_Fill+0x2c>)
 80012be:	f003 fdca 	bl	8004e56 <memset>
}
 80012c2:	bf00      	nop
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200000c0 	.word	0x200000c0

080012d0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	80fb      	strh	r3, [r7, #6]
 80012da:	460b      	mov	r3, r1
 80012dc:	80bb      	strh	r3, [r7, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	70fb      	strb	r3, [r7, #3]
	if (
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80012e6:	d848      	bhi.n	800137a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80012e8:	88bb      	ldrh	r3, [r7, #4]
 80012ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80012ec:	d845      	bhi.n	800137a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80012ee:	4b25      	ldr	r3, [pc, #148]	@ (8001384 <SSD1306_DrawPixel+0xb4>)
 80012f0:	791b      	ldrb	r3, [r3, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80012f6:	78fb      	ldrb	r3, [r7, #3]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf0c      	ite	eq
 80012fc:	2301      	moveq	r3, #1
 80012fe:	2300      	movne	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001304:	78fb      	ldrb	r3, [r7, #3]
 8001306:	2b01      	cmp	r3, #1
 8001308:	d11a      	bne.n	8001340 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800130a:	88fa      	ldrh	r2, [r7, #6]
 800130c:	88bb      	ldrh	r3, [r7, #4]
 800130e:	08db      	lsrs	r3, r3, #3
 8001310:	b298      	uxth	r0, r3
 8001312:	4603      	mov	r3, r0
 8001314:	01db      	lsls	r3, r3, #7
 8001316:	4413      	add	r3, r2
 8001318:	4a1b      	ldr	r2, [pc, #108]	@ (8001388 <SSD1306_DrawPixel+0xb8>)
 800131a:	5cd3      	ldrb	r3, [r2, r3]
 800131c:	b25a      	sxtb	r2, r3
 800131e:	88bb      	ldrh	r3, [r7, #4]
 8001320:	f003 0307 	and.w	r3, r3, #7
 8001324:	2101      	movs	r1, #1
 8001326:	fa01 f303 	lsl.w	r3, r1, r3
 800132a:	b25b      	sxtb	r3, r3
 800132c:	4313      	orrs	r3, r2
 800132e:	b259      	sxtb	r1, r3
 8001330:	88fa      	ldrh	r2, [r7, #6]
 8001332:	4603      	mov	r3, r0
 8001334:	01db      	lsls	r3, r3, #7
 8001336:	4413      	add	r3, r2
 8001338:	b2c9      	uxtb	r1, r1
 800133a:	4a13      	ldr	r2, [pc, #76]	@ (8001388 <SSD1306_DrawPixel+0xb8>)
 800133c:	54d1      	strb	r1, [r2, r3]
 800133e:	e01d      	b.n	800137c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001340:	88fa      	ldrh	r2, [r7, #6]
 8001342:	88bb      	ldrh	r3, [r7, #4]
 8001344:	08db      	lsrs	r3, r3, #3
 8001346:	b298      	uxth	r0, r3
 8001348:	4603      	mov	r3, r0
 800134a:	01db      	lsls	r3, r3, #7
 800134c:	4413      	add	r3, r2
 800134e:	4a0e      	ldr	r2, [pc, #56]	@ (8001388 <SSD1306_DrawPixel+0xb8>)
 8001350:	5cd3      	ldrb	r3, [r2, r3]
 8001352:	b25a      	sxtb	r2, r3
 8001354:	88bb      	ldrh	r3, [r7, #4]
 8001356:	f003 0307 	and.w	r3, r3, #7
 800135a:	2101      	movs	r1, #1
 800135c:	fa01 f303 	lsl.w	r3, r1, r3
 8001360:	b25b      	sxtb	r3, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	b25b      	sxtb	r3, r3
 8001366:	4013      	ands	r3, r2
 8001368:	b259      	sxtb	r1, r3
 800136a:	88fa      	ldrh	r2, [r7, #6]
 800136c:	4603      	mov	r3, r0
 800136e:	01db      	lsls	r3, r3, #7
 8001370:	4413      	add	r3, r2
 8001372:	b2c9      	uxtb	r1, r1
 8001374:	4a04      	ldr	r2, [pc, #16]	@ (8001388 <SSD1306_DrawPixel+0xb8>)
 8001376:	54d1      	strb	r1, [r2, r3]
 8001378:	e000      	b.n	800137c <SSD1306_DrawPixel+0xac>
		return;
 800137a:	bf00      	nop
	}
}
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bc80      	pop	{r7}
 8001382:	4770      	bx	lr
 8001384:	200004c0 	.word	0x200004c0
 8001388:	200000c0 	.word	0x200000c0

0800138c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	460a      	mov	r2, r1
 8001396:	80fb      	strh	r3, [r7, #6]
 8001398:	4613      	mov	r3, r2
 800139a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800139c:	4a05      	ldr	r2, [pc, #20]	@ (80013b4 <SSD1306_GotoXY+0x28>)
 800139e:	88fb      	ldrh	r3, [r7, #6]
 80013a0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80013a2:	4a04      	ldr	r2, [pc, #16]	@ (80013b4 <SSD1306_GotoXY+0x28>)
 80013a4:	88bb      	ldrh	r3, [r7, #4]
 80013a6:	8053      	strh	r3, [r2, #2]
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	200004c0 	.word	0x200004c0

080013b8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b086      	sub	sp, #24
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	6039      	str	r1, [r7, #0]
 80013c2:	71fb      	strb	r3, [r7, #7]
 80013c4:	4613      	mov	r3, r2
 80013c6:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013c8:	4b39      	ldr	r3, [pc, #228]	@ (80014b0 <SSD1306_Putc+0xf8>)
 80013ca:	881b      	ldrh	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
	if (
 80013d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80013d6:	dc07      	bgt.n	80013e8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80013d8:	4b35      	ldr	r3, [pc, #212]	@ (80014b0 <SSD1306_Putc+0xf8>)
 80013da:	885b      	ldrh	r3, [r3, #2]
 80013dc:	461a      	mov	r2, r3
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	785b      	ldrb	r3, [r3, #1]
 80013e2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80013e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80013e6:	dd01      	ble.n	80013ec <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80013e8:	2300      	movs	r3, #0
 80013ea:	e05d      	b.n	80014a8 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80013ec:	2300      	movs	r3, #0
 80013ee:	617b      	str	r3, [r7, #20]
 80013f0:	e04b      	b.n	800148a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685a      	ldr	r2, [r3, #4]
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	3b20      	subs	r3, #32
 80013fa:	6839      	ldr	r1, [r7, #0]
 80013fc:	7849      	ldrb	r1, [r1, #1]
 80013fe:	fb01 f303 	mul.w	r3, r1, r3
 8001402:	4619      	mov	r1, r3
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	440b      	add	r3, r1
 8001408:	005b      	lsls	r3, r3, #1
 800140a:	4413      	add	r3, r2
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]
 8001414:	e030      	b.n	8001478 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001416:	68fa      	ldr	r2, [r7, #12]
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001422:	2b00      	cmp	r3, #0
 8001424:	d010      	beq.n	8001448 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001426:	4b22      	ldr	r3, [pc, #136]	@ (80014b0 <SSD1306_Putc+0xf8>)
 8001428:	881a      	ldrh	r2, [r3, #0]
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	b29b      	uxth	r3, r3
 800142e:	4413      	add	r3, r2
 8001430:	b298      	uxth	r0, r3
 8001432:	4b1f      	ldr	r3, [pc, #124]	@ (80014b0 <SSD1306_Putc+0xf8>)
 8001434:	885a      	ldrh	r2, [r3, #2]
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	b29b      	uxth	r3, r3
 800143a:	4413      	add	r3, r2
 800143c:	b29b      	uxth	r3, r3
 800143e:	79ba      	ldrb	r2, [r7, #6]
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff ff45 	bl	80012d0 <SSD1306_DrawPixel>
 8001446:	e014      	b.n	8001472 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001448:	4b19      	ldr	r3, [pc, #100]	@ (80014b0 <SSD1306_Putc+0xf8>)
 800144a:	881a      	ldrh	r2, [r3, #0]
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	b29b      	uxth	r3, r3
 8001450:	4413      	add	r3, r2
 8001452:	b298      	uxth	r0, r3
 8001454:	4b16      	ldr	r3, [pc, #88]	@ (80014b0 <SSD1306_Putc+0xf8>)
 8001456:	885a      	ldrh	r2, [r3, #2]
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	b29b      	uxth	r3, r3
 800145c:	4413      	add	r3, r2
 800145e:	b299      	uxth	r1, r3
 8001460:	79bb      	ldrb	r3, [r7, #6]
 8001462:	2b00      	cmp	r3, #0
 8001464:	bf0c      	ite	eq
 8001466:	2301      	moveq	r3, #1
 8001468:	2300      	movne	r3, #0
 800146a:	b2db      	uxtb	r3, r3
 800146c:	461a      	mov	r2, r3
 800146e:	f7ff ff2f 	bl	80012d0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	3301      	adds	r3, #1
 8001476:	613b      	str	r3, [r7, #16]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	461a      	mov	r2, r3
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	4293      	cmp	r3, r2
 8001482:	d3c8      	bcc.n	8001416 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	3301      	adds	r3, #1
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	785b      	ldrb	r3, [r3, #1]
 800148e:	461a      	mov	r2, r3
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	4293      	cmp	r3, r2
 8001494:	d3ad      	bcc.n	80013f2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001496:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <SSD1306_Putc+0xf8>)
 8001498:	881b      	ldrh	r3, [r3, #0]
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	7812      	ldrb	r2, [r2, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	4b03      	ldr	r3, [pc, #12]	@ (80014b0 <SSD1306_Putc+0xf8>)
 80014a4:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3718      	adds	r7, #24
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	200004c0 	.word	0x200004c0

080014b4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b084      	sub	sp, #16
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	60f8      	str	r0, [r7, #12]
 80014bc:	60b9      	str	r1, [r7, #8]
 80014be:	4613      	mov	r3, r2
 80014c0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80014c2:	e012      	b.n	80014ea <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	79fa      	ldrb	r2, [r7, #7]
 80014ca:	68b9      	ldr	r1, [r7, #8]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff73 	bl	80013b8 <SSD1306_Putc>
 80014d2:	4603      	mov	r3, r0
 80014d4:	461a      	mov	r2, r3
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	429a      	cmp	r2, r3
 80014dc:	d002      	beq.n	80014e4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	e008      	b.n	80014f6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	3301      	adds	r3, #1
 80014e8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d1e8      	bne.n	80014c4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	781b      	ldrb	r3, [r3, #0]
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
	...

08001500 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001506:	4b07      	ldr	r3, [pc, #28]	@ (8001524 <ssd1306_I2C_Init+0x24>)
 8001508:	607b      	str	r3, [r7, #4]
	while(p>0)
 800150a:	e002      	b.n	8001512 <ssd1306_I2C_Init+0x12>
		p--;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	3b01      	subs	r3, #1
 8001510:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d1f9      	bne.n	800150c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&HANDLER_I2C);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001518:	bf00      	nop
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	bc80      	pop	{r7}
 8001522:	4770      	bx	lr
 8001524:	0003d090 	.word	0x0003d090

08001528 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001528:	b590      	push	{r4, r7, lr}
 800152a:	b0c7      	sub	sp, #284	@ 0x11c
 800152c:	af02      	add	r7, sp, #8
 800152e:	4604      	mov	r4, r0
 8001530:	4608      	mov	r0, r1
 8001532:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001536:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 800153a:	600a      	str	r2, [r1, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001542:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001546:	4622      	mov	r2, r4
 8001548:	701a      	strb	r2, [r3, #0]
 800154a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800154e:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001552:	4602      	mov	r2, r0
 8001554:	701a      	strb	r2, [r3, #0]
 8001556:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800155a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800155e:	460a      	mov	r2, r1
 8001560:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001562:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001566:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800156a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800156e:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001572:	7812      	ldrb	r2, [r2, #0]
 8001574:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001576:	2300      	movs	r3, #0
 8001578:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 800157c:	e015      	b.n	80015aa <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800157e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001582:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001586:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	441a      	add	r2, r3
 800158e:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001592:	3301      	adds	r3, #1
 8001594:	7811      	ldrb	r1, [r2, #0]
 8001596:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800159a:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800159e:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80015a0:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80015a4:	3301      	adds	r3, #1
 80015a6:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80015aa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015b4:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80015b8:	8812      	ldrh	r2, [r2, #0]
 80015ba:	429a      	cmp	r2, r3
 80015bc:	d8df      	bhi.n	800157e <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&HANDLER_I2C, address, dt, count+1, 10);
 80015be:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015c2:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	b299      	uxth	r1, r3
 80015ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015ce:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015d2:	881b      	ldrh	r3, [r3, #0]
 80015d4:	3301      	adds	r3, #1
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	f107 020c 	add.w	r2, r7, #12
 80015dc:	200a      	movs	r0, #10
 80015de:	9000      	str	r0, [sp, #0]
 80015e0:	4803      	ldr	r0, [pc, #12]	@ (80015f0 <ssd1306_I2C_WriteMulti+0xc8>)
 80015e2:	f001 fbd5 	bl	8002d90 <HAL_I2C_Master_Transmit>
}
 80015e6:	bf00      	nop
 80015e8:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd90      	pop	{r4, r7, pc}
 80015f0:	200004ec 	.word	0x200004ec

080015f4 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af02      	add	r7, sp, #8
 80015fa:	4603      	mov	r3, r0
 80015fc:	71fb      	strb	r3, [r7, #7]
 80015fe:	460b      	mov	r3, r1
 8001600:	71bb      	strb	r3, [r7, #6]
 8001602:	4613      	mov	r3, r2
 8001604:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001606:	79bb      	ldrb	r3, [r7, #6]
 8001608:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800160a:	797b      	ldrb	r3, [r7, #5]
 800160c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&HANDLER_I2C, address, dt, 2, 10);
 800160e:	79fb      	ldrb	r3, [r7, #7]
 8001610:	b299      	uxth	r1, r3
 8001612:	f107 020c 	add.w	r2, r7, #12
 8001616:	230a      	movs	r3, #10
 8001618:	9300      	str	r3, [sp, #0]
 800161a:	2302      	movs	r3, #2
 800161c:	4803      	ldr	r0, [pc, #12]	@ (800162c <ssd1306_I2C_Write+0x38>)
 800161e:	f001 fbb7 	bl	8002d90 <HAL_I2C_Master_Transmit>
}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	200004ec 	.word	0x200004ec

08001630 <check_start_sw>:

int set_temp = 27;
int start_sw = 0;

uint8_t check_start_sw()
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
	if (HAL_GPIO_ReadPin(PB1_START_SW_PIN_GPIO_Port, PB1_START_SW_PIN_Pin))
 8001634:	2102      	movs	r1, #2
 8001636:	480e      	ldr	r0, [pc, #56]	@ (8001670 <check_start_sw+0x40>)
 8001638:	f001 fa14 	bl	8002a64 <HAL_GPIO_ReadPin>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00a      	beq.n	8001658 <check_start_sw+0x28>
	{
		if (start_sw == t_ON)
 8001642:	4b0c      	ldr	r3, [pc, #48]	@ (8001674 <check_start_sw+0x44>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d104      	bne.n	8001654 <check_start_sw+0x24>
		{
			OLED_stop_render();
 800164a:	f000 fc67 	bl	8001f1c <OLED_stop_render>
			start_sw = t_OFF;
 800164e:	4b09      	ldr	r3, [pc, #36]	@ (8001674 <check_start_sw+0x44>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]
		}
		return (t_OFF);
 8001654:	2300      	movs	r3, #0
 8001656:	e009      	b.n	800166c <check_start_sw+0x3c>
	}
	else
	{
		if (start_sw == t_OFF)
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <check_start_sw+0x44>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d104      	bne.n	800166a <check_start_sw+0x3a>
		{
			OLED_on_render();
 8001660:	f000 fc78 	bl	8001f54 <OLED_on_render>
			start_sw = t_ON;
 8001664:	4b03      	ldr	r3, [pc, #12]	@ (8001674 <check_start_sw+0x44>)
 8001666:	2201      	movs	r2, #1
 8001668:	601a      	str	r2, [r3, #0]
		}
		return (t_ON);
 800166a:	2301      	movs	r3, #1
	}
}
 800166c:	4618      	mov	r0, r3
 800166e:	bd80      	pop	{r7, pc}
 8001670:	40010c00 	.word	0x40010c00
 8001674:	200004c8 	.word	0x200004c8

08001678 <init_fnd>:
#include "fnd_controller.h"

uint8_t _LED_0F[29] = {0};

void init_fnd()
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
	_LED_0F[0] = 0xC0; //0
 800167c:	4b2d      	ldr	r3, [pc, #180]	@ (8001734 <init_fnd+0xbc>)
 800167e:	22c0      	movs	r2, #192	@ 0xc0
 8001680:	701a      	strb	r2, [r3, #0]
	  _LED_0F[1] = 0xF9; //1
 8001682:	4b2c      	ldr	r3, [pc, #176]	@ (8001734 <init_fnd+0xbc>)
 8001684:	22f9      	movs	r2, #249	@ 0xf9
 8001686:	705a      	strb	r2, [r3, #1]
	  _LED_0F[2] = 0xA4; //2
 8001688:	4b2a      	ldr	r3, [pc, #168]	@ (8001734 <init_fnd+0xbc>)
 800168a:	22a4      	movs	r2, #164	@ 0xa4
 800168c:	709a      	strb	r2, [r3, #2]
	  _LED_0F[3] = 0xB0; //3
 800168e:	4b29      	ldr	r3, [pc, #164]	@ (8001734 <init_fnd+0xbc>)
 8001690:	22b0      	movs	r2, #176	@ 0xb0
 8001692:	70da      	strb	r2, [r3, #3]
	  _LED_0F[4] = 0x99; //4
 8001694:	4b27      	ldr	r3, [pc, #156]	@ (8001734 <init_fnd+0xbc>)
 8001696:	2299      	movs	r2, #153	@ 0x99
 8001698:	711a      	strb	r2, [r3, #4]
	  _LED_0F[5] = 0x92; //5
 800169a:	4b26      	ldr	r3, [pc, #152]	@ (8001734 <init_fnd+0xbc>)
 800169c:	2292      	movs	r2, #146	@ 0x92
 800169e:	715a      	strb	r2, [r3, #5]
	  _LED_0F[6] = 0x82; //6
 80016a0:	4b24      	ldr	r3, [pc, #144]	@ (8001734 <init_fnd+0xbc>)
 80016a2:	2282      	movs	r2, #130	@ 0x82
 80016a4:	719a      	strb	r2, [r3, #6]
	  _LED_0F[7] = 0xF8; //7
 80016a6:	4b23      	ldr	r3, [pc, #140]	@ (8001734 <init_fnd+0xbc>)
 80016a8:	22f8      	movs	r2, #248	@ 0xf8
 80016aa:	71da      	strb	r2, [r3, #7]
	  _LED_0F[8] = 0x80; //8
 80016ac:	4b21      	ldr	r3, [pc, #132]	@ (8001734 <init_fnd+0xbc>)
 80016ae:	2280      	movs	r2, #128	@ 0x80
 80016b0:	721a      	strb	r2, [r3, #8]
	  _LED_0F[9] = 0x90; //9
 80016b2:	4b20      	ldr	r3, [pc, #128]	@ (8001734 <init_fnd+0xbc>)
 80016b4:	2290      	movs	r2, #144	@ 0x90
 80016b6:	725a      	strb	r2, [r3, #9]
	  _LED_0F[10] = 0x88; //A
 80016b8:	4b1e      	ldr	r3, [pc, #120]	@ (8001734 <init_fnd+0xbc>)
 80016ba:	2288      	movs	r2, #136	@ 0x88
 80016bc:	729a      	strb	r2, [r3, #10]
	  _LED_0F[11] = 0x83; //b
 80016be:	4b1d      	ldr	r3, [pc, #116]	@ (8001734 <init_fnd+0xbc>)
 80016c0:	2283      	movs	r2, #131	@ 0x83
 80016c2:	72da      	strb	r2, [r3, #11]
	  _LED_0F[12] = 0xC6; //C
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <init_fnd+0xbc>)
 80016c6:	22c6      	movs	r2, #198	@ 0xc6
 80016c8:	731a      	strb	r2, [r3, #12]
	  _LED_0F[13] = 0xA1; //d
 80016ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <init_fnd+0xbc>)
 80016cc:	22a1      	movs	r2, #161	@ 0xa1
 80016ce:	735a      	strb	r2, [r3, #13]
	  _LED_0F[14] = 0x86; //E
 80016d0:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <init_fnd+0xbc>)
 80016d2:	2286      	movs	r2, #134	@ 0x86
 80016d4:	739a      	strb	r2, [r3, #14]
	  _LED_0F[15] = 0x8E; //F
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <init_fnd+0xbc>)
 80016d8:	228e      	movs	r2, #142	@ 0x8e
 80016da:	73da      	strb	r2, [r3, #15]
	  _LED_0F[16] = 0xC2; //G
 80016dc:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <init_fnd+0xbc>)
 80016de:	22c2      	movs	r2, #194	@ 0xc2
 80016e0:	741a      	strb	r2, [r3, #16]
	  _LED_0F[17] = 0x89; //H
 80016e2:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <init_fnd+0xbc>)
 80016e4:	2289      	movs	r2, #137	@ 0x89
 80016e6:	745a      	strb	r2, [r3, #17]
	  _LED_0F[18] = 0xF9; //I
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <init_fnd+0xbc>)
 80016ea:	22f9      	movs	r2, #249	@ 0xf9
 80016ec:	749a      	strb	r2, [r3, #18]
	  _LED_0F[19] = 0xF1; //J
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <init_fnd+0xbc>)
 80016f0:	22f1      	movs	r2, #241	@ 0xf1
 80016f2:	74da      	strb	r2, [r3, #19]
	  _LED_0F[20] = 0xC3; //L
 80016f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <init_fnd+0xbc>)
 80016f6:	22c3      	movs	r2, #195	@ 0xc3
 80016f8:	751a      	strb	r2, [r3, #20]
	  _LED_0F[21] = 0xA9; //n
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <init_fnd+0xbc>)
 80016fc:	22a9      	movs	r2, #169	@ 0xa9
 80016fe:	755a      	strb	r2, [r3, #21]
	  _LED_0F[22] = 0xC0; //O
 8001700:	4b0c      	ldr	r3, [pc, #48]	@ (8001734 <init_fnd+0xbc>)
 8001702:	22c0      	movs	r2, #192	@ 0xc0
 8001704:	759a      	strb	r2, [r3, #22]
	  _LED_0F[23] = 0x8C; //P
 8001706:	4b0b      	ldr	r3, [pc, #44]	@ (8001734 <init_fnd+0xbc>)
 8001708:	228c      	movs	r2, #140	@ 0x8c
 800170a:	75da      	strb	r2, [r3, #23]
	  _LED_0F[24] = 0x98; //q
 800170c:	4b09      	ldr	r3, [pc, #36]	@ (8001734 <init_fnd+0xbc>)
 800170e:	2298      	movs	r2, #152	@ 0x98
 8001710:	761a      	strb	r2, [r3, #24]
	  _LED_0F[25] = 0x92; //S
 8001712:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <init_fnd+0xbc>)
 8001714:	2292      	movs	r2, #146	@ 0x92
 8001716:	765a      	strb	r2, [r3, #25]
	  _LED_0F[26] = 0xC1; //U
 8001718:	4b06      	ldr	r3, [pc, #24]	@ (8001734 <init_fnd+0xbc>)
 800171a:	22c1      	movs	r2, #193	@ 0xc1
 800171c:	769a      	strb	r2, [r3, #26]
	  _LED_0F[27] = 0x91; //Y
 800171e:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <init_fnd+0xbc>)
 8001720:	2291      	movs	r2, #145	@ 0x91
 8001722:	76da      	strb	r2, [r3, #27]
	  _LED_0F[28] = 0xFE; //hight -
 8001724:	4b03      	ldr	r3, [pc, #12]	@ (8001734 <init_fnd+0xbc>)
 8001726:	22fe      	movs	r2, #254	@ 0xfe
 8001728:	771a      	strb	r2, [r3, #28]
}
 800172a:	bf00      	nop
 800172c:	46bd      	mov	sp, r7
 800172e:	bc80      	pop	{r7}
 8001730:	4770      	bx	lr
 8001732:	bf00      	nop
 8001734:	200004cc 	.word	0x200004cc

08001738 <send_port>:


// send data and clock SPI communication.////
// SPI_send function. (X = data)
void send_port(uint8_t X, uint8_t port)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	460a      	mov	r2, r1
 8001742:	71fb      	strb	r3, [r7, #7]
 8001744:	4613      	mov	r3, r2
 8001746:	71bb      	strb	r3, [r7, #6]
	//data and clock
	send(X);
 8001748:	79fb      	ldrb	r3, [r7, #7]
 800174a:	4618      	mov	r0, r3
 800174c:	f000 f816 	bl	800177c <send>
	//send port and clock
	send(port);
 8001750:	79bb      	ldrb	r3, [r7, #6]
 8001752:	4618      	mov	r0, r3
 8001754:	f000 f812 	bl	800177c <send>
	//send RCLK
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, LOW);
 8001758:	2200      	movs	r2, #0
 800175a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800175e:	4806      	ldr	r0, [pc, #24]	@ (8001778 <send_port+0x40>)
 8001760:	f001 f997 	bl	8002a92 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(FND_RCLK_GPIO_Port, FND_RCLK_Pin, HIGH);
 8001764:	2201      	movs	r2, #1
 8001766:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800176a:	4803      	ldr	r0, [pc, #12]	@ (8001778 <send_port+0x40>)
 800176c:	f001 f991 	bl	8002a92 <HAL_GPIO_WritePin>
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	40010c00 	.word	0x40010c00

0800177c <send>:
//////////////////////////////////////////////

void send(uint8_t X)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b084      	sub	sp, #16
 8001780:	af00      	add	r7, sp, #0
 8001782:	4603      	mov	r3, r0
 8001784:	71fb      	strb	r3, [r7, #7]
  for (int i = 8; i >= 1; i--)
 8001786:	2308      	movs	r3, #8
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e022      	b.n	80017d2 <send+0x56>
  {
    if (X & 0x80)
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	da06      	bge.n	80017a2 <send+0x26>
    {
    	HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, HIGH);
 8001794:	2201      	movs	r2, #1
 8001796:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800179a:	4812      	ldr	r0, [pc, #72]	@ (80017e4 <send+0x68>)
 800179c:	f001 f979 	bl	8002a92 <HAL_GPIO_WritePin>
 80017a0:	e005      	b.n	80017ae <send+0x32>
    }
    else
    {
    	HAL_GPIO_WritePin(FND_DIO_GPIO_Port, FND_DIO_Pin, LOW);
 80017a2:	2200      	movs	r2, #0
 80017a4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017a8:	480e      	ldr	r0, [pc, #56]	@ (80017e4 <send+0x68>)
 80017aa:	f001 f972 	bl	8002a92 <HAL_GPIO_WritePin>
    }
    X <<= 1;
 80017ae:	79fb      	ldrb	r3, [r7, #7]
 80017b0:	005b      	lsls	r3, r3, #1
 80017b2:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, LOW);
 80017b4:	2200      	movs	r2, #0
 80017b6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017ba:	480a      	ldr	r0, [pc, #40]	@ (80017e4 <send+0x68>)
 80017bc:	f001 f969 	bl	8002a92 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(FND_SCLK_GPIO_Port, FND_SCLK_Pin, HIGH);
 80017c0:	2201      	movs	r2, #1
 80017c2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80017c6:	4807      	ldr	r0, [pc, #28]	@ (80017e4 <send+0x68>)
 80017c8:	f001 f963 	bl	8002a92 <HAL_GPIO_WritePin>
  for (int i = 8; i >= 1; i--)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	dcd9      	bgt.n	800178c <send+0x10>
  }
}
 80017d8:	bf00      	nop
 80017da:	bf00      	nop
 80017dc:	3710      	adds	r7, #16
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	40010c00 	.word	0x40010c00

080017e8 <digit4_temper>:

void digit4_temper(int n)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b086      	sub	sp, #24
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  int n1, n2, n3, n4;
  n1 = (int)  n % 10;
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4b3f      	ldr	r3, [pc, #252]	@ (80018f0 <digit4_temper+0x108>)
 80017f4:	fb83 1302 	smull	r1, r3, r3, r2
 80017f8:	1099      	asrs	r1, r3, #2
 80017fa:	17d3      	asrs	r3, r2, #31
 80017fc:	1ac9      	subs	r1, r1, r3
 80017fe:	460b      	mov	r3, r1
 8001800:	009b      	lsls	r3, r3, #2
 8001802:	440b      	add	r3, r1
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	617b      	str	r3, [r7, #20]
  n2 = (int) ((n % 100)-n1)/10;
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	4b39      	ldr	r3, [pc, #228]	@ (80018f4 <digit4_temper+0x10c>)
 800180e:	fb83 1302 	smull	r1, r3, r3, r2
 8001812:	1159      	asrs	r1, r3, #5
 8001814:	17d3      	asrs	r3, r2, #31
 8001816:	1acb      	subs	r3, r1, r3
 8001818:	2164      	movs	r1, #100	@ 0x64
 800181a:	fb01 f303 	mul.w	r3, r1, r3
 800181e:	1ad3      	subs	r3, r2, r3
 8001820:	697a      	ldr	r2, [r7, #20]
 8001822:	1a9b      	subs	r3, r3, r2
 8001824:	4a32      	ldr	r2, [pc, #200]	@ (80018f0 <digit4_temper+0x108>)
 8001826:	fb82 1203 	smull	r1, r2, r2, r3
 800182a:	1092      	asrs	r2, r2, #2
 800182c:	17db      	asrs	r3, r3, #31
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	613b      	str	r3, [r7, #16]
  n3 = (int) ((n % 1000) - n2 - n1) / 100;
 8001832:	687a      	ldr	r2, [r7, #4]
 8001834:	4b30      	ldr	r3, [pc, #192]	@ (80018f8 <digit4_temper+0x110>)
 8001836:	fb83 1302 	smull	r1, r3, r3, r2
 800183a:	1199      	asrs	r1, r3, #6
 800183c:	17d3      	asrs	r3, r2, #31
 800183e:	1acb      	subs	r3, r1, r3
 8001840:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001844:	fb01 f303 	mul.w	r3, r1, r3
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	1a9a      	subs	r2, r3, r2
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	4a28      	ldr	r2, [pc, #160]	@ (80018f4 <digit4_temper+0x10c>)
 8001854:	fb82 1203 	smull	r1, r2, r2, r3
 8001858:	1152      	asrs	r2, r2, #5
 800185a:	17db      	asrs	r3, r3, #31
 800185c:	1ad3      	subs	r3, r2, r3
 800185e:	60fb      	str	r3, [r7, #12]
  n4 = (int) ((n % 10000) - n3 - n2 - n1) / 1000;
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	4b26      	ldr	r3, [pc, #152]	@ (80018fc <digit4_temper+0x114>)
 8001864:	fb83 1302 	smull	r1, r3, r3, r2
 8001868:	1319      	asrs	r1, r3, #12
 800186a:	17d3      	asrs	r3, r2, #31
 800186c:	1acb      	subs	r3, r1, r3
 800186e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8001872:	fb01 f303 	mul.w	r3, r1, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	68fa      	ldr	r2, [r7, #12]
 800187a:	1a9a      	subs	r2, r3, r2
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	1ad2      	subs	r2, r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	4a1c      	ldr	r2, [pc, #112]	@ (80018f8 <digit4_temper+0x110>)
 8001886:	fb82 1203 	smull	r1, r2, r2, r3
 800188a:	1192      	asrs	r2, r2, #6
 800188c:	17db      	asrs	r3, r3, #31
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	60bb      	str	r3, [r7, #8]

  send_port(_LED_0F[n1], 0b0001);
 8001892:	4a1b      	ldr	r2, [pc, #108]	@ (8001900 <digit4_temper+0x118>)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	4413      	add	r3, r2
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2101      	movs	r1, #1
 800189c:	4618      	mov	r0, r3
 800189e:	f7ff ff4b 	bl	8001738 <send_port>
  send_port(_LED_0F[n2] & 0x7f , 0b0010);
 80018a2:	4a17      	ldr	r2, [pc, #92]	@ (8001900 <digit4_temper+0x118>)
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4413      	add	r3, r2
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2102      	movs	r1, #2
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff ff40 	bl	8001738 <send_port>
  if(n>99)send_port(_LED_0F[n3], 0b0100);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b63      	cmp	r3, #99	@ 0x63
 80018bc:	dd07      	ble.n	80018ce <digit4_temper+0xe6>
 80018be:	4a10      	ldr	r2, [pc, #64]	@ (8001900 <digit4_temper+0x118>)
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4413      	add	r3, r2
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2104      	movs	r1, #4
 80018c8:	4618      	mov	r0, r3
 80018ca:	f7ff ff35 	bl	8001738 <send_port>
  if(n>999)send_port(_LED_0F[n4], 0b1000);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018d4:	db07      	blt.n	80018e6 <digit4_temper+0xfe>
 80018d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <digit4_temper+0x118>)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	4413      	add	r3, r2
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	2108      	movs	r1, #8
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff29 	bl	8001738 <send_port>
}
 80018e6:	bf00      	nop
 80018e8:	3718      	adds	r7, #24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	66666667 	.word	0x66666667
 80018f4:	51eb851f 	.word	0x51eb851f
 80018f8:	10624dd3 	.word	0x10624dd3
 80018fc:	68db8bad 	.word	0x68db8bad
 8001900:	200004cc 	.word	0x200004cc

08001904 <FND_stop>:

void FND_stop()
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
	send_port(_LED_0F[15], 0b0001);
 8001908:	4b09      	ldr	r3, [pc, #36]	@ (8001930 <FND_stop+0x2c>)
 800190a:	7bdb      	ldrb	r3, [r3, #15]
 800190c:	2101      	movs	r1, #1
 800190e:	4618      	mov	r0, r3
 8001910:	f7ff ff12 	bl	8001738 <send_port>
	send_port(_LED_0F[15], 0b0010);
 8001914:	4b06      	ldr	r3, [pc, #24]	@ (8001930 <FND_stop+0x2c>)
 8001916:	7bdb      	ldrb	r3, [r3, #15]
 8001918:	2102      	movs	r1, #2
 800191a:	4618      	mov	r0, r3
 800191c:	f7ff ff0c 	bl	8001738 <send_port>
	send_port(_LED_0F[22], 0b0100);
 8001920:	4b03      	ldr	r3, [pc, #12]	@ (8001930 <FND_stop+0x2c>)
 8001922:	7d9b      	ldrb	r3, [r3, #22]
 8001924:	2104      	movs	r1, #4
 8001926:	4618      	mov	r0, r3
 8001928:	f7ff ff06 	bl	8001738 <send_port>
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}
 8001930:	200004cc 	.word	0x200004cc

08001934 <heater_controll>:
#include "heater_controller.h"
#include "ds18b20.h"
#include "button_controller.h"

void heater_controll()
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
	// 현재 온도
	int cur_temp = ds18b20[0].Temperature;
 800193a:	4b0d      	ldr	r3, [pc, #52]	@ (8001970 <heater_controll+0x3c>)
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fdc6 	bl	80004d0 <__aeabi_f2iz>
 8001944:	4603      	mov	r3, r0
 8001946:	607b      	str	r3, [r7, #4]

	if (set_temp > cur_temp)
 8001948:	4b0a      	ldr	r3, [pc, #40]	@ (8001974 <heater_controll+0x40>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	da05      	bge.n	800195e <heater_controll+0x2a>
		HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, 1);
 8001952:	2201      	movs	r2, #1
 8001954:	2120      	movs	r1, #32
 8001956:	4808      	ldr	r0, [pc, #32]	@ (8001978 <heater_controll+0x44>)
 8001958:	f001 f89b 	bl	8002a92 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, 0);
}
 800195c:	e004      	b.n	8001968 <heater_controll+0x34>
		HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, 0);
 800195e:	2200      	movs	r2, #0
 8001960:	2120      	movs	r1, #32
 8001962:	4805      	ldr	r0, [pc, #20]	@ (8001978 <heater_controll+0x44>)
 8001964:	f001 f895 	bl	8002a92 <HAL_GPIO_WritePin>
}
 8001968:	bf00      	nop
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	20000098 	.word	0x20000098
 8001974:	20000010 	.word	0x20000010
 8001978:	40010c00 	.word	0x40010c00

0800197c <heater_force_off>:

void heater_force_off()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2120      	movs	r1, #32
 8001984:	4802      	ldr	r0, [pc, #8]	@ (8001990 <heater_force_off+0x14>)
 8001986:	f001 f884 	bl	8002a92 <HAL_GPIO_WritePin>
}
 800198a:	bf00      	nop
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40010c00 	.word	0x40010c00

08001994 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001998:	f000 fd4c 	bl	8002434 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800199c:	f000 f824 	bl	80019e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019a0:	f000 f958 	bl	8001c54 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80019a4:	f000 f92c 	bl	8001c00 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 80019a8:	f000 f892 	bl	8001ad0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80019ac:	f000 f8dc 	bl	8001b68 <MX_TIM3_Init>
  MX_I2C2_Init();
 80019b0:	f000 f860 	bl	8001a74 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init(); // OLED init
 80019b4:	f7ff fb82 	bl	80010bc <SSD1306_Init>
  Ds18b20_Init(); // temp sensor init
 80019b8:	f7fe fdb0 	bl	800051c <Ds18b20_Init>
  init_fnd(); // FND init
 80019bc:	f7ff fe5c 	bl	8001678 <init_fnd>
  HAL_TIM_Base_Start_IT(&htim3); // FND controll !
 80019c0:	4808      	ldr	r0, [pc, #32]	@ (80019e4 <main+0x50>)
 80019c2:	f002 fb15 	bl	8003ff0 <HAL_TIM_Base_Start_IT>

  OLED_defult_render();
 80019c6:	f000 fa53 	bl	8001e70 <OLED_defult_render>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {

		if (check_start_sw() == t_ON)
 80019ca:	f7ff fe31 	bl	8001630 <check_start_sw>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d104      	bne.n	80019de <main+0x4a>
		{
			Ds18b20_ManualConvert(); // 온도 센서값 convert
 80019d4:	f7fe fe22 	bl	800061c <Ds18b20_ManualConvert>
			heater_controll(); // set temp에 따른 relay 제어
 80019d8:	f7ff ffac 	bl	8001934 <heater_controll>
 80019dc:	e7f5      	b.n	80019ca <main+0x36>
		}
		else
			heater_force_off();
 80019de:	f7ff ffcd 	bl	800197c <heater_force_off>
		if (check_start_sw() == t_ON)
 80019e2:	e7f2      	b.n	80019ca <main+0x36>
 80019e4:	20000588 	.word	0x20000588

080019e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b090      	sub	sp, #64	@ 0x40
 80019ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ee:	f107 0318 	add.w	r3, r7, #24
 80019f2:	2228      	movs	r2, #40	@ 0x28
 80019f4:	2100      	movs	r1, #0
 80019f6:	4618      	mov	r0, r3
 80019f8:	f003 fa2d 	bl	8004e56 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019fc:	1d3b      	adds	r3, r7, #4
 80019fe:	2200      	movs	r2, #0
 8001a00:	601a      	str	r2, [r3, #0]
 8001a02:	605a      	str	r2, [r3, #4]
 8001a04:	609a      	str	r2, [r3, #8]
 8001a06:	60da      	str	r2, [r3, #12]
 8001a08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a18:	2301      	movs	r3, #1
 8001a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001a24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001a26:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8001a2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a2c:	f107 0318 	add.w	r3, r7, #24
 8001a30:	4618      	mov	r0, r3
 8001a32:	f001 fe33 	bl	800369c <HAL_RCC_OscConfig>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001a3c:	f000 f9c8 	bl	8001dd0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a40:	230f      	movs	r3, #15
 8001a42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a44:	2302      	movs	r3, #2
 8001a46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a52:	2300      	movs	r3, #0
 8001a54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a56:	1d3b      	adds	r3, r7, #4
 8001a58:	2102      	movs	r1, #2
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f002 f8a0 	bl	8003ba0 <HAL_RCC_ClockConfig>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001a66:	f000 f9b3 	bl	8001dd0 <Error_Handler>
  }
}
 8001a6a:	bf00      	nop
 8001a6c:	3740      	adds	r7, #64	@ 0x40
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
	...

08001a74 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a78:	4b12      	ldr	r3, [pc, #72]	@ (8001ac4 <MX_I2C2_Init+0x50>)
 8001a7a:	4a13      	ldr	r2, [pc, #76]	@ (8001ac8 <MX_I2C2_Init+0x54>)
 8001a7c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8001a7e:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <MX_I2C2_Init+0x50>)
 8001a80:	4a12      	ldr	r2, [pc, #72]	@ (8001acc <MX_I2C2_Init+0x58>)
 8001a82:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a84:	4b0f      	ldr	r3, [pc, #60]	@ (8001ac4 <MX_I2C2_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <MX_I2C2_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a90:	4b0c      	ldr	r3, [pc, #48]	@ (8001ac4 <MX_I2C2_Init+0x50>)
 8001a92:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a96:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a98:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac4 <MX_I2C2_Init+0x50>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a9e:	4b09      	ldr	r3, [pc, #36]	@ (8001ac4 <MX_I2C2_Init+0x50>)
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001aa4:	4b07      	ldr	r3, [pc, #28]	@ (8001ac4 <MX_I2C2_Init+0x50>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001aaa:	4b06      	ldr	r3, [pc, #24]	@ (8001ac4 <MX_I2C2_Init+0x50>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001ab0:	4804      	ldr	r0, [pc, #16]	@ (8001ac4 <MX_I2C2_Init+0x50>)
 8001ab2:	f001 f829 	bl	8002b08 <HAL_I2C_Init>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001abc:	f000 f988 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ac0:	bf00      	nop
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	200004ec 	.word	0x200004ec
 8001ac8:	40005800 	.word	0x40005800
 8001acc:	00061a80 	.word	0x00061a80

08001ad0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ad6:	f107 0308 	add.w	r3, r7, #8
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]
 8001ae2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ae4:	463b      	mov	r3, r7
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]
 8001aea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001aec:	4b1d      	ldr	r3, [pc, #116]	@ (8001b64 <MX_TIM2_Init+0x94>)
 8001aee:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001af2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = (72-1);
 8001af4:	4b1b      	ldr	r3, [pc, #108]	@ (8001b64 <MX_TIM2_Init+0x94>)
 8001af6:	2247      	movs	r2, #71	@ 0x47
 8001af8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001afa:	4b1a      	ldr	r3, [pc, #104]	@ (8001b64 <MX_TIM2_Init+0x94>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff;
 8001b00:	4b18      	ldr	r3, [pc, #96]	@ (8001b64 <MX_TIM2_Init+0x94>)
 8001b02:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b06:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b08:	4b16      	ldr	r3, [pc, #88]	@ (8001b64 <MX_TIM2_Init+0x94>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0e:	4b15      	ldr	r3, [pc, #84]	@ (8001b64 <MX_TIM2_Init+0x94>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b14:	4813      	ldr	r0, [pc, #76]	@ (8001b64 <MX_TIM2_Init+0x94>)
 8001b16:	f002 f9d1 	bl	8003ebc <HAL_TIM_Base_Init>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b20:	f000 f956 	bl	8001dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b24:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b28:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b2a:	f107 0308 	add.w	r3, r7, #8
 8001b2e:	4619      	mov	r1, r3
 8001b30:	480c      	ldr	r0, [pc, #48]	@ (8001b64 <MX_TIM2_Init+0x94>)
 8001b32:	f002 fbcd 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b3c:	f000 f948 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b48:	463b      	mov	r3, r7
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4805      	ldr	r0, [pc, #20]	@ (8001b64 <MX_TIM2_Init+0x94>)
 8001b4e:	f002 fdb7 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b58:	f000 f93a 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	3718      	adds	r7, #24
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000540 	.word	0x20000540

08001b68 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b6e:	f107 0308 	add.w	r3, r7, #8
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	2200      	movs	r2, #0
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b84:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf8 <MX_TIM3_Init+0x90>)
 8001b86:	4a1d      	ldr	r2, [pc, #116]	@ (8001bfc <MX_TIM3_Init+0x94>)
 8001b88:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8001b8a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bf8 <MX_TIM3_Init+0x90>)
 8001b8c:	2247      	movs	r2, #71	@ 0x47
 8001b8e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b90:	4b19      	ldr	r3, [pc, #100]	@ (8001bf8 <MX_TIM3_Init+0x90>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001b96:	4b18      	ldr	r3, [pc, #96]	@ (8001bf8 <MX_TIM3_Init+0x90>)
 8001b98:	2263      	movs	r2, #99	@ 0x63
 8001b9a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b9c:	4b16      	ldr	r3, [pc, #88]	@ (8001bf8 <MX_TIM3_Init+0x90>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ba2:	4b15      	ldr	r3, [pc, #84]	@ (8001bf8 <MX_TIM3_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ba8:	4813      	ldr	r0, [pc, #76]	@ (8001bf8 <MX_TIM3_Init+0x90>)
 8001baa:	f002 f987 	bl	8003ebc <HAL_TIM_Base_Init>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8001bb4:	f000 f90c 	bl	8001dd0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bbc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bbe:	f107 0308 	add.w	r3, r7, #8
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <MX_TIM3_Init+0x90>)
 8001bc6:	f002 fb83 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8001bd0:	f000 f8fe 	bl	8001dd0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001bdc:	463b      	mov	r3, r7
 8001bde:	4619      	mov	r1, r3
 8001be0:	4805      	ldr	r0, [pc, #20]	@ (8001bf8 <MX_TIM3_Init+0x90>)
 8001be2:	f002 fd6d 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8001bec:	f000 f8f0 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bf0:	bf00      	nop
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	20000588 	.word	0x20000588
 8001bfc:	40000400 	.word	0x40000400

08001c00 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001c04:	4b11      	ldr	r3, [pc, #68]	@ (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c06:	4a12      	ldr	r2, [pc, #72]	@ (8001c50 <MX_USART1_UART_Init+0x50>)
 8001c08:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001c0a:	4b10      	ldr	r3, [pc, #64]	@ (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c0c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001c10:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001c12:	4b0e      	ldr	r3, [pc, #56]	@ (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001c18:	4b0c      	ldr	r3, [pc, #48]	@ (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001c24:	4b09      	ldr	r3, [pc, #36]	@ (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c26:	220c      	movs	r2, #12
 8001c28:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	@ (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c30:	4b06      	ldr	r3, [pc, #24]	@ (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001c36:	4805      	ldr	r0, [pc, #20]	@ (8001c4c <MX_USART1_UART_Init+0x4c>)
 8001c38:	f002 fdb2 	bl	80047a0 <HAL_UART_Init>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001c42:	f000 f8c5 	bl	8001dd0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001c46:	bf00      	nop
 8001c48:	bd80      	pop	{r7, pc}
 8001c4a:	bf00      	nop
 8001c4c:	200005d0 	.word	0x200005d0
 8001c50:	40013800 	.word	0x40013800

08001c54 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b088      	sub	sp, #32
 8001c58:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5a:	f107 0310 	add.w	r3, r7, #16
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
 8001c62:	605a      	str	r2, [r3, #4]
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c68:	4b4b      	ldr	r3, [pc, #300]	@ (8001d98 <MX_GPIO_Init+0x144>)
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001d98 <MX_GPIO_Init+0x144>)
 8001c6e:	f043 0310 	orr.w	r3, r3, #16
 8001c72:	6193      	str	r3, [r2, #24]
 8001c74:	4b48      	ldr	r3, [pc, #288]	@ (8001d98 <MX_GPIO_Init+0x144>)
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	f003 0310 	and.w	r3, r3, #16
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c80:	4b45      	ldr	r3, [pc, #276]	@ (8001d98 <MX_GPIO_Init+0x144>)
 8001c82:	699b      	ldr	r3, [r3, #24]
 8001c84:	4a44      	ldr	r2, [pc, #272]	@ (8001d98 <MX_GPIO_Init+0x144>)
 8001c86:	f043 0320 	orr.w	r3, r3, #32
 8001c8a:	6193      	str	r3, [r2, #24]
 8001c8c:	4b42      	ldr	r3, [pc, #264]	@ (8001d98 <MX_GPIO_Init+0x144>)
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	f003 0320 	and.w	r3, r3, #32
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c98:	4b3f      	ldr	r3, [pc, #252]	@ (8001d98 <MX_GPIO_Init+0x144>)
 8001c9a:	699b      	ldr	r3, [r3, #24]
 8001c9c:	4a3e      	ldr	r2, [pc, #248]	@ (8001d98 <MX_GPIO_Init+0x144>)
 8001c9e:	f043 0304 	orr.w	r3, r3, #4
 8001ca2:	6193      	str	r3, [r2, #24]
 8001ca4:	4b3c      	ldr	r3, [pc, #240]	@ (8001d98 <MX_GPIO_Init+0x144>)
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0304 	and.w	r3, r3, #4
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cb0:	4b39      	ldr	r3, [pc, #228]	@ (8001d98 <MX_GPIO_Init+0x144>)
 8001cb2:	699b      	ldr	r3, [r3, #24]
 8001cb4:	4a38      	ldr	r2, [pc, #224]	@ (8001d98 <MX_GPIO_Init+0x144>)
 8001cb6:	f043 0308 	orr.w	r3, r3, #8
 8001cba:	6193      	str	r3, [r2, #24]
 8001cbc:	4b36      	ldr	r3, [pc, #216]	@ (8001d98 <MX_GPIO_Init+0x144>)
 8001cbe:	699b      	ldr	r3, [r3, #24]
 8001cc0:	f003 0308 	and.w	r3, r3, #8
 8001cc4:	603b      	str	r3, [r7, #0]
 8001cc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PA3_TEMP_DATA_GPIO_Port, PA3_TEMP_DATA_Pin, GPIO_PIN_SET);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	2108      	movs	r1, #8
 8001ccc:	4833      	ldr	r0, [pc, #204]	@ (8001d9c <MX_GPIO_Init+0x148>)
 8001cce:	f000 fee0 	bl	8002a92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, FND_SCLK_Pin|FND_RCLK_Pin|FND_DIO_Pin, GPIO_PIN_SET);
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001cd8:	4831      	ldr	r0, [pc, #196]	@ (8001da0 <MX_GPIO_Init+0x14c>)
 8001cda:	f000 feda 	bl	8002a92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, PB5_RELAY_ON_OFF_CTRL_Pin, GPIO_PIN_RESET);
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2120      	movs	r1, #32
 8001ce2:	482f      	ldr	r0, [pc, #188]	@ (8001da0 <MX_GPIO_Init+0x14c>)
 8001ce4:	f000 fed5 	bl	8002a92 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA3_TEMP_DATA_Pin */
  GPIO_InitStruct.Pin = PA3_TEMP_DATA_Pin;
 8001ce8:	2308      	movs	r3, #8
 8001cea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cec:	2301      	movs	r3, #1
 8001cee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf0:	2301      	movs	r3, #1
 8001cf2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PA3_TEMP_DATA_GPIO_Port, &GPIO_InitStruct);
 8001cf8:	f107 0310 	add.w	r3, r7, #16
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4827      	ldr	r0, [pc, #156]	@ (8001d9c <MX_GPIO_Init+0x148>)
 8001d00:	f000 fd2c 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0_TEMP_SET_UP_Pin PB2_TEMP_SET_DOWN_Pin */
  GPIO_InitStruct.Pin = PB0_TEMP_SET_UP_Pin|PB2_TEMP_SET_DOWN_Pin;
 8001d04:	2305      	movs	r3, #5
 8001d06:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d08:	4b26      	ldr	r3, [pc, #152]	@ (8001da4 <MX_GPIO_Init+0x150>)
 8001d0a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d10:	f107 0310 	add.w	r3, r7, #16
 8001d14:	4619      	mov	r1, r3
 8001d16:	4822      	ldr	r0, [pc, #136]	@ (8001da0 <MX_GPIO_Init+0x14c>)
 8001d18:	f000 fd20 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1_START_SW_PIN_Pin */
  GPIO_InitStruct.Pin = PB1_START_SW_PIN_Pin;
 8001d1c:	2302      	movs	r3, #2
 8001d1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d24:	2301      	movs	r3, #1
 8001d26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(PB1_START_SW_PIN_GPIO_Port, &GPIO_InitStruct);
 8001d28:	f107 0310 	add.w	r3, r7, #16
 8001d2c:	4619      	mov	r1, r3
 8001d2e:	481c      	ldr	r0, [pc, #112]	@ (8001da0 <MX_GPIO_Init+0x14c>)
 8001d30:	f000 fd14 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pins : FND_SCLK_Pin FND_RCLK_Pin FND_DIO_Pin */
  GPIO_InitStruct.Pin = FND_SCLK_Pin|FND_RCLK_Pin|FND_DIO_Pin;
 8001d34:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001d38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d42:	2303      	movs	r3, #3
 8001d44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d46:	f107 0310 	add.w	r3, r7, #16
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4814      	ldr	r0, [pc, #80]	@ (8001da0 <MX_GPIO_Init+0x14c>)
 8001d4e:	f000 fd05 	bl	800275c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5_RELAY_ON_OFF_CTRL_Pin */
  GPIO_InitStruct.Pin = PB5_RELAY_ON_OFF_CTRL_Pin;
 8001d52:	2320      	movs	r3, #32
 8001d54:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d56:	2301      	movs	r3, #1
 8001d58:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(PB5_RELAY_ON_OFF_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001d62:	f107 0310 	add.w	r3, r7, #16
 8001d66:	4619      	mov	r1, r3
 8001d68:	480d      	ldr	r0, [pc, #52]	@ (8001da0 <MX_GPIO_Init+0x14c>)
 8001d6a:	f000 fcf7 	bl	800275c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2103      	movs	r1, #3
 8001d72:	2006      	movs	r0, #6
 8001d74:	f000 fcbb 	bl	80026ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d78:	2006      	movs	r0, #6
 8001d7a:	f000 fcd4 	bl	8002726 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 3, 0);
 8001d7e:	2200      	movs	r2, #0
 8001d80:	2103      	movs	r1, #3
 8001d82:	2008      	movs	r0, #8
 8001d84:	f000 fcb3 	bl	80026ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001d88:	2008      	movs	r0, #8
 8001d8a:	f000 fccc 	bl	8002726 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d8e:	bf00      	nop
 8001d90:	3720      	adds	r7, #32
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	40010800 	.word	0x40010800
 8001da0:	40010c00 	.word	0x40010c00
 8001da4:	10210000 	.word	0x10210000

08001da8 <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  (void)file;
  HAL_UART_Transmit(&huart1, (uint8_t*)ptr, len, 10);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	230a      	movs	r3, #10
 8001dba:	68b9      	ldr	r1, [r7, #8]
 8001dbc:	4803      	ldr	r0, [pc, #12]	@ (8001dcc <_write+0x24>)
 8001dbe:	f002 fd3f 	bl	8004840 <HAL_UART_Transmit>
  return len;
 8001dc2:	687b      	ldr	r3, [r7, #4]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200005d0 	.word	0x200005d0

08001dd0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dd4:	b672      	cpsid	i
}
 8001dd6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <Error_Handler+0x8>

08001ddc <OLED_temp_render>:
#include "button_controller.h"

extern TIM_HandleTypeDef htim3;

void OLED_temp_render()
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b086      	sub	sp, #24
 8001de0:	af00      	add	r7, sp, #0
	int temp = set_temp;
 8001de2:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <OLED_temp_render+0x78>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	617b      	str	r3, [r7, #20]
	char temp_str[20] = {0};
 8001de8:	2300      	movs	r3, #0
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	1d3b      	adds	r3, r7, #4
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
 8001df2:	605a      	str	r2, [r3, #4]
 8001df4:	609a      	str	r2, [r3, #8]
 8001df6:	60da      	str	r2, [r3, #12]

	sprintf(temp_str, "%d.0", temp);
 8001df8:	463b      	mov	r3, r7
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	4916      	ldr	r1, [pc, #88]	@ (8001e58 <OLED_temp_render+0x7c>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f002 ffc6 	bl	8004d90 <siprintf>

	HAL_TIM_Base_Stop_IT(&htim3);
 8001e04:	4815      	ldr	r0, [pc, #84]	@ (8001e5c <OLED_temp_render+0x80>)
 8001e06:	f002 f945 	bl	8004094 <HAL_TIM_Base_Stop_IT>
	SSD1306_GotoXY (0,0);
 8001e0a:	2100      	movs	r1, #0
 8001e0c:	2000      	movs	r0, #0
 8001e0e:	f7ff fabd 	bl	800138c <SSD1306_GotoXY>
	SSD1306_Puts ("SetT | Work", &Font_11x18, 1);
 8001e12:	2201      	movs	r2, #1
 8001e14:	4912      	ldr	r1, [pc, #72]	@ (8001e60 <OLED_temp_render+0x84>)
 8001e16:	4813      	ldr	r0, [pc, #76]	@ (8001e64 <OLED_temp_render+0x88>)
 8001e18:	f7ff fb4c 	bl	80014b4 <SSD1306_Puts>
	SSD1306_GotoXY (0, 18);
 8001e1c:	2112      	movs	r1, #18
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff fab4 	bl	800138c <SSD1306_GotoXY>
	SSD1306_Puts ("--------------------", &Font_7x10, 1);
 8001e24:	2201      	movs	r2, #1
 8001e26:	4910      	ldr	r1, [pc, #64]	@ (8001e68 <OLED_temp_render+0x8c>)
 8001e28:	4810      	ldr	r0, [pc, #64]	@ (8001e6c <OLED_temp_render+0x90>)
 8001e2a:	f7ff fb43 	bl	80014b4 <SSD1306_Puts>
	SSD1306_GotoXY (0, 40);
 8001e2e:	2128      	movs	r1, #40	@ 0x28
 8001e30:	2000      	movs	r0, #0
 8001e32:	f7ff faab 	bl	800138c <SSD1306_GotoXY>
	SSD1306_Puts (temp_str, &Font_11x18, 1);
 8001e36:	463b      	mov	r3, r7
 8001e38:	2201      	movs	r2, #1
 8001e3a:	4909      	ldr	r1, [pc, #36]	@ (8001e60 <OLED_temp_render+0x84>)
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7ff fb39 	bl	80014b4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001e42:	f7ff f9ff 	bl	8001244 <SSD1306_UpdateScreen>
	HAL_TIM_Base_Start_IT(&htim3);
 8001e46:	4805      	ldr	r0, [pc, #20]	@ (8001e5c <OLED_temp_render+0x80>)
 8001e48:	f002 f8d2 	bl	8003ff0 <HAL_TIM_Base_Start_IT>
}
 8001e4c:	bf00      	nop
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}
 8001e54:	20000010 	.word	0x20000010
 8001e58:	08005e20 	.word	0x08005e20
 8001e5c:	20000588 	.word	0x20000588
 8001e60:	20000008 	.word	0x20000008
 8001e64:	08005e28 	.word	0x08005e28
 8001e68:	20000000 	.word	0x20000000
 8001e6c:	08005e34 	.word	0x08005e34

08001e70 <OLED_defult_render>:

void OLED_defult_render()
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
	int temp = set_temp;
 8001e76:	4b21      	ldr	r3, [pc, #132]	@ (8001efc <OLED_defult_render+0x8c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	617b      	str	r3, [r7, #20]
	char temp_str[20] = {0};
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	603b      	str	r3, [r7, #0]
 8001e80:	1d3b      	adds	r3, r7, #4
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]

	sprintf(temp_str, "%d.0", temp);
 8001e8c:	463b      	mov	r3, r7
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	491b      	ldr	r1, [pc, #108]	@ (8001f00 <OLED_defult_render+0x90>)
 8001e92:	4618      	mov	r0, r3
 8001e94:	f002 ff7c 	bl	8004d90 <siprintf>

	HAL_TIM_Base_Stop_IT(&htim3);
 8001e98:	481a      	ldr	r0, [pc, #104]	@ (8001f04 <OLED_defult_render+0x94>)
 8001e9a:	f002 f8fb 	bl	8004094 <HAL_TIM_Base_Stop_IT>
	SSD1306_GotoXY (0,0);
 8001e9e:	2100      	movs	r1, #0
 8001ea0:	2000      	movs	r0, #0
 8001ea2:	f7ff fa73 	bl	800138c <SSD1306_GotoXY>
	SSD1306_Puts ("SetT | Work", &Font_11x18, 1);
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4917      	ldr	r1, [pc, #92]	@ (8001f08 <OLED_defult_render+0x98>)
 8001eaa:	4818      	ldr	r0, [pc, #96]	@ (8001f0c <OLED_defult_render+0x9c>)
 8001eac:	f7ff fb02 	bl	80014b4 <SSD1306_Puts>
	SSD1306_GotoXY (0, 18);
 8001eb0:	2112      	movs	r1, #18
 8001eb2:	2000      	movs	r0, #0
 8001eb4:	f7ff fa6a 	bl	800138c <SSD1306_GotoXY>
	SSD1306_Puts ("--------------------", &Font_7x10, 1);
 8001eb8:	2201      	movs	r2, #1
 8001eba:	4915      	ldr	r1, [pc, #84]	@ (8001f10 <OLED_defult_render+0xa0>)
 8001ebc:	4815      	ldr	r0, [pc, #84]	@ (8001f14 <OLED_defult_render+0xa4>)
 8001ebe:	f7ff faf9 	bl	80014b4 <SSD1306_Puts>
	SSD1306_GotoXY (0, 40);
 8001ec2:	2128      	movs	r1, #40	@ 0x28
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	f7ff fa61 	bl	800138c <SSD1306_GotoXY>
	SSD1306_Puts (temp_str, &Font_11x18, 1);
 8001eca:	463b      	mov	r3, r7
 8001ecc:	2201      	movs	r2, #1
 8001ece:	490e      	ldr	r1, [pc, #56]	@ (8001f08 <OLED_defult_render+0x98>)
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff faef 	bl	80014b4 <SSD1306_Puts>
	SSD1306_GotoXY (47, 40);
 8001ed6:	2128      	movs	r1, #40	@ 0x28
 8001ed8:	202f      	movs	r0, #47	@ 0x2f
 8001eda:	f7ff fa57 	bl	800138c <SSD1306_GotoXY>
	SSD1306_Puts (" |  OFF", &Font_11x18, 1);
 8001ede:	2201      	movs	r2, #1
 8001ee0:	4909      	ldr	r1, [pc, #36]	@ (8001f08 <OLED_defult_render+0x98>)
 8001ee2:	480d      	ldr	r0, [pc, #52]	@ (8001f18 <OLED_defult_render+0xa8>)
 8001ee4:	f7ff fae6 	bl	80014b4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001ee8:	f7ff f9ac 	bl	8001244 <SSD1306_UpdateScreen>
	HAL_TIM_Base_Start_IT(&htim3);
 8001eec:	4805      	ldr	r0, [pc, #20]	@ (8001f04 <OLED_defult_render+0x94>)
 8001eee:	f002 f87f 	bl	8003ff0 <HAL_TIM_Base_Start_IT>
}
 8001ef2:	bf00      	nop
 8001ef4:	3718      	adds	r7, #24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	20000010 	.word	0x20000010
 8001f00:	08005e20 	.word	0x08005e20
 8001f04:	20000588 	.word	0x20000588
 8001f08:	20000008 	.word	0x20000008
 8001f0c:	08005e28 	.word	0x08005e28
 8001f10:	20000000 	.word	0x20000000
 8001f14:	08005e34 	.word	0x08005e34
 8001f18:	08005e4c 	.word	0x08005e4c

08001f1c <OLED_stop_render>:

void OLED_stop_render()
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001f20:	4809      	ldr	r0, [pc, #36]	@ (8001f48 <OLED_stop_render+0x2c>)
 8001f22:	f002 f8b7 	bl	8004094 <HAL_TIM_Base_Stop_IT>
	SSD1306_GotoXY (47, 40);
 8001f26:	2128      	movs	r1, #40	@ 0x28
 8001f28:	202f      	movs	r0, #47	@ 0x2f
 8001f2a:	f7ff fa2f 	bl	800138c <SSD1306_GotoXY>
	SSD1306_Puts (" |  OFF", &Font_11x18, 1);
 8001f2e:	2201      	movs	r2, #1
 8001f30:	4906      	ldr	r1, [pc, #24]	@ (8001f4c <OLED_stop_render+0x30>)
 8001f32:	4807      	ldr	r0, [pc, #28]	@ (8001f50 <OLED_stop_render+0x34>)
 8001f34:	f7ff fabe 	bl	80014b4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001f38:	f7ff f984 	bl	8001244 <SSD1306_UpdateScreen>
	HAL_TIM_Base_Start_IT(&htim3);
 8001f3c:	4802      	ldr	r0, [pc, #8]	@ (8001f48 <OLED_stop_render+0x2c>)
 8001f3e:	f002 f857 	bl	8003ff0 <HAL_TIM_Base_Start_IT>
}
 8001f42:	bf00      	nop
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000588 	.word	0x20000588
 8001f4c:	20000008 	.word	0x20000008
 8001f50:	08005e4c 	.word	0x08005e4c

08001f54 <OLED_on_render>:

void OLED_on_render()
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Stop_IT(&htim3);
 8001f58:	4809      	ldr	r0, [pc, #36]	@ (8001f80 <OLED_on_render+0x2c>)
 8001f5a:	f002 f89b 	bl	8004094 <HAL_TIM_Base_Stop_IT>
	SSD1306_GotoXY (47, 40);
 8001f5e:	2128      	movs	r1, #40	@ 0x28
 8001f60:	202f      	movs	r0, #47	@ 0x2f
 8001f62:	f7ff fa13 	bl	800138c <SSD1306_GotoXY>
	SSD1306_Puts (" |  ON ", &Font_11x18, 1);
 8001f66:	2201      	movs	r2, #1
 8001f68:	4906      	ldr	r1, [pc, #24]	@ (8001f84 <OLED_on_render+0x30>)
 8001f6a:	4807      	ldr	r0, [pc, #28]	@ (8001f88 <OLED_on_render+0x34>)
 8001f6c:	f7ff faa2 	bl	80014b4 <SSD1306_Puts>
	SSD1306_UpdateScreen(); //display
 8001f70:	f7ff f968 	bl	8001244 <SSD1306_UpdateScreen>
	HAL_TIM_Base_Start_IT(&htim3);
 8001f74:	4802      	ldr	r0, [pc, #8]	@ (8001f80 <OLED_on_render+0x2c>)
 8001f76:	f002 f83b 	bl	8003ff0 <HAL_TIM_Base_Start_IT>
}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000588 	.word	0x20000588
 8001f84:	20000008 	.word	0x20000008
 8001f88:	08005e54 	.word	0x08005e54

08001f8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f92:	4b15      	ldr	r3, [pc, #84]	@ (8001fe8 <HAL_MspInit+0x5c>)
 8001f94:	699b      	ldr	r3, [r3, #24]
 8001f96:	4a14      	ldr	r2, [pc, #80]	@ (8001fe8 <HAL_MspInit+0x5c>)
 8001f98:	f043 0301 	orr.w	r3, r3, #1
 8001f9c:	6193      	str	r3, [r2, #24]
 8001f9e:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <HAL_MspInit+0x5c>)
 8001fa0:	699b      	ldr	r3, [r3, #24]
 8001fa2:	f003 0301 	and.w	r3, r3, #1
 8001fa6:	60bb      	str	r3, [r7, #8]
 8001fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001faa:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <HAL_MspInit+0x5c>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe8 <HAL_MspInit+0x5c>)
 8001fb0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fb4:	61d3      	str	r3, [r2, #28]
 8001fb6:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <HAL_MspInit+0x5c>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001fbe:	607b      	str	r3, [r7, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8001fec <HAL_MspInit+0x60>)
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	60fb      	str	r3, [r7, #12]
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001fce:	60fb      	str	r3, [r7, #12]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fd6:	60fb      	str	r3, [r7, #12]
 8001fd8:	4a04      	ldr	r2, [pc, #16]	@ (8001fec <HAL_MspInit+0x60>)
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bc80      	pop	{r7}
 8001fe6:	4770      	bx	lr
 8001fe8:	40021000 	.word	0x40021000
 8001fec:	40010000 	.word	0x40010000

08001ff0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b088      	sub	sp, #32
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 0310 	add.w	r3, r7, #16
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a16      	ldr	r2, [pc, #88]	@ (8002064 <HAL_I2C_MspInit+0x74>)
 800200c:	4293      	cmp	r3, r2
 800200e:	d124      	bne.n	800205a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002010:	4b15      	ldr	r3, [pc, #84]	@ (8002068 <HAL_I2C_MspInit+0x78>)
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	4a14      	ldr	r2, [pc, #80]	@ (8002068 <HAL_I2C_MspInit+0x78>)
 8002016:	f043 0308 	orr.w	r3, r3, #8
 800201a:	6193      	str	r3, [r2, #24]
 800201c:	4b12      	ldr	r3, [pc, #72]	@ (8002068 <HAL_I2C_MspInit+0x78>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0308 	and.w	r3, r3, #8
 8002024:	60fb      	str	r3, [r7, #12]
 8002026:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002028:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800202c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800202e:	2312      	movs	r3, #18
 8002030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002032:	2303      	movs	r3, #3
 8002034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002036:	f107 0310 	add.w	r3, r7, #16
 800203a:	4619      	mov	r1, r3
 800203c:	480b      	ldr	r0, [pc, #44]	@ (800206c <HAL_I2C_MspInit+0x7c>)
 800203e:	f000 fb8d 	bl	800275c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002042:	4b09      	ldr	r3, [pc, #36]	@ (8002068 <HAL_I2C_MspInit+0x78>)
 8002044:	69db      	ldr	r3, [r3, #28]
 8002046:	4a08      	ldr	r2, [pc, #32]	@ (8002068 <HAL_I2C_MspInit+0x78>)
 8002048:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800204c:	61d3      	str	r3, [r2, #28]
 800204e:	4b06      	ldr	r3, [pc, #24]	@ (8002068 <HAL_I2C_MspInit+0x78>)
 8002050:	69db      	ldr	r3, [r3, #28]
 8002052:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002056:	60bb      	str	r3, [r7, #8]
 8002058:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800205a:	bf00      	nop
 800205c:	3720      	adds	r7, #32
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40005800 	.word	0x40005800
 8002068:	40021000 	.word	0x40021000
 800206c:	40010c00 	.word	0x40010c00

08002070 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002080:	d114      	bne.n	80020ac <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002082:	4b19      	ldr	r3, [pc, #100]	@ (80020e8 <HAL_TIM_Base_MspInit+0x78>)
 8002084:	69db      	ldr	r3, [r3, #28]
 8002086:	4a18      	ldr	r2, [pc, #96]	@ (80020e8 <HAL_TIM_Base_MspInit+0x78>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	61d3      	str	r3, [r2, #28]
 800208e:	4b16      	ldr	r3, [pc, #88]	@ (80020e8 <HAL_TIM_Base_MspInit+0x78>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	201c      	movs	r0, #28
 80020a0:	f000 fb25 	bl	80026ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020a4:	201c      	movs	r0, #28
 80020a6:	f000 fb3e 	bl	8002726 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80020aa:	e018      	b.n	80020de <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM3)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0e      	ldr	r2, [pc, #56]	@ (80020ec <HAL_TIM_Base_MspInit+0x7c>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d113      	bne.n	80020de <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80020b6:	4b0c      	ldr	r3, [pc, #48]	@ (80020e8 <HAL_TIM_Base_MspInit+0x78>)
 80020b8:	69db      	ldr	r3, [r3, #28]
 80020ba:	4a0b      	ldr	r2, [pc, #44]	@ (80020e8 <HAL_TIM_Base_MspInit+0x78>)
 80020bc:	f043 0302 	orr.w	r3, r3, #2
 80020c0:	61d3      	str	r3, [r2, #28]
 80020c2:	4b09      	ldr	r3, [pc, #36]	@ (80020e8 <HAL_TIM_Base_MspInit+0x78>)
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	f003 0302 	and.w	r3, r3, #2
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 4, 0);
 80020ce:	2200      	movs	r2, #0
 80020d0:	2104      	movs	r1, #4
 80020d2:	201d      	movs	r0, #29
 80020d4:	f000 fb0b 	bl	80026ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80020d8:	201d      	movs	r0, #29
 80020da:	f000 fb24 	bl	8002726 <HAL_NVIC_EnableIRQ>
}
 80020de:	bf00      	nop
 80020e0:	3710      	adds	r7, #16
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40021000 	.word	0x40021000
 80020ec:	40000400 	.word	0x40000400

080020f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b088      	sub	sp, #32
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020f8:	f107 0310 	add.w	r3, r7, #16
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]
 8002100:	605a      	str	r2, [r3, #4]
 8002102:	609a      	str	r2, [r3, #8]
 8002104:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a1c      	ldr	r2, [pc, #112]	@ (800217c <HAL_UART_MspInit+0x8c>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d131      	bne.n	8002174 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002110:	4b1b      	ldr	r3, [pc, #108]	@ (8002180 <HAL_UART_MspInit+0x90>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	4a1a      	ldr	r2, [pc, #104]	@ (8002180 <HAL_UART_MspInit+0x90>)
 8002116:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800211a:	6193      	str	r3, [r2, #24]
 800211c:	4b18      	ldr	r3, [pc, #96]	@ (8002180 <HAL_UART_MspInit+0x90>)
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002128:	4b15      	ldr	r3, [pc, #84]	@ (8002180 <HAL_UART_MspInit+0x90>)
 800212a:	699b      	ldr	r3, [r3, #24]
 800212c:	4a14      	ldr	r2, [pc, #80]	@ (8002180 <HAL_UART_MspInit+0x90>)
 800212e:	f043 0304 	orr.w	r3, r3, #4
 8002132:	6193      	str	r3, [r2, #24]
 8002134:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <HAL_UART_MspInit+0x90>)
 8002136:	699b      	ldr	r3, [r3, #24]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	60bb      	str	r3, [r7, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002140:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002144:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800214e:	f107 0310 	add.w	r3, r7, #16
 8002152:	4619      	mov	r1, r3
 8002154:	480b      	ldr	r0, [pc, #44]	@ (8002184 <HAL_UART_MspInit+0x94>)
 8002156:	f000 fb01 	bl	800275c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800215a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800215e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002160:	2300      	movs	r3, #0
 8002162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	4619      	mov	r1, r3
 800216e:	4805      	ldr	r0, [pc, #20]	@ (8002184 <HAL_UART_MspInit+0x94>)
 8002170:	f000 faf4 	bl	800275c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002174:	bf00      	nop
 8002176:	3720      	adds	r7, #32
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40013800 	.word	0x40013800
 8002180:	40021000 	.word	0x40021000
 8002184:	40010800 	.word	0x40010800

08002188 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800218c:	bf00      	nop
 800218e:	e7fd      	b.n	800218c <NMI_Handler+0x4>

08002190 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002194:	bf00      	nop
 8002196:	e7fd      	b.n	8002194 <HardFault_Handler+0x4>

08002198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002198:	b480      	push	{r7}
 800219a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <MemManage_Handler+0x4>

080021a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021a4:	bf00      	nop
 80021a6:	e7fd      	b.n	80021a4 <BusFault_Handler+0x4>

080021a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021ac:	bf00      	nop
 80021ae:	e7fd      	b.n	80021ac <UsageFault_Handler+0x4>

080021b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bc80      	pop	{r7}
 80021ba:	4770      	bx	lr

080021bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021c0:	bf00      	nop
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021cc:	bf00      	nop
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bc80      	pop	{r7}
 80021d2:	4770      	bx	lr

080021d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d8:	f000 f972 	bl	80024c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021dc:	bf00      	nop
 80021de:	bd80      	pop	{r7, pc}

080021e0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	// set_temp는 100도 이상으로 설정 할 수 없음
	if (set_temp < 100)
 80021e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002220 <EXTI0_IRQHandler+0x40>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	2b63      	cmp	r3, #99	@ 0x63
 80021ea:	dc0d      	bgt.n	8002208 <EXTI0_IRQHandler+0x28>
	{
		set_temp++;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <EXTI0_IRQHandler+0x40>)
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	3301      	adds	r3, #1
 80021f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002220 <EXTI0_IRQHandler+0x40>)
 80021f4:	6013      	str	r3, [r2, #0]
		OLED_temp_render(); // setT render..
 80021f6:	f7ff fdf1 	bl	8001ddc <OLED_temp_render>
		printf("setting temp up..\r\nSet Temp : %d\r\n", set_temp); // uart 출력
 80021fa:	4b09      	ldr	r3, [pc, #36]	@ (8002220 <EXTI0_IRQHandler+0x40>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4619      	mov	r1, r3
 8002200:	4808      	ldr	r0, [pc, #32]	@ (8002224 <EXTI0_IRQHandler+0x44>)
 8002202:	f002 fdb3 	bl	8004d6c <iprintf>
 8002206:	e005      	b.n	8002214 <EXTI0_IRQHandler+0x34>
	}
	else
		printf("Set temp cannot be set above 100.\r\n", set_temp);
 8002208:	4b05      	ldr	r3, [pc, #20]	@ (8002220 <EXTI0_IRQHandler+0x40>)
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4619      	mov	r1, r3
 800220e:	4806      	ldr	r0, [pc, #24]	@ (8002228 <EXTI0_IRQHandler+0x48>)
 8002210:	f002 fdac 	bl	8004d6c <iprintf>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB0_TEMP_SET_UP_Pin);
 8002214:	2001      	movs	r0, #1
 8002216:	f000 fc55 	bl	8002ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	20000010 	.word	0x20000010
 8002224:	08005e5c 	.word	0x08005e5c
 8002228:	08005e80 	.word	0x08005e80

0800222c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	// set_temp는 0도 이하로 설정 할 수 없음
	if (set_temp > 0)
 8002230:	4b0e      	ldr	r3, [pc, #56]	@ (800226c <EXTI2_IRQHandler+0x40>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	2b00      	cmp	r3, #0
 8002236:	dd0d      	ble.n	8002254 <EXTI2_IRQHandler+0x28>
	{
		set_temp--;
 8002238:	4b0c      	ldr	r3, [pc, #48]	@ (800226c <EXTI2_IRQHandler+0x40>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	3b01      	subs	r3, #1
 800223e:	4a0b      	ldr	r2, [pc, #44]	@ (800226c <EXTI2_IRQHandler+0x40>)
 8002240:	6013      	str	r3, [r2, #0]
		OLED_temp_render(); // setT render..
 8002242:	f7ff fdcb 	bl	8001ddc <OLED_temp_render>
		printf("setting temp down..\r\nSet Temp : %d\r\n", set_temp); // uart 출력
 8002246:	4b09      	ldr	r3, [pc, #36]	@ (800226c <EXTI2_IRQHandler+0x40>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4619      	mov	r1, r3
 800224c:	4808      	ldr	r0, [pc, #32]	@ (8002270 <EXTI2_IRQHandler+0x44>)
 800224e:	f002 fd8d 	bl	8004d6c <iprintf>
 8002252:	e005      	b.n	8002260 <EXTI2_IRQHandler+0x34>
	}
	else
		printf("Set temp cannot be set below 0.\r\n", set_temp);
 8002254:	4b05      	ldr	r3, [pc, #20]	@ (800226c <EXTI2_IRQHandler+0x40>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4619      	mov	r1, r3
 800225a:	4806      	ldr	r0, [pc, #24]	@ (8002274 <EXTI2_IRQHandler+0x48>)
 800225c:	f002 fd86 	bl	8004d6c <iprintf>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PB2_TEMP_SET_DOWN_Pin);
 8002260:	2004      	movs	r0, #4
 8002262:	f000 fc2f 	bl	8002ac4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002266:	bf00      	nop
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	20000010 	.word	0x20000010
 8002270:	08005ea4 	.word	0x08005ea4
 8002274:	08005ecc 	.word	0x08005ecc

08002278 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800227c:	4802      	ldr	r0, [pc, #8]	@ (8002288 <TIM2_IRQHandler+0x10>)
 800227e:	f001 ff37 	bl	80040f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20000540 	.word	0x20000540

0800228c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	if (start_sw == 0)
 8002290:	4b0c      	ldr	r3, [pc, #48]	@ (80022c4 <TIM3_IRQHandler+0x38>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <TIM3_IRQHandler+0x12>
		FND_stop();
 8002298:	f7ff fb34 	bl	8001904 <FND_stop>
 800229c:	e00d      	b.n	80022ba <TIM3_IRQHandler+0x2e>
	else
		digit4_temper((int)(ds18b20[0].Temperature * 10));
 800229e:	4b0a      	ldr	r3, [pc, #40]	@ (80022c8 <TIM3_IRQHandler+0x3c>)
 80022a0:	689b      	ldr	r3, [r3, #8]
 80022a2:	490a      	ldr	r1, [pc, #40]	@ (80022cc <TIM3_IRQHandler+0x40>)
 80022a4:	4618      	mov	r0, r3
 80022a6:	f7fd ff51 	bl	800014c <__aeabi_fmul>
 80022aa:	4603      	mov	r3, r0
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7fe f90f 	bl	80004d0 <__aeabi_f2iz>
 80022b2:	4603      	mov	r3, r0
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fa97 	bl	80017e8 <digit4_temper>
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80022ba:	4805      	ldr	r0, [pc, #20]	@ (80022d0 <TIM3_IRQHandler+0x44>)
 80022bc:	f001 ff18 	bl	80040f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80022c0:	bf00      	nop
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	200004c8 	.word	0x200004c8
 80022c8:	20000098 	.word	0x20000098
 80022cc:	41200000 	.word	0x41200000
 80022d0:	20000588 	.word	0x20000588

080022d4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e0:	2300      	movs	r3, #0
 80022e2:	617b      	str	r3, [r7, #20]
 80022e4:	e00a      	b.n	80022fc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022e6:	f3af 8000 	nop.w
 80022ea:	4601      	mov	r1, r0
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	60ba      	str	r2, [r7, #8]
 80022f2:	b2ca      	uxtb	r2, r1
 80022f4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022f6:	697b      	ldr	r3, [r7, #20]
 80022f8:	3301      	adds	r3, #1
 80022fa:	617b      	str	r3, [r7, #20]
 80022fc:	697a      	ldr	r2, [r7, #20]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	429a      	cmp	r2, r3
 8002302:	dbf0      	blt.n	80022e6 <_read+0x12>
  }

  return len;
 8002304:	687b      	ldr	r3, [r7, #4]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3718      	adds	r7, #24
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <_close>:
  }
  return len;
}

int _close(int file)
{
 800230e:	b480      	push	{r7}
 8002310:	b083      	sub	sp, #12
 8002312:	af00      	add	r7, sp, #0
 8002314:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002316:	f04f 33ff 	mov.w	r3, #4294967295
}
 800231a:	4618      	mov	r0, r3
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	bc80      	pop	{r7}
 8002322:	4770      	bx	lr

08002324 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002334:	605a      	str	r2, [r3, #4]
  return 0;
 8002336:	2300      	movs	r3, #0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bc80      	pop	{r7}
 8002340:	4770      	bx	lr

08002342 <_isatty>:

int _isatty(int file)
{
 8002342:	b480      	push	{r7}
 8002344:	b083      	sub	sp, #12
 8002346:	af00      	add	r7, sp, #0
 8002348:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800234a:	2301      	movs	r3, #1
}
 800234c:	4618      	mov	r0, r3
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	bc80      	pop	{r7}
 8002354:	4770      	bx	lr

08002356 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002356:	b480      	push	{r7}
 8002358:	b085      	sub	sp, #20
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002362:	2300      	movs	r3, #0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bc80      	pop	{r7}
 800236c:	4770      	bx	lr
	...

08002370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b086      	sub	sp, #24
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002378:	4a14      	ldr	r2, [pc, #80]	@ (80023cc <_sbrk+0x5c>)
 800237a:	4b15      	ldr	r3, [pc, #84]	@ (80023d0 <_sbrk+0x60>)
 800237c:	1ad3      	subs	r3, r2, r3
 800237e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002384:	4b13      	ldr	r3, [pc, #76]	@ (80023d4 <_sbrk+0x64>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d102      	bne.n	8002392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800238c:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <_sbrk+0x64>)
 800238e:	4a12      	ldr	r2, [pc, #72]	@ (80023d8 <_sbrk+0x68>)
 8002390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002392:	4b10      	ldr	r3, [pc, #64]	@ (80023d4 <_sbrk+0x64>)
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4413      	add	r3, r2
 800239a:	693a      	ldr	r2, [r7, #16]
 800239c:	429a      	cmp	r2, r3
 800239e:	d207      	bcs.n	80023b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023a0:	f002 fda8 	bl	8004ef4 <__errno>
 80023a4:	4603      	mov	r3, r0
 80023a6:	220c      	movs	r2, #12
 80023a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	e009      	b.n	80023c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023b0:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <_sbrk+0x64>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023b6:	4b07      	ldr	r3, [pc, #28]	@ (80023d4 <_sbrk+0x64>)
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4413      	add	r3, r2
 80023be:	4a05      	ldr	r2, [pc, #20]	@ (80023d4 <_sbrk+0x64>)
 80023c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023c2:	68fb      	ldr	r3, [r7, #12]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3718      	adds	r7, #24
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	20005000 	.word	0x20005000
 80023d0:	00000400 	.word	0x00000400
 80023d4:	20000618 	.word	0x20000618
 80023d8:	20000770 	.word	0x20000770

080023dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bc80      	pop	{r7}
 80023e6:	4770      	bx	lr

080023e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023e8:	f7ff fff8 	bl	80023dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023ec:	480b      	ldr	r0, [pc, #44]	@ (800241c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023ee:	490c      	ldr	r1, [pc, #48]	@ (8002420 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023f0:	4a0c      	ldr	r2, [pc, #48]	@ (8002424 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023f4:	e002      	b.n	80023fc <LoopCopyDataInit>

080023f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023fa:	3304      	adds	r3, #4

080023fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002400:	d3f9      	bcc.n	80023f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002402:	4a09      	ldr	r2, [pc, #36]	@ (8002428 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002404:	4c09      	ldr	r4, [pc, #36]	@ (800242c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002406:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002408:	e001      	b.n	800240e <LoopFillZerobss>

0800240a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800240a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800240c:	3204      	adds	r2, #4

0800240e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800240e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002410:	d3fb      	bcc.n	800240a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002412:	f002 fd75 	bl	8004f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002416:	f7ff fabd 	bl	8001994 <main>
  bx lr
 800241a:	4770      	bx	lr
  ldr r0, =_sdata
 800241c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002420:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002424:	08007420 	.word	0x08007420
  ldr r2, =_sbss
 8002428:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800242c:	2000076c 	.word	0x2000076c

08002430 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002430:	e7fe      	b.n	8002430 <ADC1_2_IRQHandler>
	...

08002434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002438:	4b08      	ldr	r3, [pc, #32]	@ (800245c <HAL_Init+0x28>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a07      	ldr	r2, [pc, #28]	@ (800245c <HAL_Init+0x28>)
 800243e:	f043 0310 	orr.w	r3, r3, #16
 8002442:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002444:	2003      	movs	r0, #3
 8002446:	f000 f947 	bl	80026d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800244a:	200f      	movs	r0, #15
 800244c:	f000 f808 	bl	8002460 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002450:	f7ff fd9c 	bl	8001f8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002454:	2300      	movs	r3, #0
}
 8002456:	4618      	mov	r0, r3
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40022000 	.word	0x40022000

08002460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002468:	4b12      	ldr	r3, [pc, #72]	@ (80024b4 <HAL_InitTick+0x54>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b12      	ldr	r3, [pc, #72]	@ (80024b8 <HAL_InitTick+0x58>)
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	4619      	mov	r1, r3
 8002472:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002476:	fbb3 f3f1 	udiv	r3, r3, r1
 800247a:	fbb2 f3f3 	udiv	r3, r2, r3
 800247e:	4618      	mov	r0, r3
 8002480:	f000 f95f 	bl	8002742 <HAL_SYSTICK_Config>
 8002484:	4603      	mov	r3, r0
 8002486:	2b00      	cmp	r3, #0
 8002488:	d001      	beq.n	800248e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800248a:	2301      	movs	r3, #1
 800248c:	e00e      	b.n	80024ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2b0f      	cmp	r3, #15
 8002492:	d80a      	bhi.n	80024aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002494:	2200      	movs	r2, #0
 8002496:	6879      	ldr	r1, [r7, #4]
 8002498:	f04f 30ff 	mov.w	r0, #4294967295
 800249c:	f000 f927 	bl	80026ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024a0:	4a06      	ldr	r2, [pc, #24]	@ (80024bc <HAL_InitTick+0x5c>)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024a6:	2300      	movs	r3, #0
 80024a8:	e000      	b.n	80024ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
}
 80024ac:	4618      	mov	r0, r3
 80024ae:	3708      	adds	r7, #8
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20000014 	.word	0x20000014
 80024b8:	2000001c 	.word	0x2000001c
 80024bc:	20000018 	.word	0x20000018

080024c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024c4:	4b05      	ldr	r3, [pc, #20]	@ (80024dc <HAL_IncTick+0x1c>)
 80024c6:	781b      	ldrb	r3, [r3, #0]
 80024c8:	461a      	mov	r2, r3
 80024ca:	4b05      	ldr	r3, [pc, #20]	@ (80024e0 <HAL_IncTick+0x20>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4413      	add	r3, r2
 80024d0:	4a03      	ldr	r2, [pc, #12]	@ (80024e0 <HAL_IncTick+0x20>)
 80024d2:	6013      	str	r3, [r2, #0]
}
 80024d4:	bf00      	nop
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr
 80024dc:	2000001c 	.word	0x2000001c
 80024e0:	2000061c 	.word	0x2000061c

080024e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0
  return uwTick;
 80024e8:	4b02      	ldr	r3, [pc, #8]	@ (80024f4 <HAL_GetTick+0x10>)
 80024ea:	681b      	ldr	r3, [r3, #0]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr
 80024f4:	2000061c 	.word	0x2000061c

080024f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b084      	sub	sp, #16
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002500:	f7ff fff0 	bl	80024e4 <HAL_GetTick>
 8002504:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002510:	d005      	beq.n	800251e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002512:	4b0a      	ldr	r3, [pc, #40]	@ (800253c <HAL_Delay+0x44>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	461a      	mov	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4413      	add	r3, r2
 800251c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800251e:	bf00      	nop
 8002520:	f7ff ffe0 	bl	80024e4 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	68fa      	ldr	r2, [r7, #12]
 800252c:	429a      	cmp	r2, r3
 800252e:	d8f7      	bhi.n	8002520 <HAL_Delay+0x28>
  {
  }
}
 8002530:	bf00      	nop
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	2000001c 	.word	0x2000001c

08002540 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f003 0307 	and.w	r3, r3, #7
 800254e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002550:	4b0c      	ldr	r3, [pc, #48]	@ (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002556:	68ba      	ldr	r2, [r7, #8]
 8002558:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800255c:	4013      	ands	r3, r2
 800255e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002568:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800256c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002570:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002572:	4a04      	ldr	r2, [pc, #16]	@ (8002584 <__NVIC_SetPriorityGrouping+0x44>)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	60d3      	str	r3, [r2, #12]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	bc80      	pop	{r7}
 8002580:	4770      	bx	lr
 8002582:	bf00      	nop
 8002584:	e000ed00 	.word	0xe000ed00

08002588 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002588:	b480      	push	{r7}
 800258a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800258c:	4b04      	ldr	r3, [pc, #16]	@ (80025a0 <__NVIC_GetPriorityGrouping+0x18>)
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	0a1b      	lsrs	r3, r3, #8
 8002592:	f003 0307 	and.w	r3, r3, #7
}
 8002596:	4618      	mov	r0, r3
 8002598:	46bd      	mov	sp, r7
 800259a:	bc80      	pop	{r7}
 800259c:	4770      	bx	lr
 800259e:	bf00      	nop
 80025a0:	e000ed00 	.word	0xe000ed00

080025a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	db0b      	blt.n	80025ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025b6:	79fb      	ldrb	r3, [r7, #7]
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	4906      	ldr	r1, [pc, #24]	@ (80025d8 <__NVIC_EnableIRQ+0x34>)
 80025be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c2:	095b      	lsrs	r3, r3, #5
 80025c4:	2001      	movs	r0, #1
 80025c6:	fa00 f202 	lsl.w	r2, r0, r2
 80025ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ce:	bf00      	nop
 80025d0:	370c      	adds	r7, #12
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr
 80025d8:	e000e100 	.word	0xe000e100

080025dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	4603      	mov	r3, r0
 80025e4:	6039      	str	r1, [r7, #0]
 80025e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	db0a      	blt.n	8002606 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	b2da      	uxtb	r2, r3
 80025f4:	490c      	ldr	r1, [pc, #48]	@ (8002628 <__NVIC_SetPriority+0x4c>)
 80025f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025fa:	0112      	lsls	r2, r2, #4
 80025fc:	b2d2      	uxtb	r2, r2
 80025fe:	440b      	add	r3, r1
 8002600:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002604:	e00a      	b.n	800261c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	b2da      	uxtb	r2, r3
 800260a:	4908      	ldr	r1, [pc, #32]	@ (800262c <__NVIC_SetPriority+0x50>)
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	3b04      	subs	r3, #4
 8002614:	0112      	lsls	r2, r2, #4
 8002616:	b2d2      	uxtb	r2, r2
 8002618:	440b      	add	r3, r1
 800261a:	761a      	strb	r2, [r3, #24]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	bc80      	pop	{r7}
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	e000e100 	.word	0xe000e100
 800262c:	e000ed00 	.word	0xe000ed00

08002630 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002630:	b480      	push	{r7}
 8002632:	b089      	sub	sp, #36	@ 0x24
 8002634:	af00      	add	r7, sp, #0
 8002636:	60f8      	str	r0, [r7, #12]
 8002638:	60b9      	str	r1, [r7, #8]
 800263a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	f1c3 0307 	rsb	r3, r3, #7
 800264a:	2b04      	cmp	r3, #4
 800264c:	bf28      	it	cs
 800264e:	2304      	movcs	r3, #4
 8002650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	3304      	adds	r3, #4
 8002656:	2b06      	cmp	r3, #6
 8002658:	d902      	bls.n	8002660 <NVIC_EncodePriority+0x30>
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3b03      	subs	r3, #3
 800265e:	e000      	b.n	8002662 <NVIC_EncodePriority+0x32>
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	f04f 32ff 	mov.w	r2, #4294967295
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	fa02 f303 	lsl.w	r3, r2, r3
 800266e:	43da      	mvns	r2, r3
 8002670:	68bb      	ldr	r3, [r7, #8]
 8002672:	401a      	ands	r2, r3
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002678:	f04f 31ff 	mov.w	r1, #4294967295
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	43d9      	mvns	r1, r3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002688:	4313      	orrs	r3, r2
         );
}
 800268a:	4618      	mov	r0, r3
 800268c:	3724      	adds	r7, #36	@ 0x24
 800268e:	46bd      	mov	sp, r7
 8002690:	bc80      	pop	{r7}
 8002692:	4770      	bx	lr

08002694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	3b01      	subs	r3, #1
 80026a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026a4:	d301      	bcc.n	80026aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026a6:	2301      	movs	r3, #1
 80026a8:	e00f      	b.n	80026ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026aa:	4a0a      	ldr	r2, [pc, #40]	@ (80026d4 <SysTick_Config+0x40>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3b01      	subs	r3, #1
 80026b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026b2:	210f      	movs	r1, #15
 80026b4:	f04f 30ff 	mov.w	r0, #4294967295
 80026b8:	f7ff ff90 	bl	80025dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026bc:	4b05      	ldr	r3, [pc, #20]	@ (80026d4 <SysTick_Config+0x40>)
 80026be:	2200      	movs	r2, #0
 80026c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026c2:	4b04      	ldr	r3, [pc, #16]	@ (80026d4 <SysTick_Config+0x40>)
 80026c4:	2207      	movs	r2, #7
 80026c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3708      	adds	r7, #8
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	e000e010 	.word	0xe000e010

080026d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff ff2d 	bl	8002540 <__NVIC_SetPriorityGrouping>
}
 80026e6:	bf00      	nop
 80026e8:	3708      	adds	r7, #8
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b086      	sub	sp, #24
 80026f2:	af00      	add	r7, sp, #0
 80026f4:	4603      	mov	r3, r0
 80026f6:	60b9      	str	r1, [r7, #8]
 80026f8:	607a      	str	r2, [r7, #4]
 80026fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002700:	f7ff ff42 	bl	8002588 <__NVIC_GetPriorityGrouping>
 8002704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	68b9      	ldr	r1, [r7, #8]
 800270a:	6978      	ldr	r0, [r7, #20]
 800270c:	f7ff ff90 	bl	8002630 <NVIC_EncodePriority>
 8002710:	4602      	mov	r2, r0
 8002712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f7ff ff5f 	bl	80025dc <__NVIC_SetPriority>
}
 800271e:	bf00      	nop
 8002720:	3718      	adds	r7, #24
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}

08002726 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	4603      	mov	r3, r0
 800272e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff ff35 	bl	80025a4 <__NVIC_EnableIRQ>
}
 800273a:	bf00      	nop
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b082      	sub	sp, #8
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7ff ffa2 	bl	8002694 <SysTick_Config>
 8002750:	4603      	mov	r3, r0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800275c:	b480      	push	{r7}
 800275e:	b08b      	sub	sp, #44	@ 0x2c
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002766:	2300      	movs	r3, #0
 8002768:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800276a:	2300      	movs	r3, #0
 800276c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800276e:	e169      	b.n	8002a44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002770:	2201      	movs	r2, #1
 8002772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002774:	fa02 f303 	lsl.w	r3, r2, r3
 8002778:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	69fa      	ldr	r2, [r7, #28]
 8002780:	4013      	ands	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	429a      	cmp	r2, r3
 800278a:	f040 8158 	bne.w	8002a3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	4a9a      	ldr	r2, [pc, #616]	@ (80029fc <HAL_GPIO_Init+0x2a0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d05e      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 8002798:	4a98      	ldr	r2, [pc, #608]	@ (80029fc <HAL_GPIO_Init+0x2a0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d875      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 800279e:	4a98      	ldr	r2, [pc, #608]	@ (8002a00 <HAL_GPIO_Init+0x2a4>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d058      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027a4:	4a96      	ldr	r2, [pc, #600]	@ (8002a00 <HAL_GPIO_Init+0x2a4>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d86f      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027aa:	4a96      	ldr	r2, [pc, #600]	@ (8002a04 <HAL_GPIO_Init+0x2a8>)
 80027ac:	4293      	cmp	r3, r2
 80027ae:	d052      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027b0:	4a94      	ldr	r2, [pc, #592]	@ (8002a04 <HAL_GPIO_Init+0x2a8>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d869      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027b6:	4a94      	ldr	r2, [pc, #592]	@ (8002a08 <HAL_GPIO_Init+0x2ac>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d04c      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027bc:	4a92      	ldr	r2, [pc, #584]	@ (8002a08 <HAL_GPIO_Init+0x2ac>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d863      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027c2:	4a92      	ldr	r2, [pc, #584]	@ (8002a0c <HAL_GPIO_Init+0x2b0>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d046      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
 80027c8:	4a90      	ldr	r2, [pc, #576]	@ (8002a0c <HAL_GPIO_Init+0x2b0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d85d      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027ce:	2b12      	cmp	r3, #18
 80027d0:	d82a      	bhi.n	8002828 <HAL_GPIO_Init+0xcc>
 80027d2:	2b12      	cmp	r3, #18
 80027d4:	d859      	bhi.n	800288a <HAL_GPIO_Init+0x12e>
 80027d6:	a201      	add	r2, pc, #4	@ (adr r2, 80027dc <HAL_GPIO_Init+0x80>)
 80027d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027dc:	08002857 	.word	0x08002857
 80027e0:	08002831 	.word	0x08002831
 80027e4:	08002843 	.word	0x08002843
 80027e8:	08002885 	.word	0x08002885
 80027ec:	0800288b 	.word	0x0800288b
 80027f0:	0800288b 	.word	0x0800288b
 80027f4:	0800288b 	.word	0x0800288b
 80027f8:	0800288b 	.word	0x0800288b
 80027fc:	0800288b 	.word	0x0800288b
 8002800:	0800288b 	.word	0x0800288b
 8002804:	0800288b 	.word	0x0800288b
 8002808:	0800288b 	.word	0x0800288b
 800280c:	0800288b 	.word	0x0800288b
 8002810:	0800288b 	.word	0x0800288b
 8002814:	0800288b 	.word	0x0800288b
 8002818:	0800288b 	.word	0x0800288b
 800281c:	0800288b 	.word	0x0800288b
 8002820:	08002839 	.word	0x08002839
 8002824:	0800284d 	.word	0x0800284d
 8002828:	4a79      	ldr	r2, [pc, #484]	@ (8002a10 <HAL_GPIO_Init+0x2b4>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d013      	beq.n	8002856 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800282e:	e02c      	b.n	800288a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	68db      	ldr	r3, [r3, #12]
 8002834:	623b      	str	r3, [r7, #32]
          break;
 8002836:	e029      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	3304      	adds	r3, #4
 800283e:	623b      	str	r3, [r7, #32]
          break;
 8002840:	e024      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	3308      	adds	r3, #8
 8002848:	623b      	str	r3, [r7, #32]
          break;
 800284a:	e01f      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	330c      	adds	r3, #12
 8002852:	623b      	str	r3, [r7, #32]
          break;
 8002854:	e01a      	b.n	800288c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d102      	bne.n	8002864 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800285e:	2304      	movs	r3, #4
 8002860:	623b      	str	r3, [r7, #32]
          break;
 8002862:	e013      	b.n	800288c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	2b01      	cmp	r3, #1
 800286a:	d105      	bne.n	8002878 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800286c:	2308      	movs	r3, #8
 800286e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69fa      	ldr	r2, [r7, #28]
 8002874:	611a      	str	r2, [r3, #16]
          break;
 8002876:	e009      	b.n	800288c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002878:	2308      	movs	r3, #8
 800287a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	615a      	str	r2, [r3, #20]
          break;
 8002882:	e003      	b.n	800288c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002884:	2300      	movs	r3, #0
 8002886:	623b      	str	r3, [r7, #32]
          break;
 8002888:	e000      	b.n	800288c <HAL_GPIO_Init+0x130>
          break;
 800288a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	2bff      	cmp	r3, #255	@ 0xff
 8002890:	d801      	bhi.n	8002896 <HAL_GPIO_Init+0x13a>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	e001      	b.n	800289a <HAL_GPIO_Init+0x13e>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3304      	adds	r3, #4
 800289a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	2bff      	cmp	r3, #255	@ 0xff
 80028a0:	d802      	bhi.n	80028a8 <HAL_GPIO_Init+0x14c>
 80028a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	e002      	b.n	80028ae <HAL_GPIO_Init+0x152>
 80028a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028aa:	3b08      	subs	r3, #8
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	681a      	ldr	r2, [r3, #0]
 80028b4:	210f      	movs	r1, #15
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	fa01 f303 	lsl.w	r3, r1, r3
 80028bc:	43db      	mvns	r3, r3
 80028be:	401a      	ands	r2, r3
 80028c0:	6a39      	ldr	r1, [r7, #32]
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	fa01 f303 	lsl.w	r3, r1, r3
 80028c8:	431a      	orrs	r2, r3
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	f000 80b1 	beq.w	8002a3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80028dc:	4b4d      	ldr	r3, [pc, #308]	@ (8002a14 <HAL_GPIO_Init+0x2b8>)
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	4a4c      	ldr	r2, [pc, #304]	@ (8002a14 <HAL_GPIO_Init+0x2b8>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6193      	str	r3, [r2, #24]
 80028e8:	4b4a      	ldr	r3, [pc, #296]	@ (8002a14 <HAL_GPIO_Init+0x2b8>)
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	f003 0301 	and.w	r3, r3, #1
 80028f0:	60bb      	str	r3, [r7, #8]
 80028f2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80028f4:	4a48      	ldr	r2, [pc, #288]	@ (8002a18 <HAL_GPIO_Init+0x2bc>)
 80028f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028f8:	089b      	lsrs	r3, r3, #2
 80028fa:	3302      	adds	r3, #2
 80028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002900:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002904:	f003 0303 	and.w	r3, r3, #3
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	220f      	movs	r2, #15
 800290c:	fa02 f303 	lsl.w	r3, r2, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	68fa      	ldr	r2, [r7, #12]
 8002914:	4013      	ands	r3, r2
 8002916:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a40      	ldr	r2, [pc, #256]	@ (8002a1c <HAL_GPIO_Init+0x2c0>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d013      	beq.n	8002948 <HAL_GPIO_Init+0x1ec>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a3f      	ldr	r2, [pc, #252]	@ (8002a20 <HAL_GPIO_Init+0x2c4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d00d      	beq.n	8002944 <HAL_GPIO_Init+0x1e8>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a3e      	ldr	r2, [pc, #248]	@ (8002a24 <HAL_GPIO_Init+0x2c8>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d007      	beq.n	8002940 <HAL_GPIO_Init+0x1e4>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	4a3d      	ldr	r2, [pc, #244]	@ (8002a28 <HAL_GPIO_Init+0x2cc>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d101      	bne.n	800293c <HAL_GPIO_Init+0x1e0>
 8002938:	2303      	movs	r3, #3
 800293a:	e006      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 800293c:	2304      	movs	r3, #4
 800293e:	e004      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002940:	2302      	movs	r3, #2
 8002942:	e002      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_GPIO_Init+0x1ee>
 8002948:	2300      	movs	r3, #0
 800294a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800294c:	f002 0203 	and.w	r2, r2, #3
 8002950:	0092      	lsls	r2, r2, #2
 8002952:	4093      	lsls	r3, r2
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800295a:	492f      	ldr	r1, [pc, #188]	@ (8002a18 <HAL_GPIO_Init+0x2bc>)
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	089b      	lsrs	r3, r3, #2
 8002960:	3302      	adds	r3, #2
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002970:	2b00      	cmp	r3, #0
 8002972:	d006      	beq.n	8002982 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002974:	4b2d      	ldr	r3, [pc, #180]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	492c      	ldr	r1, [pc, #176]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4313      	orrs	r3, r2
 800297e:	608b      	str	r3, [r1, #8]
 8002980:	e006      	b.n	8002990 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002982:	4b2a      	ldr	r3, [pc, #168]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	43db      	mvns	r3, r3
 800298a:	4928      	ldr	r1, [pc, #160]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 800298c:	4013      	ands	r3, r2
 800298e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d006      	beq.n	80029aa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800299c:	4b23      	ldr	r3, [pc, #140]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 800299e:	68da      	ldr	r2, [r3, #12]
 80029a0:	4922      	ldr	r1, [pc, #136]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029a2:	69bb      	ldr	r3, [r7, #24]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	60cb      	str	r3, [r1, #12]
 80029a8:	e006      	b.n	80029b8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80029aa:	4b20      	ldr	r3, [pc, #128]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029ac:	68da      	ldr	r2, [r3, #12]
 80029ae:	69bb      	ldr	r3, [r7, #24]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	491e      	ldr	r1, [pc, #120]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029b4:	4013      	ands	r3, r2
 80029b6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d006      	beq.n	80029d2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80029c4:	4b19      	ldr	r3, [pc, #100]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029c6:	685a      	ldr	r2, [r3, #4]
 80029c8:	4918      	ldr	r1, [pc, #96]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	4313      	orrs	r3, r2
 80029ce:	604b      	str	r3, [r1, #4]
 80029d0:	e006      	b.n	80029e0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80029d2:	4b16      	ldr	r3, [pc, #88]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	43db      	mvns	r3, r3
 80029da:	4914      	ldr	r1, [pc, #80]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029dc:	4013      	ands	r3, r2
 80029de:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d021      	beq.n	8002a30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80029ec:	4b0f      	ldr	r3, [pc, #60]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	490e      	ldr	r1, [pc, #56]	@ (8002a2c <HAL_GPIO_Init+0x2d0>)
 80029f2:	69bb      	ldr	r3, [r7, #24]
 80029f4:	4313      	orrs	r3, r2
 80029f6:	600b      	str	r3, [r1, #0]
 80029f8:	e021      	b.n	8002a3e <HAL_GPIO_Init+0x2e2>
 80029fa:	bf00      	nop
 80029fc:	10320000 	.word	0x10320000
 8002a00:	10310000 	.word	0x10310000
 8002a04:	10220000 	.word	0x10220000
 8002a08:	10210000 	.word	0x10210000
 8002a0c:	10120000 	.word	0x10120000
 8002a10:	10110000 	.word	0x10110000
 8002a14:	40021000 	.word	0x40021000
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40010800 	.word	0x40010800
 8002a20:	40010c00 	.word	0x40010c00
 8002a24:	40011000 	.word	0x40011000
 8002a28:	40011400 	.word	0x40011400
 8002a2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002a30:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <HAL_GPIO_Init+0x304>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	43db      	mvns	r3, r3
 8002a38:	4909      	ldr	r1, [pc, #36]	@ (8002a60 <HAL_GPIO_Init+0x304>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a40:	3301      	adds	r3, #1
 8002a42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f47f ae8e 	bne.w	8002770 <HAL_GPIO_Init+0x14>
  }
}
 8002a54:	bf00      	nop
 8002a56:	bf00      	nop
 8002a58:	372c      	adds	r7, #44	@ 0x2c
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	40010400 	.word	0x40010400

08002a64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689a      	ldr	r2, [r3, #8]
 8002a74:	887b      	ldrh	r3, [r7, #2]
 8002a76:	4013      	ands	r3, r2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d002      	beq.n	8002a82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	73fb      	strb	r3, [r7, #15]
 8002a80:	e001      	b.n	8002a86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002a82:	2300      	movs	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002a86:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3714      	adds	r7, #20
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	807b      	strh	r3, [r7, #2]
 8002a9e:	4613      	mov	r3, r2
 8002aa0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002aa2:	787b      	ldrb	r3, [r7, #1]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002aa8:	887a      	ldrh	r2, [r7, #2]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002aae:	e003      	b.n	8002ab8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ab0:	887b      	ldrh	r3, [r7, #2]
 8002ab2:	041a      	lsls	r2, r3, #16
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	611a      	str	r2, [r3, #16]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bc80      	pop	{r7}
 8002ac0:	4770      	bx	lr
	...

08002ac4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	4603      	mov	r3, r0
 8002acc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002ace:	4b08      	ldr	r3, [pc, #32]	@ (8002af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ad0:	695a      	ldr	r2, [r3, #20]
 8002ad2:	88fb      	ldrh	r3, [r7, #6]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d006      	beq.n	8002ae8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ada:	4a05      	ldr	r2, [pc, #20]	@ (8002af0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002adc:	88fb      	ldrh	r3, [r7, #6]
 8002ade:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002ae0:	88fb      	ldrh	r3, [r7, #6]
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f000 f806 	bl	8002af4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ae8:	bf00      	nop
 8002aea:	3708      	adds	r7, #8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40010400 	.word	0x40010400

08002af4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002afe:	bf00      	nop
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bc80      	pop	{r7}
 8002b06:	4770      	bx	lr

08002b08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e12b      	b.n	8002d72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7ff fa5e 	bl	8001ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2224      	movs	r2, #36	@ 0x24
 8002b38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0201 	bic.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681a      	ldr	r2, [r3, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002b5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002b6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b6c:	f001 f960 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 8002b70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	4a81      	ldr	r2, [pc, #516]	@ (8002d7c <HAL_I2C_Init+0x274>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d807      	bhi.n	8002b8c <HAL_I2C_Init+0x84>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	4a80      	ldr	r2, [pc, #512]	@ (8002d80 <HAL_I2C_Init+0x278>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	bf94      	ite	ls
 8002b84:	2301      	movls	r3, #1
 8002b86:	2300      	movhi	r3, #0
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	e006      	b.n	8002b9a <HAL_I2C_Init+0x92>
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	4a7d      	ldr	r2, [pc, #500]	@ (8002d84 <HAL_I2C_Init+0x27c>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	bf94      	ite	ls
 8002b94:	2301      	movls	r3, #1
 8002b96:	2300      	movhi	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	e0e7      	b.n	8002d72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	4a78      	ldr	r2, [pc, #480]	@ (8002d88 <HAL_I2C_Init+0x280>)
 8002ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8002baa:	0c9b      	lsrs	r3, r3, #18
 8002bac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	685b      	ldr	r3, [r3, #4]
 8002bd0:	4a6a      	ldr	r2, [pc, #424]	@ (8002d7c <HAL_I2C_Init+0x274>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d802      	bhi.n	8002bdc <HAL_I2C_Init+0xd4>
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	e009      	b.n	8002bf0 <HAL_I2C_Init+0xe8>
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002be2:	fb02 f303 	mul.w	r3, r2, r3
 8002be6:	4a69      	ldr	r2, [pc, #420]	@ (8002d8c <HAL_I2C_Init+0x284>)
 8002be8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bec:	099b      	lsrs	r3, r3, #6
 8002bee:	3301      	adds	r3, #1
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	6812      	ldr	r2, [r2, #0]
 8002bf4:	430b      	orrs	r3, r1
 8002bf6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	69db      	ldr	r3, [r3, #28]
 8002bfe:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002c02:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	495c      	ldr	r1, [pc, #368]	@ (8002d7c <HAL_I2C_Init+0x274>)
 8002c0c:	428b      	cmp	r3, r1
 8002c0e:	d819      	bhi.n	8002c44 <HAL_I2C_Init+0x13c>
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	1e59      	subs	r1, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c1e:	1c59      	adds	r1, r3, #1
 8002c20:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002c24:	400b      	ands	r3, r1
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d00a      	beq.n	8002c40 <HAL_I2C_Init+0x138>
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1e59      	subs	r1, r3, #1
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c38:	3301      	adds	r3, #1
 8002c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c3e:	e051      	b.n	8002ce4 <HAL_I2C_Init+0x1dc>
 8002c40:	2304      	movs	r3, #4
 8002c42:	e04f      	b.n	8002ce4 <HAL_I2C_Init+0x1dc>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d111      	bne.n	8002c70 <HAL_I2C_Init+0x168>
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	1e58      	subs	r0, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	005b      	lsls	r3, r3, #1
 8002c58:	440b      	add	r3, r1
 8002c5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	bf0c      	ite	eq
 8002c68:	2301      	moveq	r3, #1
 8002c6a:	2300      	movne	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	e012      	b.n	8002c96 <HAL_I2C_Init+0x18e>
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	1e58      	subs	r0, r3, #1
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	0099      	lsls	r1, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c86:	3301      	adds	r3, #1
 8002c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	bf0c      	ite	eq
 8002c90:	2301      	moveq	r3, #1
 8002c92:	2300      	movne	r3, #0
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d001      	beq.n	8002c9e <HAL_I2C_Init+0x196>
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e022      	b.n	8002ce4 <HAL_I2C_Init+0x1dc>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d10e      	bne.n	8002cc4 <HAL_I2C_Init+0x1bc>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	1e58      	subs	r0, r3, #1
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6859      	ldr	r1, [r3, #4]
 8002cae:	460b      	mov	r3, r1
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	440b      	add	r3, r1
 8002cb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cb8:	3301      	adds	r3, #1
 8002cba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002cc2:	e00f      	b.n	8002ce4 <HAL_I2C_Init+0x1dc>
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1e58      	subs	r0, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6859      	ldr	r1, [r3, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	440b      	add	r3, r1
 8002cd2:	0099      	lsls	r1, r3, #2
 8002cd4:	440b      	add	r3, r1
 8002cd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002cda:	3301      	adds	r3, #1
 8002cdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ce0:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	6809      	ldr	r1, [r1, #0]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69da      	ldr	r2, [r3, #28]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a1b      	ldr	r3, [r3, #32]
 8002cfe:	431a      	orrs	r2, r3
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002d12:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	6911      	ldr	r1, [r2, #16]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68d2      	ldr	r2, [r2, #12]
 8002d1e:	4311      	orrs	r1, r2
 8002d20:	687a      	ldr	r2, [r7, #4]
 8002d22:	6812      	ldr	r2, [r2, #0]
 8002d24:	430b      	orrs	r3, r1
 8002d26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695a      	ldr	r2, [r3, #20]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	699b      	ldr	r3, [r3, #24]
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	430a      	orrs	r2, r1
 8002d42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f042 0201 	orr.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2200      	movs	r2, #0
 8002d66:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	3710      	adds	r7, #16
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd80      	pop	{r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	000186a0 	.word	0x000186a0
 8002d80:	001e847f 	.word	0x001e847f
 8002d84:	003d08ff 	.word	0x003d08ff
 8002d88:	431bde83 	.word	0x431bde83
 8002d8c:	10624dd3 	.word	0x10624dd3

08002d90 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b088      	sub	sp, #32
 8002d94:	af02      	add	r7, sp, #8
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	817b      	strh	r3, [r7, #10]
 8002da0:	4613      	mov	r3, r2
 8002da2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002da4:	f7ff fb9e 	bl	80024e4 <HAL_GetTick>
 8002da8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b20      	cmp	r3, #32
 8002db4:	f040 80e0 	bne.w	8002f78 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2319      	movs	r3, #25
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	4970      	ldr	r1, [pc, #448]	@ (8002f84 <HAL_I2C_Master_Transmit+0x1f4>)
 8002dc2:	68f8      	ldr	r0, [r7, #12]
 8002dc4:	f000 fa92 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002dce:	2302      	movs	r3, #2
 8002dd0:	e0d3      	b.n	8002f7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d101      	bne.n	8002de0 <HAL_I2C_Master_Transmit+0x50>
 8002ddc:	2302      	movs	r3, #2
 8002dde:	e0cc      	b.n	8002f7a <HAL_I2C_Master_Transmit+0x1ea>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2201      	movs	r2, #1
 8002de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d007      	beq.n	8002e06 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f042 0201 	orr.w	r2, r2, #1
 8002e04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	2221      	movs	r2, #33	@ 0x21
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2210      	movs	r2, #16
 8002e22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	893a      	ldrh	r2, [r7, #8]
 8002e36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3c:	b29a      	uxth	r2, r3
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	4a50      	ldr	r2, [pc, #320]	@ (8002f88 <HAL_I2C_Master_Transmit+0x1f8>)
 8002e46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002e48:	8979      	ldrh	r1, [r7, #10]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	6a3a      	ldr	r2, [r7, #32]
 8002e4e:	68f8      	ldr	r0, [r7, #12]
 8002e50:	f000 f9ca 	bl	80031e8 <I2C_MasterRequestWrite>
 8002e54:	4603      	mov	r3, r0
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d001      	beq.n	8002e5e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	e08d      	b.n	8002f7a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	613b      	str	r3, [r7, #16]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	613b      	str	r3, [r7, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	613b      	str	r3, [r7, #16]
 8002e72:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002e74:	e066      	b.n	8002f44 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e76:	697a      	ldr	r2, [r7, #20]
 8002e78:	6a39      	ldr	r1, [r7, #32]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f000 fb50 	bl	8003520 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e80:	4603      	mov	r3, r0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00d      	beq.n	8002ea2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d107      	bne.n	8002e9e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e9c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e06b      	b.n	8002f7a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea6:	781a      	ldrb	r2, [r3, #0]
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb2:	1c5a      	adds	r2, r3, #1
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	b29a      	uxth	r2, r3
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	695b      	ldr	r3, [r3, #20]
 8002ed8:	f003 0304 	and.w	r3, r3, #4
 8002edc:	2b04      	cmp	r3, #4
 8002ede:	d11b      	bne.n	8002f18 <HAL_I2C_Master_Transmit+0x188>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d017      	beq.n	8002f18 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eec:	781a      	ldrb	r2, [r3, #0]
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ef8:	1c5a      	adds	r2, r3, #1
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	3b01      	subs	r3, #1
 8002f06:	b29a      	uxth	r2, r3
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f18:	697a      	ldr	r2, [r7, #20]
 8002f1a:	6a39      	ldr	r1, [r7, #32]
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f000 fb47 	bl	80035b0 <I2C_WaitOnBTFFlagUntilTimeout>
 8002f22:	4603      	mov	r3, r0
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d00d      	beq.n	8002f44 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2c:	2b04      	cmp	r3, #4
 8002f2e:	d107      	bne.n	8002f40 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f3e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e01a      	b.n	8002f7a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d194      	bne.n	8002e76 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	681a      	ldr	r2, [r3, #0]
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002f74:	2300      	movs	r3, #0
 8002f76:	e000      	b.n	8002f7a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002f78:	2302      	movs	r3, #2
  }
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3718      	adds	r7, #24
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	00100002 	.word	0x00100002
 8002f88:	ffff0000 	.word	0xffff0000

08002f8c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	@ 0x28
 8002f90:	af02      	add	r7, sp, #8
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	603b      	str	r3, [r7, #0]
 8002f98:	460b      	mov	r3, r1
 8002f9a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002f9c:	f7ff faa2 	bl	80024e4 <HAL_GetTick>
 8002fa0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b20      	cmp	r3, #32
 8002fb0:	f040 8111 	bne.w	80031d6 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	9300      	str	r3, [sp, #0]
 8002fb8:	2319      	movs	r3, #25
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4988      	ldr	r1, [pc, #544]	@ (80031e0 <HAL_I2C_IsDeviceReady+0x254>)
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 f994 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002fca:	2302      	movs	r3, #2
 8002fcc:	e104      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fd4:	2b01      	cmp	r3, #1
 8002fd6:	d101      	bne.n	8002fdc <HAL_I2C_IsDeviceReady+0x50>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	e0fd      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x24c>
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 0301 	and.w	r3, r3, #1
 8002fee:	2b01      	cmp	r3, #1
 8002ff0:	d007      	beq.n	8003002 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003010:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	2224      	movs	r2, #36	@ 0x24
 8003016:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4a70      	ldr	r2, [pc, #448]	@ (80031e4 <HAL_I2C_IsDeviceReady+0x258>)
 8003024:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003034:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2200      	movs	r2, #0
 800303e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003042:	68f8      	ldr	r0, [r7, #12]
 8003044:	f000 f952 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00d      	beq.n	800306a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003058:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800305c:	d103      	bne.n	8003066 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003064:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003066:	2303      	movs	r3, #3
 8003068:	e0b6      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800306a:	897b      	ldrh	r3, [r7, #10]
 800306c:	b2db      	uxtb	r3, r3
 800306e:	461a      	mov	r2, r3
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003078:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800307a:	f7ff fa33 	bl	80024e4 <HAL_GetTick>
 800307e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	695b      	ldr	r3, [r3, #20]
 8003086:	f003 0302 	and.w	r3, r3, #2
 800308a:	2b02      	cmp	r3, #2
 800308c:	bf0c      	ite	eq
 800308e:	2301      	moveq	r3, #1
 8003090:	2300      	movne	r3, #0
 8003092:	b2db      	uxtb	r3, r3
 8003094:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	695b      	ldr	r3, [r3, #20]
 800309c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030a4:	bf0c      	ite	eq
 80030a6:	2301      	moveq	r3, #1
 80030a8:	2300      	movne	r3, #0
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030ae:	e025      	b.n	80030fc <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80030b0:	f7ff fa18 	bl	80024e4 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d302      	bcc.n	80030c6 <HAL_I2C_IsDeviceReady+0x13a>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d103      	bne.n	80030ce <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	22a0      	movs	r2, #160	@ 0xa0
 80030ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	f003 0302 	and.w	r3, r3, #2
 80030d8:	2b02      	cmp	r3, #2
 80030da:	bf0c      	ite	eq
 80030dc:	2301      	moveq	r3, #1
 80030de:	2300      	movne	r3, #0
 80030e0:	b2db      	uxtb	r3, r3
 80030e2:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030f2:	bf0c      	ite	eq
 80030f4:	2301      	moveq	r3, #1
 80030f6:	2300      	movne	r3, #0
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003102:	b2db      	uxtb	r3, r3
 8003104:	2ba0      	cmp	r3, #160	@ 0xa0
 8003106:	d005      	beq.n	8003114 <HAL_I2C_IsDeviceReady+0x188>
 8003108:	7dfb      	ldrb	r3, [r7, #23]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d102      	bne.n	8003114 <HAL_I2C_IsDeviceReady+0x188>
 800310e:	7dbb      	ldrb	r3, [r7, #22]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d0cd      	beq.n	80030b0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2220      	movs	r2, #32
 8003118:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	695b      	ldr	r3, [r3, #20]
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b02      	cmp	r3, #2
 8003128:	d129      	bne.n	800317e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003138:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800313a:	2300      	movs	r3, #0
 800313c:	613b      	str	r3, [r7, #16]
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	695b      	ldr	r3, [r3, #20]
 8003144:	613b      	str	r3, [r7, #16]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	613b      	str	r3, [r7, #16]
 800314e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	2319      	movs	r3, #25
 8003156:	2201      	movs	r2, #1
 8003158:	4921      	ldr	r1, [pc, #132]	@ (80031e0 <HAL_I2C_IsDeviceReady+0x254>)
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 f8c6 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d001      	beq.n	800316a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e036      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	2220      	movs	r2, #32
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e02c      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800318c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003196:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003198:	69fb      	ldr	r3, [r7, #28]
 800319a:	9300      	str	r3, [sp, #0]
 800319c:	2319      	movs	r3, #25
 800319e:	2201      	movs	r2, #1
 80031a0:	490f      	ldr	r1, [pc, #60]	@ (80031e0 <HAL_I2C_IsDeviceReady+0x254>)
 80031a2:	68f8      	ldr	r0, [r7, #12]
 80031a4:	f000 f8a2 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 80031a8:	4603      	mov	r3, r0
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d001      	beq.n	80031b2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	e012      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	3301      	adds	r3, #1
 80031b6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	429a      	cmp	r2, r3
 80031be:	f4ff af32 	bcc.w	8003026 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2220      	movs	r2, #32
 80031c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e000      	b.n	80031d8 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
  }
}
 80031d8:	4618      	mov	r0, r3
 80031da:	3720      	adds	r7, #32
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	00100002 	.word	0x00100002
 80031e4:	ffff0000 	.word	0xffff0000

080031e8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	607a      	str	r2, [r7, #4]
 80031f2:	603b      	str	r3, [r7, #0]
 80031f4:	460b      	mov	r3, r1
 80031f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031fc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b08      	cmp	r3, #8
 8003202:	d006      	beq.n	8003212 <I2C_MasterRequestWrite+0x2a>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d003      	beq.n	8003212 <I2C_MasterRequestWrite+0x2a>
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003210:	d108      	bne.n	8003224 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003220:	601a      	str	r2, [r3, #0]
 8003222:	e00b      	b.n	800323c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003228:	2b12      	cmp	r3, #18
 800322a:	d107      	bne.n	800323c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800323a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	9300      	str	r3, [sp, #0]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003248:	68f8      	ldr	r0, [r7, #12]
 800324a:	f000 f84f 	bl	80032ec <I2C_WaitOnFlagUntilTimeout>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00d      	beq.n	8003270 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003262:	d103      	bne.n	800326c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800326a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800326c:	2303      	movs	r3, #3
 800326e:	e035      	b.n	80032dc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	691b      	ldr	r3, [r3, #16]
 8003274:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003278:	d108      	bne.n	800328c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800327a:	897b      	ldrh	r3, [r7, #10]
 800327c:	b2db      	uxtb	r3, r3
 800327e:	461a      	mov	r2, r3
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003288:	611a      	str	r2, [r3, #16]
 800328a:	e01b      	b.n	80032c4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800328c:	897b      	ldrh	r3, [r7, #10]
 800328e:	11db      	asrs	r3, r3, #7
 8003290:	b2db      	uxtb	r3, r3
 8003292:	f003 0306 	and.w	r3, r3, #6
 8003296:	b2db      	uxtb	r3, r3
 8003298:	f063 030f 	orn	r3, r3, #15
 800329c:	b2da      	uxtb	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	490e      	ldr	r1, [pc, #56]	@ (80032e4 <I2C_MasterRequestWrite+0xfc>)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 f898 	bl	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d001      	beq.n	80032ba <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e010      	b.n	80032dc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80032ba:	897b      	ldrh	r3, [r7, #10]
 80032bc:	b2da      	uxtb	r2, r3
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4907      	ldr	r1, [pc, #28]	@ (80032e8 <I2C_MasterRequestWrite+0x100>)
 80032ca:	68f8      	ldr	r0, [r7, #12]
 80032cc:	f000 f888 	bl	80033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e000      	b.n	80032dc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3718      	adds	r7, #24
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}
 80032e4:	00010008 	.word	0x00010008
 80032e8:	00010002 	.word	0x00010002

080032ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	60b9      	str	r1, [r7, #8]
 80032f6:	603b      	str	r3, [r7, #0]
 80032f8:	4613      	mov	r3, r2
 80032fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032fc:	e048      	b.n	8003390 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d044      	beq.n	8003390 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003306:	f7ff f8ed 	bl	80024e4 <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	429a      	cmp	r2, r3
 8003314:	d302      	bcc.n	800331c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d139      	bne.n	8003390 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	0c1b      	lsrs	r3, r3, #16
 8003320:	b2db      	uxtb	r3, r3
 8003322:	2b01      	cmp	r3, #1
 8003324:	d10d      	bne.n	8003342 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	695b      	ldr	r3, [r3, #20]
 800332c:	43da      	mvns	r2, r3
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	4013      	ands	r3, r2
 8003332:	b29b      	uxth	r3, r3
 8003334:	2b00      	cmp	r3, #0
 8003336:	bf0c      	ite	eq
 8003338:	2301      	moveq	r3, #1
 800333a:	2300      	movne	r3, #0
 800333c:	b2db      	uxtb	r3, r3
 800333e:	461a      	mov	r2, r3
 8003340:	e00c      	b.n	800335c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	699b      	ldr	r3, [r3, #24]
 8003348:	43da      	mvns	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4013      	ands	r3, r2
 800334e:	b29b      	uxth	r3, r3
 8003350:	2b00      	cmp	r3, #0
 8003352:	bf0c      	ite	eq
 8003354:	2301      	moveq	r3, #1
 8003356:	2300      	movne	r3, #0
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	79fb      	ldrb	r3, [r7, #7]
 800335e:	429a      	cmp	r2, r3
 8003360:	d116      	bne.n	8003390 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	2200      	movs	r2, #0
 8003366:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2220      	movs	r2, #32
 800336c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	2200      	movs	r2, #0
 8003374:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	f043 0220 	orr.w	r2, r3, #32
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e023      	b.n	80033d8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003390:	68bb      	ldr	r3, [r7, #8]
 8003392:	0c1b      	lsrs	r3, r3, #16
 8003394:	b2db      	uxtb	r3, r3
 8003396:	2b01      	cmp	r3, #1
 8003398:	d10d      	bne.n	80033b6 <I2C_WaitOnFlagUntilTimeout+0xca>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	43da      	mvns	r2, r3
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	4013      	ands	r3, r2
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	bf0c      	ite	eq
 80033ac:	2301      	moveq	r3, #1
 80033ae:	2300      	movne	r3, #0
 80033b0:	b2db      	uxtb	r3, r3
 80033b2:	461a      	mov	r2, r3
 80033b4:	e00c      	b.n	80033d0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	43da      	mvns	r2, r3
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	4013      	ands	r3, r2
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	bf0c      	ite	eq
 80033c8:	2301      	moveq	r3, #1
 80033ca:	2300      	movne	r3, #0
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	461a      	mov	r2, r3
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d093      	beq.n	80032fe <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}

080033e0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b084      	sub	sp, #16
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	60f8      	str	r0, [r7, #12]
 80033e8:	60b9      	str	r1, [r7, #8]
 80033ea:	607a      	str	r2, [r7, #4]
 80033ec:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033ee:	e071      	b.n	80034d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	695b      	ldr	r3, [r3, #20]
 80033f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033fa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033fe:	d123      	bne.n	8003448 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800340e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003418:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2220      	movs	r2, #32
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003434:	f043 0204 	orr.w	r2, r3, #4
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e067      	b.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800344e:	d041      	beq.n	80034d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003450:	f7ff f848 	bl	80024e4 <HAL_GetTick>
 8003454:	4602      	mov	r2, r0
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	429a      	cmp	r2, r3
 800345e:	d302      	bcc.n	8003466 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d136      	bne.n	80034d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	0c1b      	lsrs	r3, r3, #16
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b01      	cmp	r3, #1
 800346e:	d10c      	bne.n	800348a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	695b      	ldr	r3, [r3, #20]
 8003476:	43da      	mvns	r2, r3
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	4013      	ands	r3, r2
 800347c:	b29b      	uxth	r3, r3
 800347e:	2b00      	cmp	r3, #0
 8003480:	bf14      	ite	ne
 8003482:	2301      	movne	r3, #1
 8003484:	2300      	moveq	r3, #0
 8003486:	b2db      	uxtb	r3, r3
 8003488:	e00b      	b.n	80034a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	43da      	mvns	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4013      	ands	r3, r2
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf14      	ite	ne
 800349c:	2301      	movne	r3, #1
 800349e:	2300      	moveq	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d016      	beq.n	80034d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2200      	movs	r2, #0
 80034aa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2220      	movs	r2, #32
 80034b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034c0:	f043 0220 	orr.w	r2, r3, #32
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e021      	b.n	8003518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	0c1b      	lsrs	r3, r3, #16
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d10c      	bne.n	80034f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	43da      	mvns	r2, r3
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	4013      	ands	r3, r2
 80034ea:	b29b      	uxth	r3, r3
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	bf14      	ite	ne
 80034f0:	2301      	movne	r3, #1
 80034f2:	2300      	moveq	r3, #0
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	e00b      	b.n	8003510 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	43da      	mvns	r2, r3
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4013      	ands	r3, r2
 8003504:	b29b      	uxth	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	bf14      	ite	ne
 800350a:	2301      	movne	r3, #1
 800350c:	2300      	moveq	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b00      	cmp	r3, #0
 8003512:	f47f af6d 	bne.w	80033f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800352c:	e034      	b.n	8003598 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 f886 	bl	8003640 <I2C_IsAcknowledgeFailed>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e034      	b.n	80035a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d028      	beq.n	8003598 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003546:	f7fe ffcd 	bl	80024e4 <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	68ba      	ldr	r2, [r7, #8]
 8003552:	429a      	cmp	r2, r3
 8003554:	d302      	bcc.n	800355c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d11d      	bne.n	8003598 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003566:	2b80      	cmp	r3, #128	@ 0x80
 8003568:	d016      	beq.n	8003598 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2220      	movs	r2, #32
 8003574:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003584:	f043 0220 	orr.w	r2, r3, #32
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003594:	2301      	movs	r3, #1
 8003596:	e007      	b.n	80035a8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a2:	2b80      	cmp	r3, #128	@ 0x80
 80035a4:	d1c3      	bne.n	800352e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035a6:	2300      	movs	r3, #0
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b084      	sub	sp, #16
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	60b9      	str	r1, [r7, #8]
 80035ba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035bc:	e034      	b.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035be:	68f8      	ldr	r0, [r7, #12]
 80035c0:	f000 f83e 	bl	8003640 <I2C_IsAcknowledgeFailed>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e034      	b.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035d4:	d028      	beq.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035d6:	f7fe ff85 	bl	80024e4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	68ba      	ldr	r2, [r7, #8]
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d302      	bcc.n	80035ec <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035e6:	68bb      	ldr	r3, [r7, #8]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d11d      	bne.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	695b      	ldr	r3, [r3, #20]
 80035f2:	f003 0304 	and.w	r3, r3, #4
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d016      	beq.n	8003628 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2200      	movs	r2, #0
 80035fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003614:	f043 0220 	orr.w	r2, r3, #32
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e007      	b.n	8003638 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	695b      	ldr	r3, [r3, #20]
 800362e:	f003 0304 	and.w	r3, r3, #4
 8003632:	2b04      	cmp	r3, #4
 8003634:	d1c3      	bne.n	80035be <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003652:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003656:	d11b      	bne.n	8003690 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003660:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2200      	movs	r2, #0
 8003666:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2220      	movs	r2, #32
 800366c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367c:	f043 0204 	orr.w	r2, r3, #4
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e000      	b.n	8003692 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	bc80      	pop	{r7}
 800369a:	4770      	bx	lr

0800369c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e272      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 0301 	and.w	r3, r3, #1
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	f000 8087 	beq.w	80037ca <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80036bc:	4b92      	ldr	r3, [pc, #584]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d00c      	beq.n	80036e2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036c8:	4b8f      	ldr	r3, [pc, #572]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f003 030c 	and.w	r3, r3, #12
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d112      	bne.n	80036fa <HAL_RCC_OscConfig+0x5e>
 80036d4:	4b8c      	ldr	r3, [pc, #560]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036e0:	d10b      	bne.n	80036fa <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e2:	4b89      	ldr	r3, [pc, #548]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d06c      	beq.n	80037c8 <HAL_RCC_OscConfig+0x12c>
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d168      	bne.n	80037c8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e24c      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003702:	d106      	bne.n	8003712 <HAL_RCC_OscConfig+0x76>
 8003704:	4b80      	ldr	r3, [pc, #512]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a7f      	ldr	r2, [pc, #508]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 800370a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800370e:	6013      	str	r3, [r2, #0]
 8003710:	e02e      	b.n	8003770 <HAL_RCC_OscConfig+0xd4>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d10c      	bne.n	8003734 <HAL_RCC_OscConfig+0x98>
 800371a:	4b7b      	ldr	r3, [pc, #492]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a7a      	ldr	r2, [pc, #488]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003720:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003724:	6013      	str	r3, [r2, #0]
 8003726:	4b78      	ldr	r3, [pc, #480]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a77      	ldr	r2, [pc, #476]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 800372c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003730:	6013      	str	r3, [r2, #0]
 8003732:	e01d      	b.n	8003770 <HAL_RCC_OscConfig+0xd4>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800373c:	d10c      	bne.n	8003758 <HAL_RCC_OscConfig+0xbc>
 800373e:	4b72      	ldr	r3, [pc, #456]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a71      	ldr	r2, [pc, #452]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003744:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003748:	6013      	str	r3, [r2, #0]
 800374a:	4b6f      	ldr	r3, [pc, #444]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a6e      	ldr	r2, [pc, #440]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e00b      	b.n	8003770 <HAL_RCC_OscConfig+0xd4>
 8003758:	4b6b      	ldr	r3, [pc, #428]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a6a      	ldr	r2, [pc, #424]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 800375e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003762:	6013      	str	r3, [r2, #0]
 8003764:	4b68      	ldr	r3, [pc, #416]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a67      	ldr	r2, [pc, #412]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 800376a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800376e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d013      	beq.n	80037a0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003778:	f7fe feb4 	bl	80024e4 <HAL_GetTick>
 800377c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800377e:	e008      	b.n	8003792 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003780:	f7fe feb0 	bl	80024e4 <HAL_GetTick>
 8003784:	4602      	mov	r2, r0
 8003786:	693b      	ldr	r3, [r7, #16]
 8003788:	1ad3      	subs	r3, r2, r3
 800378a:	2b64      	cmp	r3, #100	@ 0x64
 800378c:	d901      	bls.n	8003792 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e200      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003792:	4b5d      	ldr	r3, [pc, #372]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d0f0      	beq.n	8003780 <HAL_RCC_OscConfig+0xe4>
 800379e:	e014      	b.n	80037ca <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a0:	f7fe fea0 	bl	80024e4 <HAL_GetTick>
 80037a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037a6:	e008      	b.n	80037ba <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037a8:	f7fe fe9c 	bl	80024e4 <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	2b64      	cmp	r3, #100	@ 0x64
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e1ec      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80037ba:	4b53      	ldr	r3, [pc, #332]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d1f0      	bne.n	80037a8 <HAL_RCC_OscConfig+0x10c>
 80037c6:	e000      	b.n	80037ca <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d063      	beq.n	800389e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80037d6:	4b4c      	ldr	r3, [pc, #304]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f003 030c 	and.w	r3, r3, #12
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00b      	beq.n	80037fa <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80037e2:	4b49      	ldr	r3, [pc, #292]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	f003 030c 	and.w	r3, r3, #12
 80037ea:	2b08      	cmp	r3, #8
 80037ec:	d11c      	bne.n	8003828 <HAL_RCC_OscConfig+0x18c>
 80037ee:	4b46      	ldr	r3, [pc, #280]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d116      	bne.n	8003828 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037fa:	4b43      	ldr	r3, [pc, #268]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f003 0302 	and.w	r3, r3, #2
 8003802:	2b00      	cmp	r3, #0
 8003804:	d005      	beq.n	8003812 <HAL_RCC_OscConfig+0x176>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	2b01      	cmp	r3, #1
 800380c:	d001      	beq.n	8003812 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e1c0      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003812:	4b3d      	ldr	r3, [pc, #244]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	695b      	ldr	r3, [r3, #20]
 800381e:	00db      	lsls	r3, r3, #3
 8003820:	4939      	ldr	r1, [pc, #228]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003822:	4313      	orrs	r3, r2
 8003824:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003826:	e03a      	b.n	800389e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	691b      	ldr	r3, [r3, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d020      	beq.n	8003872 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003830:	4b36      	ldr	r3, [pc, #216]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003832:	2201      	movs	r2, #1
 8003834:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003836:	f7fe fe55 	bl	80024e4 <HAL_GetTick>
 800383a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800383c:	e008      	b.n	8003850 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800383e:	f7fe fe51 	bl	80024e4 <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	693b      	ldr	r3, [r7, #16]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	2b02      	cmp	r3, #2
 800384a:	d901      	bls.n	8003850 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800384c:	2303      	movs	r3, #3
 800384e:	e1a1      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003850:	4b2d      	ldr	r3, [pc, #180]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0f0      	beq.n	800383e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800385c:	4b2a      	ldr	r3, [pc, #168]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	695b      	ldr	r3, [r3, #20]
 8003868:	00db      	lsls	r3, r3, #3
 800386a:	4927      	ldr	r1, [pc, #156]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 800386c:	4313      	orrs	r3, r2
 800386e:	600b      	str	r3, [r1, #0]
 8003870:	e015      	b.n	800389e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003872:	4b26      	ldr	r3, [pc, #152]	@ (800390c <HAL_RCC_OscConfig+0x270>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fe fe34 	bl	80024e4 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003880:	f7fe fe30 	bl	80024e4 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e180      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003892:	4b1d      	ldr	r3, [pc, #116]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0308 	and.w	r3, r3, #8
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d03a      	beq.n	8003920 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d019      	beq.n	80038e6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038b2:	4b17      	ldr	r3, [pc, #92]	@ (8003910 <HAL_RCC_OscConfig+0x274>)
 80038b4:	2201      	movs	r2, #1
 80038b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038b8:	f7fe fe14 	bl	80024e4 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038be:	e008      	b.n	80038d2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c0:	f7fe fe10 	bl	80024e4 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d901      	bls.n	80038d2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e160      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d2:	4b0d      	ldr	r3, [pc, #52]	@ (8003908 <HAL_RCC_OscConfig+0x26c>)
 80038d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d6:	f003 0302 	and.w	r3, r3, #2
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d0f0      	beq.n	80038c0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80038de:	2001      	movs	r0, #1
 80038e0:	f000 face 	bl	8003e80 <RCC_Delay>
 80038e4:	e01c      	b.n	8003920 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e6:	4b0a      	ldr	r3, [pc, #40]	@ (8003910 <HAL_RCC_OscConfig+0x274>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038ec:	f7fe fdfa 	bl	80024e4 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038f2:	e00f      	b.n	8003914 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f4:	f7fe fdf6 	bl	80024e4 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d908      	bls.n	8003914 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e146      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
 8003906:	bf00      	nop
 8003908:	40021000 	.word	0x40021000
 800390c:	42420000 	.word	0x42420000
 8003910:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003914:	4b92      	ldr	r3, [pc, #584]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	f003 0302 	and.w	r3, r3, #2
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1e9      	bne.n	80038f4 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0304 	and.w	r3, r3, #4
 8003928:	2b00      	cmp	r3, #0
 800392a:	f000 80a6 	beq.w	8003a7a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800392e:	2300      	movs	r3, #0
 8003930:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003932:	4b8b      	ldr	r3, [pc, #556]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003934:	69db      	ldr	r3, [r3, #28]
 8003936:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10d      	bne.n	800395a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800393e:	4b88      	ldr	r3, [pc, #544]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003940:	69db      	ldr	r3, [r3, #28]
 8003942:	4a87      	ldr	r2, [pc, #540]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003944:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003948:	61d3      	str	r3, [r2, #28]
 800394a:	4b85      	ldr	r3, [pc, #532]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 800394c:	69db      	ldr	r3, [r3, #28]
 800394e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003956:	2301      	movs	r3, #1
 8003958:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800395a:	4b82      	ldr	r3, [pc, #520]	@ (8003b64 <HAL_RCC_OscConfig+0x4c8>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003962:	2b00      	cmp	r3, #0
 8003964:	d118      	bne.n	8003998 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003966:	4b7f      	ldr	r3, [pc, #508]	@ (8003b64 <HAL_RCC_OscConfig+0x4c8>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a7e      	ldr	r2, [pc, #504]	@ (8003b64 <HAL_RCC_OscConfig+0x4c8>)
 800396c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003970:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003972:	f7fe fdb7 	bl	80024e4 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800397a:	f7fe fdb3 	bl	80024e4 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b64      	cmp	r3, #100	@ 0x64
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e103      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800398c:	4b75      	ldr	r3, [pc, #468]	@ (8003b64 <HAL_RCC_OscConfig+0x4c8>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d0f0      	beq.n	800397a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d106      	bne.n	80039ae <HAL_RCC_OscConfig+0x312>
 80039a0:	4b6f      	ldr	r3, [pc, #444]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	4a6e      	ldr	r2, [pc, #440]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	6213      	str	r3, [r2, #32]
 80039ac:	e02d      	b.n	8003a0a <HAL_RCC_OscConfig+0x36e>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10c      	bne.n	80039d0 <HAL_RCC_OscConfig+0x334>
 80039b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	4a69      	ldr	r2, [pc, #420]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039bc:	f023 0301 	bic.w	r3, r3, #1
 80039c0:	6213      	str	r3, [r2, #32]
 80039c2:	4b67      	ldr	r3, [pc, #412]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	4a66      	ldr	r2, [pc, #408]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039c8:	f023 0304 	bic.w	r3, r3, #4
 80039cc:	6213      	str	r3, [r2, #32]
 80039ce:	e01c      	b.n	8003a0a <HAL_RCC_OscConfig+0x36e>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	2b05      	cmp	r3, #5
 80039d6:	d10c      	bne.n	80039f2 <HAL_RCC_OscConfig+0x356>
 80039d8:	4b61      	ldr	r3, [pc, #388]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039da:	6a1b      	ldr	r3, [r3, #32]
 80039dc:	4a60      	ldr	r2, [pc, #384]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039de:	f043 0304 	orr.w	r3, r3, #4
 80039e2:	6213      	str	r3, [r2, #32]
 80039e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	4a5d      	ldr	r2, [pc, #372]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	f043 0301 	orr.w	r3, r3, #1
 80039ee:	6213      	str	r3, [r2, #32]
 80039f0:	e00b      	b.n	8003a0a <HAL_RCC_OscConfig+0x36e>
 80039f2:	4b5b      	ldr	r3, [pc, #364]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	4a5a      	ldr	r2, [pc, #360]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 80039f8:	f023 0301 	bic.w	r3, r3, #1
 80039fc:	6213      	str	r3, [r2, #32]
 80039fe:	4b58      	ldr	r3, [pc, #352]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	4a57      	ldr	r2, [pc, #348]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003a04:	f023 0304 	bic.w	r3, r3, #4
 8003a08:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d015      	beq.n	8003a3e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a12:	f7fe fd67 	bl	80024e4 <HAL_GetTick>
 8003a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a18:	e00a      	b.n	8003a30 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a1a:	f7fe fd63 	bl	80024e4 <HAL_GetTick>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d901      	bls.n	8003a30 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003a2c:	2303      	movs	r3, #3
 8003a2e:	e0b1      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a30:	4b4b      	ldr	r3, [pc, #300]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d0ee      	beq.n	8003a1a <HAL_RCC_OscConfig+0x37e>
 8003a3c:	e014      	b.n	8003a68 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a3e:	f7fe fd51 	bl	80024e4 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a44:	e00a      	b.n	8003a5c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a46:	f7fe fd4d 	bl	80024e4 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d901      	bls.n	8003a5c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003a58:	2303      	movs	r3, #3
 8003a5a:	e09b      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a5c:	4b40      	ldr	r3, [pc, #256]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003a5e:	6a1b      	ldr	r3, [r3, #32]
 8003a60:	f003 0302 	and.w	r3, r3, #2
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d1ee      	bne.n	8003a46 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003a68:	7dfb      	ldrb	r3, [r7, #23]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d105      	bne.n	8003a7a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a6e:	4b3c      	ldr	r3, [pc, #240]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003a70:	69db      	ldr	r3, [r3, #28]
 8003a72:	4a3b      	ldr	r2, [pc, #236]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003a74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a78:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	f000 8087 	beq.w	8003b92 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a84:	4b36      	ldr	r3, [pc, #216]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	f003 030c 	and.w	r3, r3, #12
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d061      	beq.n	8003b54 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	69db      	ldr	r3, [r3, #28]
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d146      	bne.n	8003b26 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a98:	4b33      	ldr	r3, [pc, #204]	@ (8003b68 <HAL_RCC_OscConfig+0x4cc>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a9e:	f7fe fd21 	bl	80024e4 <HAL_GetTick>
 8003aa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aa4:	e008      	b.n	8003ab8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003aa6:	f7fe fd1d 	bl	80024e4 <HAL_GetTick>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	1ad3      	subs	r3, r2, r3
 8003ab0:	2b02      	cmp	r3, #2
 8003ab2:	d901      	bls.n	8003ab8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003ab4:	2303      	movs	r3, #3
 8003ab6:	e06d      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003ab8:	4b29      	ldr	r3, [pc, #164]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d1f0      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	6a1b      	ldr	r3, [r3, #32]
 8003ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003acc:	d108      	bne.n	8003ae0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ace:	4b24      	ldr	r3, [pc, #144]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	4921      	ldr	r1, [pc, #132]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003adc:	4313      	orrs	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a19      	ldr	r1, [r3, #32]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003af0:	430b      	orrs	r3, r1
 8003af2:	491b      	ldr	r1, [pc, #108]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003af4:	4313      	orrs	r3, r2
 8003af6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003af8:	4b1b      	ldr	r3, [pc, #108]	@ (8003b68 <HAL_RCC_OscConfig+0x4cc>)
 8003afa:	2201      	movs	r2, #1
 8003afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003afe:	f7fe fcf1 	bl	80024e4 <HAL_GetTick>
 8003b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b04:	e008      	b.n	8003b18 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b06:	f7fe fced 	bl	80024e4 <HAL_GetTick>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	693b      	ldr	r3, [r7, #16]
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	2b02      	cmp	r3, #2
 8003b12:	d901      	bls.n	8003b18 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003b14:	2303      	movs	r3, #3
 8003b16:	e03d      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003b18:	4b11      	ldr	r3, [pc, #68]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d0f0      	beq.n	8003b06 <HAL_RCC_OscConfig+0x46a>
 8003b24:	e035      	b.n	8003b92 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b26:	4b10      	ldr	r3, [pc, #64]	@ (8003b68 <HAL_RCC_OscConfig+0x4cc>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b2c:	f7fe fcda 	bl	80024e4 <HAL_GetTick>
 8003b30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b34:	f7fe fcd6 	bl	80024e4 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d901      	bls.n	8003b46 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e026      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b46:	4b06      	ldr	r3, [pc, #24]	@ (8003b60 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d1f0      	bne.n	8003b34 <HAL_RCC_OscConfig+0x498>
 8003b52:	e01e      	b.n	8003b92 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	69db      	ldr	r3, [r3, #28]
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d107      	bne.n	8003b6c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e019      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
 8003b60:	40021000 	.word	0x40021000
 8003b64:	40007000 	.word	0x40007000
 8003b68:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <HAL_RCC_OscConfig+0x500>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a1b      	ldr	r3, [r3, #32]
 8003b7c:	429a      	cmp	r2, r3
 8003b7e:	d106      	bne.n	8003b8e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d001      	beq.n	8003b92 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e000      	b.n	8003b94 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	3718      	adds	r7, #24
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	40021000 	.word	0x40021000

08003ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b084      	sub	sp, #16
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
 8003ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d101      	bne.n	8003bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e0d0      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003bb4:	4b6a      	ldr	r3, [pc, #424]	@ (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	683a      	ldr	r2, [r7, #0]
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d910      	bls.n	8003be4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bc2:	4b67      	ldr	r3, [pc, #412]	@ (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f023 0207 	bic.w	r2, r3, #7
 8003bca:	4965      	ldr	r1, [pc, #404]	@ (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	4313      	orrs	r3, r2
 8003bd0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bd2:	4b63      	ldr	r3, [pc, #396]	@ (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0307 	and.w	r3, r3, #7
 8003bda:	683a      	ldr	r2, [r7, #0]
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d001      	beq.n	8003be4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	e0b8      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d020      	beq.n	8003c32 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d005      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003bfc:	4b59      	ldr	r3, [pc, #356]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	4a58      	ldr	r2, [pc, #352]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c02:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003c06:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0308 	and.w	r3, r3, #8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d005      	beq.n	8003c20 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003c14:	4b53      	ldr	r3, [pc, #332]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	4a52      	ldr	r2, [pc, #328]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c1a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003c1e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c20:	4b50      	ldr	r3, [pc, #320]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	494d      	ldr	r1, [pc, #308]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0301 	and.w	r3, r3, #1
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d040      	beq.n	8003cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	d107      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c46:	4b47      	ldr	r3, [pc, #284]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d115      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c52:	2301      	movs	r3, #1
 8003c54:	e07f      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	2b02      	cmp	r3, #2
 8003c5c:	d107      	bne.n	8003c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c5e:	4b41      	ldr	r3, [pc, #260]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d109      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e073      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c6e:	4b3d      	ldr	r3, [pc, #244]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0302 	and.w	r3, r3, #2
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d101      	bne.n	8003c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e06b      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c7e:	4b39      	ldr	r3, [pc, #228]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f023 0203 	bic.w	r2, r3, #3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	4936      	ldr	r1, [pc, #216]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003c90:	f7fe fc28 	bl	80024e4 <HAL_GetTick>
 8003c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c96:	e00a      	b.n	8003cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c98:	f7fe fc24 	bl	80024e4 <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d901      	bls.n	8003cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003caa:	2303      	movs	r3, #3
 8003cac:	e053      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003cae:	4b2d      	ldr	r3, [pc, #180]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	f003 020c 	and.w	r2, r3, #12
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d1eb      	bne.n	8003c98 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003cc0:	4b27      	ldr	r3, [pc, #156]	@ (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f003 0307 	and.w	r3, r3, #7
 8003cc8:	683a      	ldr	r2, [r7, #0]
 8003cca:	429a      	cmp	r2, r3
 8003ccc:	d210      	bcs.n	8003cf0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003cce:	4b24      	ldr	r3, [pc, #144]	@ (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f023 0207 	bic.w	r2, r3, #7
 8003cd6:	4922      	ldr	r1, [pc, #136]	@ (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cde:	4b20      	ldr	r3, [pc, #128]	@ (8003d60 <HAL_RCC_ClockConfig+0x1c0>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0307 	and.w	r3, r3, #7
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d001      	beq.n	8003cf0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	e032      	b.n	8003d56 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d008      	beq.n	8003d0e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003cfc:	4b19      	ldr	r3, [pc, #100]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	4916      	ldr	r1, [pc, #88]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0308 	and.w	r3, r3, #8
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d009      	beq.n	8003d2e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003d1a:	4b12      	ldr	r3, [pc, #72]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	490e      	ldr	r1, [pc, #56]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003d2e:	f000 f821 	bl	8003d74 <HAL_RCC_GetSysClockFreq>
 8003d32:	4602      	mov	r2, r0
 8003d34:	4b0b      	ldr	r3, [pc, #44]	@ (8003d64 <HAL_RCC_ClockConfig+0x1c4>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	091b      	lsrs	r3, r3, #4
 8003d3a:	f003 030f 	and.w	r3, r3, #15
 8003d3e:	490a      	ldr	r1, [pc, #40]	@ (8003d68 <HAL_RCC_ClockConfig+0x1c8>)
 8003d40:	5ccb      	ldrb	r3, [r1, r3]
 8003d42:	fa22 f303 	lsr.w	r3, r2, r3
 8003d46:	4a09      	ldr	r2, [pc, #36]	@ (8003d6c <HAL_RCC_ClockConfig+0x1cc>)
 8003d48:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003d4a:	4b09      	ldr	r3, [pc, #36]	@ (8003d70 <HAL_RCC_ClockConfig+0x1d0>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f7fe fb86 	bl	8002460 <HAL_InitTick>

  return HAL_OK;
 8003d54:	2300      	movs	r3, #0
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	3710      	adds	r7, #16
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	bf00      	nop
 8003d60:	40022000 	.word	0x40022000
 8003d64:	40021000 	.word	0x40021000
 8003d68:	080073b8 	.word	0x080073b8
 8003d6c:	20000014 	.word	0x20000014
 8003d70:	20000018 	.word	0x20000018

08003d74 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b087      	sub	sp, #28
 8003d78:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	60fb      	str	r3, [r7, #12]
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	2300      	movs	r3, #0
 8003d84:	617b      	str	r3, [r7, #20]
 8003d86:	2300      	movs	r3, #0
 8003d88:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003d8e:	4b1e      	ldr	r3, [pc, #120]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x94>)
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	f003 030c 	and.w	r3, r3, #12
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	d002      	beq.n	8003da4 <HAL_RCC_GetSysClockFreq+0x30>
 8003d9e:	2b08      	cmp	r3, #8
 8003da0:	d003      	beq.n	8003daa <HAL_RCC_GetSysClockFreq+0x36>
 8003da2:	e027      	b.n	8003df4 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003da4:	4b19      	ldr	r3, [pc, #100]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003da6:	613b      	str	r3, [r7, #16]
      break;
 8003da8:	e027      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	0c9b      	lsrs	r3, r3, #18
 8003dae:	f003 030f 	and.w	r3, r3, #15
 8003db2:	4a17      	ldr	r2, [pc, #92]	@ (8003e10 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003db4:	5cd3      	ldrb	r3, [r2, r3]
 8003db6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d010      	beq.n	8003de4 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003dc2:	4b11      	ldr	r3, [pc, #68]	@ (8003e08 <HAL_RCC_GetSysClockFreq+0x94>)
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	0c5b      	lsrs	r3, r3, #17
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	4a11      	ldr	r2, [pc, #68]	@ (8003e14 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003dce:	5cd3      	ldrb	r3, [r2, r3]
 8003dd0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a0d      	ldr	r2, [pc, #52]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003dd6:	fb03 f202 	mul.w	r2, r3, r2
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	e004      	b.n	8003dee <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a0c      	ldr	r2, [pc, #48]	@ (8003e18 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003de8:	fb02 f303 	mul.w	r3, r2, r3
 8003dec:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	613b      	str	r3, [r7, #16]
      break;
 8003df2:	e002      	b.n	8003dfa <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003df4:	4b05      	ldr	r3, [pc, #20]	@ (8003e0c <HAL_RCC_GetSysClockFreq+0x98>)
 8003df6:	613b      	str	r3, [r7, #16]
      break;
 8003df8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dfa:	693b      	ldr	r3, [r7, #16]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	371c      	adds	r7, #28
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bc80      	pop	{r7}
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40021000 	.word	0x40021000
 8003e0c:	007a1200 	.word	0x007a1200
 8003e10:	080073d0 	.word	0x080073d0
 8003e14:	080073e0 	.word	0x080073e0
 8003e18:	003d0900 	.word	0x003d0900

08003e1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e20:	4b02      	ldr	r3, [pc, #8]	@ (8003e2c <HAL_RCC_GetHCLKFreq+0x10>)
 8003e22:	681b      	ldr	r3, [r3, #0]
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bc80      	pop	{r7}
 8003e2a:	4770      	bx	lr
 8003e2c:	20000014 	.word	0x20000014

08003e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e34:	f7ff fff2 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b05      	ldr	r3, [pc, #20]	@ (8003e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4903      	ldr	r1, [pc, #12]	@ (8003e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40021000 	.word	0x40021000
 8003e54:	080073c8 	.word	0x080073c8

08003e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003e5c:	f7ff ffde 	bl	8003e1c <HAL_RCC_GetHCLKFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b05      	ldr	r3, [pc, #20]	@ (8003e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	0adb      	lsrs	r3, r3, #11
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4903      	ldr	r1, [pc, #12]	@ (8003e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40021000 	.word	0x40021000
 8003e7c:	080073c8 	.word	0x080073c8

08003e80 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b085      	sub	sp, #20
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003e88:	4b0a      	ldr	r3, [pc, #40]	@ (8003eb4 <RCC_Delay+0x34>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a0a      	ldr	r2, [pc, #40]	@ (8003eb8 <RCC_Delay+0x38>)
 8003e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8003e92:	0a5b      	lsrs	r3, r3, #9
 8003e94:	687a      	ldr	r2, [r7, #4]
 8003e96:	fb02 f303 	mul.w	r3, r2, r3
 8003e9a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003e9c:	bf00      	nop
  }
  while (Delay --);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	1e5a      	subs	r2, r3, #1
 8003ea2:	60fa      	str	r2, [r7, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f9      	bne.n	8003e9c <RCC_Delay+0x1c>
}
 8003ea8:	bf00      	nop
 8003eaa:	bf00      	nop
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr
 8003eb4:	20000014 	.word	0x20000014
 8003eb8:	10624dd3 	.word	0x10624dd3

08003ebc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b082      	sub	sp, #8
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e041      	b.n	8003f52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ed4:	b2db      	uxtb	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d106      	bne.n	8003ee8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ee2:	6878      	ldr	r0, [r7, #4]
 8003ee4:	f7fe f8c4 	bl	8002070 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2202      	movs	r2, #2
 8003eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	3304      	adds	r3, #4
 8003ef8:	4619      	mov	r1, r3
 8003efa:	4610      	mov	r0, r2
 8003efc:	f000 fadc 	bl	80044b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2201      	movs	r2, #1
 8003f04:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2201      	movs	r2, #1
 8003f1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	2201      	movs	r2, #1
 8003f3c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}
	...

08003f5c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b085      	sub	sp, #20
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d001      	beq.n	8003f74 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e032      	b.n	8003fda <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2202      	movs	r2, #2
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a18      	ldr	r2, [pc, #96]	@ (8003fe4 <HAL_TIM_Base_Start+0x88>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00e      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x48>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f8e:	d009      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x48>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a14      	ldr	r2, [pc, #80]	@ (8003fe8 <HAL_TIM_Base_Start+0x8c>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d004      	beq.n	8003fa4 <HAL_TIM_Base_Start+0x48>
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a13      	ldr	r2, [pc, #76]	@ (8003fec <HAL_TIM_Base_Start+0x90>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d111      	bne.n	8003fc8 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	f003 0307 	and.w	r3, r3, #7
 8003fae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	d010      	beq.n	8003fd8 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f042 0201 	orr.w	r2, r2, #1
 8003fc4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003fc6:	e007      	b.n	8003fd8 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f042 0201 	orr.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	bc80      	pop	{r7}
 8003fe2:	4770      	bx	lr
 8003fe4:	40012c00 	.word	0x40012c00
 8003fe8:	40000400 	.word	0x40000400
 8003fec:	40000800 	.word	0x40000800

08003ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b085      	sub	sp, #20
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ffe:	b2db      	uxtb	r3, r3
 8004000:	2b01      	cmp	r3, #1
 8004002:	d001      	beq.n	8004008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004004:	2301      	movs	r3, #1
 8004006:	e03a      	b.n	800407e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2202      	movs	r2, #2
 800400c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	68da      	ldr	r2, [r3, #12]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f042 0201 	orr.w	r2, r2, #1
 800401e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a18      	ldr	r2, [pc, #96]	@ (8004088 <HAL_TIM_Base_Start_IT+0x98>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d00e      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x58>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004032:	d009      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x58>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a14      	ldr	r2, [pc, #80]	@ (800408c <HAL_TIM_Base_Start_IT+0x9c>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d004      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x58>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a13      	ldr	r2, [pc, #76]	@ (8004090 <HAL_TIM_Base_Start_IT+0xa0>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d111      	bne.n	800406c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2b06      	cmp	r3, #6
 8004058:	d010      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	681a      	ldr	r2, [r3, #0]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f042 0201 	orr.w	r2, r2, #1
 8004068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406a:	e007      	b.n	800407c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3714      	adds	r7, #20
 8004082:	46bd      	mov	sp, r7
 8004084:	bc80      	pop	{r7}
 8004086:	4770      	bx	lr
 8004088:	40012c00 	.word	0x40012c00
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800

08004094 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68da      	ldr	r2, [r3, #12]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f022 0201 	bic.w	r2, r2, #1
 80040aa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	6a1a      	ldr	r2, [r3, #32]
 80040b2:	f241 1311 	movw	r3, #4369	@ 0x1111
 80040b6:	4013      	ands	r3, r2
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d10f      	bne.n	80040dc <HAL_TIM_Base_Stop_IT+0x48>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6a1a      	ldr	r2, [r3, #32]
 80040c2:	f240 4344 	movw	r3, #1092	@ 0x444
 80040c6:	4013      	ands	r3, r2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d107      	bne.n	80040dc <HAL_TIM_Base_Stop_IT+0x48>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f022 0201 	bic.w	r2, r2, #1
 80040da:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2201      	movs	r2, #1
 80040e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr

080040f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d020      	beq.n	8004154 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d01b      	beq.n	8004154 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f06f 0202 	mvn.w	r2, #2
 8004124:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2201      	movs	r2, #1
 800412a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	f003 0303 	and.w	r3, r3, #3
 8004136:	2b00      	cmp	r3, #0
 8004138:	d003      	beq.n	8004142 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f9a1 	bl	8004482 <HAL_TIM_IC_CaptureCallback>
 8004140:	e005      	b.n	800414e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f994 	bl	8004470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f9a3 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	f003 0304 	and.w	r3, r3, #4
 800415a:	2b00      	cmp	r3, #0
 800415c:	d020      	beq.n	80041a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f003 0304 	and.w	r3, r3, #4
 8004164:	2b00      	cmp	r3, #0
 8004166:	d01b      	beq.n	80041a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	f06f 0204 	mvn.w	r2, #4
 8004170:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2202      	movs	r2, #2
 8004176:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004182:	2b00      	cmp	r3, #0
 8004184:	d003      	beq.n	800418e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004186:	6878      	ldr	r0, [r7, #4]
 8004188:	f000 f97b 	bl	8004482 <HAL_TIM_IC_CaptureCallback>
 800418c:	e005      	b.n	800419a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800418e:	6878      	ldr	r0, [r7, #4]
 8004190:	f000 f96e 	bl	8004470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004194:	6878      	ldr	r0, [r7, #4]
 8004196:	f000 f97d 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d020      	beq.n	80041ec <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f003 0308 	and.w	r3, r3, #8
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d01b      	beq.n	80041ec <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f06f 0208 	mvn.w	r2, #8
 80041bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2204      	movs	r2, #4
 80041c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 0303 	and.w	r3, r3, #3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d003      	beq.n	80041da <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f955 	bl	8004482 <HAL_TIM_IC_CaptureCallback>
 80041d8:	e005      	b.n	80041e6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041da:	6878      	ldr	r0, [r7, #4]
 80041dc:	f000 f948 	bl	8004470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 f957 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	f003 0310 	and.w	r3, r3, #16
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d020      	beq.n	8004238 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	f003 0310 	and.w	r3, r3, #16
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d01b      	beq.n	8004238 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f06f 0210 	mvn.w	r2, #16
 8004208:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2208      	movs	r2, #8
 800420e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800421e:	6878      	ldr	r0, [r7, #4]
 8004220:	f000 f92f 	bl	8004482 <HAL_TIM_IC_CaptureCallback>
 8004224:	e005      	b.n	8004232 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004226:	6878      	ldr	r0, [r7, #4]
 8004228:	f000 f922 	bl	8004470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	f000 f931 	bl	8004494 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2200      	movs	r2, #0
 8004236:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d00c      	beq.n	800425c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	f003 0301 	and.w	r3, r3, #1
 8004248:	2b00      	cmp	r3, #0
 800424a:	d007      	beq.n	800425c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0201 	mvn.w	r2, #1
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f901 	bl	800445e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00c      	beq.n	8004280 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800426c:	2b00      	cmp	r3, #0
 800426e:	d007      	beq.n	8004280 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	f000 fa87 	bl	800478e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004286:	2b00      	cmp	r3, #0
 8004288:	d00c      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d007      	beq.n	80042a4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800429c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f000 f901 	bl	80044a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f003 0320 	and.w	r3, r3, #32
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d00c      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	f003 0320 	and.w	r3, r3, #32
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f06f 0220 	mvn.w	r2, #32
 80042c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f000 fa5a 	bl	800477c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042c8:	bf00      	nop
 80042ca:	3710      	adds	r7, #16
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIM_ConfigClockSource+0x1c>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e0b4      	b.n	8004456 <HAL_TIM_ConfigClockSource+0x186>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800430a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004324:	d03e      	beq.n	80043a4 <HAL_TIM_ConfigClockSource+0xd4>
 8004326:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800432a:	f200 8087 	bhi.w	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800432e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004332:	f000 8086 	beq.w	8004442 <HAL_TIM_ConfigClockSource+0x172>
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800433a:	d87f      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b70      	cmp	r3, #112	@ 0x70
 800433e:	d01a      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0xa6>
 8004340:	2b70      	cmp	r3, #112	@ 0x70
 8004342:	d87b      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b60      	cmp	r3, #96	@ 0x60
 8004346:	d050      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x11a>
 8004348:	2b60      	cmp	r3, #96	@ 0x60
 800434a:	d877      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b50      	cmp	r3, #80	@ 0x50
 800434e:	d03c      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0xfa>
 8004350:	2b50      	cmp	r3, #80	@ 0x50
 8004352:	d873      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b40      	cmp	r3, #64	@ 0x40
 8004356:	d058      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x13a>
 8004358:	2b40      	cmp	r3, #64	@ 0x40
 800435a:	d86f      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b30      	cmp	r3, #48	@ 0x30
 800435e:	d064      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004360:	2b30      	cmp	r3, #48	@ 0x30
 8004362:	d86b      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b20      	cmp	r3, #32
 8004366:	d060      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004368:	2b20      	cmp	r3, #32
 800436a:	d867      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d05c      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004370:	2b10      	cmp	r3, #16
 8004372:	d05a      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004374:	e062      	b.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004386:	f000 f97c 	bl	8004682 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	609a      	str	r2, [r3, #8]
      break;
 80043a2:	e04f      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043b4:	f000 f965 	bl	8004682 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043c6:	609a      	str	r2, [r3, #8]
      break;
 80043c8:	e03c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 f8dc 	bl	8004594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2150      	movs	r1, #80	@ 0x50
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 f933 	bl	800464e <TIM_ITRx_SetConfig>
      break;
 80043e8:	e02c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 f8fa 	bl	80045f0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2160      	movs	r1, #96	@ 0x60
 8004402:	4618      	mov	r0, r3
 8004404:	f000 f923 	bl	800464e <TIM_ITRx_SetConfig>
      break;
 8004408:	e01c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004416:	461a      	mov	r2, r3
 8004418:	f000 f8bc 	bl	8004594 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2140      	movs	r1, #64	@ 0x40
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f913 	bl	800464e <TIM_ITRx_SetConfig>
      break;
 8004428:	e00c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f000 f90a 	bl	800464e <TIM_ITRx_SetConfig>
      break;
 800443a:	e003      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
      break;
 8004440:	e000      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	bc80      	pop	{r7}
 800446e:	4770      	bx	lr

08004470 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	bc80      	pop	{r7}
 8004480:	4770      	bx	lr

08004482 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004482:	b480      	push	{r7}
 8004484:	b083      	sub	sp, #12
 8004486:	af00      	add	r7, sp, #0
 8004488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800448a:	bf00      	nop
 800448c:	370c      	adds	r7, #12
 800448e:	46bd      	mov	sp, r7
 8004490:	bc80      	pop	{r7}
 8004492:	4770      	bx	lr

08004494 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800449c:	bf00      	nop
 800449e:	370c      	adds	r7, #12
 80044a0:	46bd      	mov	sp, r7
 80044a2:	bc80      	pop	{r7}
 80044a4:	4770      	bx	lr

080044a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b083      	sub	sp, #12
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044ae:	bf00      	nop
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a2f      	ldr	r2, [pc, #188]	@ (8004588 <TIM_Base_SetConfig+0xd0>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d00b      	beq.n	80044e8 <TIM_Base_SetConfig+0x30>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044d6:	d007      	beq.n	80044e8 <TIM_Base_SetConfig+0x30>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a2c      	ldr	r2, [pc, #176]	@ (800458c <TIM_Base_SetConfig+0xd4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_Base_SetConfig+0x30>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a2b      	ldr	r2, [pc, #172]	@ (8004590 <TIM_Base_SetConfig+0xd8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d108      	bne.n	80044fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a22      	ldr	r2, [pc, #136]	@ (8004588 <TIM_Base_SetConfig+0xd0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00b      	beq.n	800451a <TIM_Base_SetConfig+0x62>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004508:	d007      	beq.n	800451a <TIM_Base_SetConfig+0x62>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a1f      	ldr	r2, [pc, #124]	@ (800458c <TIM_Base_SetConfig+0xd4>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d003      	beq.n	800451a <TIM_Base_SetConfig+0x62>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a1e      	ldr	r2, [pc, #120]	@ (8004590 <TIM_Base_SetConfig+0xd8>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d108      	bne.n	800452c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004520:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	68db      	ldr	r3, [r3, #12]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	4313      	orrs	r3, r2
 800452a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	4313      	orrs	r3, r2
 8004538:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004540:	683b      	ldr	r3, [r7, #0]
 8004542:	689a      	ldr	r2, [r3, #8]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a0d      	ldr	r2, [pc, #52]	@ (8004588 <TIM_Base_SetConfig+0xd0>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d103      	bne.n	8004560 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	691a      	ldr	r2, [r3, #16]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d005      	beq.n	800457e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	691b      	ldr	r3, [r3, #16]
 8004576:	f023 0201 	bic.w	r2, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	611a      	str	r2, [r3, #16]
  }
}
 800457e:	bf00      	nop
 8004580:	3714      	adds	r7, #20
 8004582:	46bd      	mov	sp, r7
 8004584:	bc80      	pop	{r7}
 8004586:	4770      	bx	lr
 8004588:	40012c00 	.word	0x40012c00
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800

08004594 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004594:	b480      	push	{r7}
 8004596:	b087      	sub	sp, #28
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	6a1b      	ldr	r3, [r3, #32]
 80045a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	6a1b      	ldr	r3, [r3, #32]
 80045aa:	f023 0201 	bic.w	r2, r3, #1
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	699b      	ldr	r3, [r3, #24]
 80045b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	011b      	lsls	r3, r3, #4
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045ca:	697b      	ldr	r3, [r7, #20]
 80045cc:	f023 030a 	bic.w	r3, r3, #10
 80045d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	693a      	ldr	r2, [r7, #16]
 80045de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	697a      	ldr	r2, [r7, #20]
 80045e4:	621a      	str	r2, [r3, #32]
}
 80045e6:	bf00      	nop
 80045e8:	371c      	adds	r7, #28
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bc80      	pop	{r7}
 80045ee:	4770      	bx	lr

080045f0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	6a1b      	ldr	r3, [r3, #32]
 8004600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f023 0210 	bic.w	r2, r3, #16
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800461a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	031b      	lsls	r3, r3, #12
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	4313      	orrs	r3, r2
 8004624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004626:	697b      	ldr	r3, [r7, #20]
 8004628:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800462c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	011b      	lsls	r3, r3, #4
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	621a      	str	r2, [r3, #32]
}
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	bc80      	pop	{r7}
 800464c:	4770      	bx	lr

0800464e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800464e:	b480      	push	{r7}
 8004650:	b085      	sub	sp, #20
 8004652:	af00      	add	r7, sp, #0
 8004654:	6078      	str	r0, [r7, #4]
 8004656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004666:	683a      	ldr	r2, [r7, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	4313      	orrs	r3, r2
 800466c:	f043 0307 	orr.w	r3, r3, #7
 8004670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	609a      	str	r2, [r3, #8]
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	bc80      	pop	{r7}
 8004680:	4770      	bx	lr

08004682 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004682:	b480      	push	{r7}
 8004684:	b087      	sub	sp, #28
 8004686:	af00      	add	r7, sp, #0
 8004688:	60f8      	str	r0, [r7, #12]
 800468a:	60b9      	str	r1, [r7, #8]
 800468c:	607a      	str	r2, [r7, #4]
 800468e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800469c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	021a      	lsls	r2, r3, #8
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	431a      	orrs	r2, r3
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	609a      	str	r2, [r3, #8]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr

080046c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e046      	b.n	8004766 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a16      	ldr	r2, [pc, #88]	@ (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004724:	d009      	beq.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a12      	ldr	r2, [pc, #72]	@ (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a10      	ldr	r2, [pc, #64]	@ (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d10c      	bne.n	8004754 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	4313      	orrs	r3, r2
 800474a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	40012c00 	.word	0x40012c00
 8004774:	40000400 	.word	0x40000400
 8004778:	40000800 	.word	0x40000800

0800477c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr

0800478e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b082      	sub	sp, #8
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d101      	bne.n	80047b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	e042      	b.n	8004838 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d106      	bne.n	80047cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f7fd fc92 	bl	80020f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2224      	movs	r2, #36	@ 0x24
 80047d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68da      	ldr	r2, [r3, #12]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80047e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f971 	bl	8004acc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	691a      	ldr	r2, [r3, #16]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80047f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	695a      	ldr	r2, [r3, #20]
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68da      	ldr	r2, [r3, #12]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2220      	movs	r2, #32
 8004824:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2220      	movs	r2, #32
 800482c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3708      	adds	r7, #8
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}

08004840 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b08a      	sub	sp, #40	@ 0x28
 8004844:	af02      	add	r7, sp, #8
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	603b      	str	r3, [r7, #0]
 800484c:	4613      	mov	r3, r2
 800484e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800485a:	b2db      	uxtb	r3, r3
 800485c:	2b20      	cmp	r3, #32
 800485e:	d175      	bne.n	800494c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d002      	beq.n	800486c <HAL_UART_Transmit+0x2c>
 8004866:	88fb      	ldrh	r3, [r7, #6]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d101      	bne.n	8004870 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e06e      	b.n	800494e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2221      	movs	r2, #33	@ 0x21
 800487a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800487e:	f7fd fe31 	bl	80024e4 <HAL_GetTick>
 8004882:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	88fa      	ldrh	r2, [r7, #6]
 8004888:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	88fa      	ldrh	r2, [r7, #6]
 800488e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004898:	d108      	bne.n	80048ac <HAL_UART_Transmit+0x6c>
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d104      	bne.n	80048ac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80048a2:	2300      	movs	r3, #0
 80048a4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	61bb      	str	r3, [r7, #24]
 80048aa:	e003      	b.n	80048b4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80048b0:	2300      	movs	r3, #0
 80048b2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80048b4:	e02e      	b.n	8004914 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	2200      	movs	r2, #0
 80048be:	2180      	movs	r1, #128	@ 0x80
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 f848 	bl	8004956 <UART_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d005      	beq.n	80048d8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2220      	movs	r2, #32
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80048d4:	2303      	movs	r3, #3
 80048d6:	e03a      	b.n	800494e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80048d8:	69fb      	ldr	r3, [r7, #28]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d10b      	bne.n	80048f6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	881b      	ldrh	r3, [r3, #0]
 80048e2:	461a      	mov	r2, r3
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80048ec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80048ee:	69bb      	ldr	r3, [r7, #24]
 80048f0:	3302      	adds	r3, #2
 80048f2:	61bb      	str	r3, [r7, #24]
 80048f4:	e007      	b.n	8004906 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	781a      	ldrb	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	3301      	adds	r3, #1
 8004904:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004918:	b29b      	uxth	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d1cb      	bne.n	80048b6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	9300      	str	r3, [sp, #0]
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2200      	movs	r2, #0
 8004926:	2140      	movs	r1, #64	@ 0x40
 8004928:	68f8      	ldr	r0, [r7, #12]
 800492a:	f000 f814 	bl	8004956 <UART_WaitOnFlagUntilTimeout>
 800492e:	4603      	mov	r3, r0
 8004930:	2b00      	cmp	r3, #0
 8004932:	d005      	beq.n	8004940 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2220      	movs	r2, #32
 8004938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800493c:	2303      	movs	r3, #3
 800493e:	e006      	b.n	800494e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2220      	movs	r2, #32
 8004944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004948:	2300      	movs	r3, #0
 800494a:	e000      	b.n	800494e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800494c:	2302      	movs	r3, #2
  }
}
 800494e:	4618      	mov	r0, r3
 8004950:	3720      	adds	r7, #32
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004956:	b580      	push	{r7, lr}
 8004958:	b086      	sub	sp, #24
 800495a:	af00      	add	r7, sp, #0
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	603b      	str	r3, [r7, #0]
 8004962:	4613      	mov	r3, r2
 8004964:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004966:	e03b      	b.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004968:	6a3b      	ldr	r3, [r7, #32]
 800496a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800496e:	d037      	beq.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004970:	f7fd fdb8 	bl	80024e4 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	6a3a      	ldr	r2, [r7, #32]
 800497c:	429a      	cmp	r2, r3
 800497e:	d302      	bcc.n	8004986 <UART_WaitOnFlagUntilTimeout+0x30>
 8004980:	6a3b      	ldr	r3, [r7, #32]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e03a      	b.n	8004a00 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	f003 0304 	and.w	r3, r3, #4
 8004994:	2b00      	cmp	r3, #0
 8004996:	d023      	beq.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	2b80      	cmp	r3, #128	@ 0x80
 800499c:	d020      	beq.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	2b40      	cmp	r3, #64	@ 0x40
 80049a2:	d01d      	beq.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f003 0308 	and.w	r3, r3, #8
 80049ae:	2b08      	cmp	r3, #8
 80049b0:	d116      	bne.n	80049e0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	617b      	str	r3, [r7, #20]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	617b      	str	r3, [r7, #20]
 80049c6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80049c8:	68f8      	ldr	r0, [r7, #12]
 80049ca:	f000 f81d 	bl	8004a08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	2208      	movs	r2, #8
 80049d2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2200      	movs	r2, #0
 80049d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e00f      	b.n	8004a00 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681a      	ldr	r2, [r3, #0]
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	4013      	ands	r3, r2
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	bf0c      	ite	eq
 80049f0:	2301      	moveq	r3, #1
 80049f2:	2300      	movne	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	461a      	mov	r2, r3
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d0b4      	beq.n	8004968 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80049fe:	2300      	movs	r3, #0
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	3718      	adds	r7, #24
 8004a04:	46bd      	mov	sp, r7
 8004a06:	bd80      	pop	{r7, pc}

08004a08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b095      	sub	sp, #84	@ 0x54
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	330c      	adds	r3, #12
 8004a16:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a1a:	e853 3f00 	ldrex	r3, [r3]
 8004a1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	330c      	adds	r3, #12
 8004a2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a30:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a38:	e841 2300 	strex	r3, r2, [r1]
 8004a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d1e5      	bne.n	8004a10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3314      	adds	r3, #20
 8004a4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	e853 3f00 	ldrex	r3, [r3]
 8004a52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	f023 0301 	bic.w	r3, r3, #1
 8004a5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	3314      	adds	r3, #20
 8004a62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a6c:	e841 2300 	strex	r3, r2, [r1]
 8004a70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d1e5      	bne.n	8004a44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d119      	bne.n	8004ab4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	330c      	adds	r3, #12
 8004a86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	e853 3f00 	ldrex	r3, [r3]
 8004a8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f023 0310 	bic.w	r3, r3, #16
 8004a96:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	330c      	adds	r3, #12
 8004a9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004aa0:	61ba      	str	r2, [r7, #24]
 8004aa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa4:	6979      	ldr	r1, [r7, #20]
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	e841 2300 	strex	r3, r2, [r1]
 8004aac:	613b      	str	r3, [r7, #16]
   return(result);
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d1e5      	bne.n	8004a80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2220      	movs	r2, #32
 8004ab8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004ac2:	bf00      	nop
 8004ac4:	3754      	adds	r7, #84	@ 0x54
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bc80      	pop	{r7}
 8004aca:	4770      	bx	lr

08004acc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68da      	ldr	r2, [r3, #12]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	430a      	orrs	r2, r1
 8004ae8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	691b      	ldr	r3, [r3, #16]
 8004af2:	431a      	orrs	r2, r3
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	695b      	ldr	r3, [r3, #20]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68db      	ldr	r3, [r3, #12]
 8004b02:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004b06:	f023 030c 	bic.w	r3, r3, #12
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6812      	ldr	r2, [r2, #0]
 8004b0e:	68b9      	ldr	r1, [r7, #8]
 8004b10:	430b      	orrs	r3, r1
 8004b12:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695b      	ldr	r3, [r3, #20]
 8004b1a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	430a      	orrs	r2, r1
 8004b28:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4a2c      	ldr	r2, [pc, #176]	@ (8004be0 <UART_SetConfig+0x114>)
 8004b30:	4293      	cmp	r3, r2
 8004b32:	d103      	bne.n	8004b3c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004b34:	f7ff f990 	bl	8003e58 <HAL_RCC_GetPCLK2Freq>
 8004b38:	60f8      	str	r0, [r7, #12]
 8004b3a:	e002      	b.n	8004b42 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004b3c:	f7ff f978 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 8004b40:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	009a      	lsls	r2, r3, #2
 8004b4c:	441a      	add	r2, r3
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b58:	4a22      	ldr	r2, [pc, #136]	@ (8004be4 <UART_SetConfig+0x118>)
 8004b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b5e:	095b      	lsrs	r3, r3, #5
 8004b60:	0119      	lsls	r1, r3, #4
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	4613      	mov	r3, r2
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	009a      	lsls	r2, r3, #2
 8004b6c:	441a      	add	r2, r3
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	009b      	lsls	r3, r3, #2
 8004b74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004b78:	4b1a      	ldr	r3, [pc, #104]	@ (8004be4 <UART_SetConfig+0x118>)
 8004b7a:	fba3 0302 	umull	r0, r3, r3, r2
 8004b7e:	095b      	lsrs	r3, r3, #5
 8004b80:	2064      	movs	r0, #100	@ 0x64
 8004b82:	fb00 f303 	mul.w	r3, r0, r3
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	011b      	lsls	r3, r3, #4
 8004b8a:	3332      	adds	r3, #50	@ 0x32
 8004b8c:	4a15      	ldr	r2, [pc, #84]	@ (8004be4 <UART_SetConfig+0x118>)
 8004b8e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b92:	095b      	lsrs	r3, r3, #5
 8004b94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b98:	4419      	add	r1, r3
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	4413      	add	r3, r2
 8004ba2:	009a      	lsls	r2, r3, #2
 8004ba4:	441a      	add	r2, r3
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	fbb2 f2f3 	udiv	r2, r2, r3
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004be4 <UART_SetConfig+0x118>)
 8004bb2:	fba3 0302 	umull	r0, r3, r3, r2
 8004bb6:	095b      	lsrs	r3, r3, #5
 8004bb8:	2064      	movs	r0, #100	@ 0x64
 8004bba:	fb00 f303 	mul.w	r3, r0, r3
 8004bbe:	1ad3      	subs	r3, r2, r3
 8004bc0:	011b      	lsls	r3, r3, #4
 8004bc2:	3332      	adds	r3, #50	@ 0x32
 8004bc4:	4a07      	ldr	r2, [pc, #28]	@ (8004be4 <UART_SetConfig+0x118>)
 8004bc6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	f003 020f 	and.w	r2, r3, #15
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	440a      	add	r2, r1
 8004bd6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004bd8:	bf00      	nop
 8004bda:	3710      	adds	r7, #16
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}
 8004be0:	40013800 	.word	0x40013800
 8004be4:	51eb851f 	.word	0x51eb851f

08004be8 <std>:
 8004be8:	2300      	movs	r3, #0
 8004bea:	b510      	push	{r4, lr}
 8004bec:	4604      	mov	r4, r0
 8004bee:	e9c0 3300 	strd	r3, r3, [r0]
 8004bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004bf6:	6083      	str	r3, [r0, #8]
 8004bf8:	8181      	strh	r1, [r0, #12]
 8004bfa:	6643      	str	r3, [r0, #100]	@ 0x64
 8004bfc:	81c2      	strh	r2, [r0, #14]
 8004bfe:	6183      	str	r3, [r0, #24]
 8004c00:	4619      	mov	r1, r3
 8004c02:	2208      	movs	r2, #8
 8004c04:	305c      	adds	r0, #92	@ 0x5c
 8004c06:	f000 f926 	bl	8004e56 <memset>
 8004c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8004c40 <std+0x58>)
 8004c0c:	6224      	str	r4, [r4, #32]
 8004c0e:	6263      	str	r3, [r4, #36]	@ 0x24
 8004c10:	4b0c      	ldr	r3, [pc, #48]	@ (8004c44 <std+0x5c>)
 8004c12:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004c14:	4b0c      	ldr	r3, [pc, #48]	@ (8004c48 <std+0x60>)
 8004c16:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004c18:	4b0c      	ldr	r3, [pc, #48]	@ (8004c4c <std+0x64>)
 8004c1a:	6323      	str	r3, [r4, #48]	@ 0x30
 8004c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8004c50 <std+0x68>)
 8004c1e:	429c      	cmp	r4, r3
 8004c20:	d006      	beq.n	8004c30 <std+0x48>
 8004c22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004c26:	4294      	cmp	r4, r2
 8004c28:	d002      	beq.n	8004c30 <std+0x48>
 8004c2a:	33d0      	adds	r3, #208	@ 0xd0
 8004c2c:	429c      	cmp	r4, r3
 8004c2e:	d105      	bne.n	8004c3c <std+0x54>
 8004c30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c38:	f000 b986 	b.w	8004f48 <__retarget_lock_init_recursive>
 8004c3c:	bd10      	pop	{r4, pc}
 8004c3e:	bf00      	nop
 8004c40:	08004dd1 	.word	0x08004dd1
 8004c44:	08004df3 	.word	0x08004df3
 8004c48:	08004e2b 	.word	0x08004e2b
 8004c4c:	08004e4f 	.word	0x08004e4f
 8004c50:	20000620 	.word	0x20000620

08004c54 <stdio_exit_handler>:
 8004c54:	4a02      	ldr	r2, [pc, #8]	@ (8004c60 <stdio_exit_handler+0xc>)
 8004c56:	4903      	ldr	r1, [pc, #12]	@ (8004c64 <stdio_exit_handler+0x10>)
 8004c58:	4803      	ldr	r0, [pc, #12]	@ (8004c68 <stdio_exit_handler+0x14>)
 8004c5a:	f000 b869 	b.w	8004d30 <_fwalk_sglue>
 8004c5e:	bf00      	nop
 8004c60:	20000020 	.word	0x20000020
 8004c64:	08005a91 	.word	0x08005a91
 8004c68:	20000030 	.word	0x20000030

08004c6c <cleanup_stdio>:
 8004c6c:	6841      	ldr	r1, [r0, #4]
 8004c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca0 <cleanup_stdio+0x34>)
 8004c70:	b510      	push	{r4, lr}
 8004c72:	4299      	cmp	r1, r3
 8004c74:	4604      	mov	r4, r0
 8004c76:	d001      	beq.n	8004c7c <cleanup_stdio+0x10>
 8004c78:	f000 ff0a 	bl	8005a90 <_fflush_r>
 8004c7c:	68a1      	ldr	r1, [r4, #8]
 8004c7e:	4b09      	ldr	r3, [pc, #36]	@ (8004ca4 <cleanup_stdio+0x38>)
 8004c80:	4299      	cmp	r1, r3
 8004c82:	d002      	beq.n	8004c8a <cleanup_stdio+0x1e>
 8004c84:	4620      	mov	r0, r4
 8004c86:	f000 ff03 	bl	8005a90 <_fflush_r>
 8004c8a:	68e1      	ldr	r1, [r4, #12]
 8004c8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ca8 <cleanup_stdio+0x3c>)
 8004c8e:	4299      	cmp	r1, r3
 8004c90:	d004      	beq.n	8004c9c <cleanup_stdio+0x30>
 8004c92:	4620      	mov	r0, r4
 8004c94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004c98:	f000 befa 	b.w	8005a90 <_fflush_r>
 8004c9c:	bd10      	pop	{r4, pc}
 8004c9e:	bf00      	nop
 8004ca0:	20000620 	.word	0x20000620
 8004ca4:	20000688 	.word	0x20000688
 8004ca8:	200006f0 	.word	0x200006f0

08004cac <global_stdio_init.part.0>:
 8004cac:	b510      	push	{r4, lr}
 8004cae:	4b0b      	ldr	r3, [pc, #44]	@ (8004cdc <global_stdio_init.part.0+0x30>)
 8004cb0:	4c0b      	ldr	r4, [pc, #44]	@ (8004ce0 <global_stdio_init.part.0+0x34>)
 8004cb2:	4a0c      	ldr	r2, [pc, #48]	@ (8004ce4 <global_stdio_init.part.0+0x38>)
 8004cb4:	4620      	mov	r0, r4
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	2104      	movs	r1, #4
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f7ff ff94 	bl	8004be8 <std>
 8004cc0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004cc4:	2201      	movs	r2, #1
 8004cc6:	2109      	movs	r1, #9
 8004cc8:	f7ff ff8e 	bl	8004be8 <std>
 8004ccc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004cd0:	2202      	movs	r2, #2
 8004cd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004cd6:	2112      	movs	r1, #18
 8004cd8:	f7ff bf86 	b.w	8004be8 <std>
 8004cdc:	20000758 	.word	0x20000758
 8004ce0:	20000620 	.word	0x20000620
 8004ce4:	08004c55 	.word	0x08004c55

08004ce8 <__sfp_lock_acquire>:
 8004ce8:	4801      	ldr	r0, [pc, #4]	@ (8004cf0 <__sfp_lock_acquire+0x8>)
 8004cea:	f000 b92e 	b.w	8004f4a <__retarget_lock_acquire_recursive>
 8004cee:	bf00      	nop
 8004cf0:	20000761 	.word	0x20000761

08004cf4 <__sfp_lock_release>:
 8004cf4:	4801      	ldr	r0, [pc, #4]	@ (8004cfc <__sfp_lock_release+0x8>)
 8004cf6:	f000 b929 	b.w	8004f4c <__retarget_lock_release_recursive>
 8004cfa:	bf00      	nop
 8004cfc:	20000761 	.word	0x20000761

08004d00 <__sinit>:
 8004d00:	b510      	push	{r4, lr}
 8004d02:	4604      	mov	r4, r0
 8004d04:	f7ff fff0 	bl	8004ce8 <__sfp_lock_acquire>
 8004d08:	6a23      	ldr	r3, [r4, #32]
 8004d0a:	b11b      	cbz	r3, 8004d14 <__sinit+0x14>
 8004d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004d10:	f7ff bff0 	b.w	8004cf4 <__sfp_lock_release>
 8004d14:	4b04      	ldr	r3, [pc, #16]	@ (8004d28 <__sinit+0x28>)
 8004d16:	6223      	str	r3, [r4, #32]
 8004d18:	4b04      	ldr	r3, [pc, #16]	@ (8004d2c <__sinit+0x2c>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d1f5      	bne.n	8004d0c <__sinit+0xc>
 8004d20:	f7ff ffc4 	bl	8004cac <global_stdio_init.part.0>
 8004d24:	e7f2      	b.n	8004d0c <__sinit+0xc>
 8004d26:	bf00      	nop
 8004d28:	08004c6d 	.word	0x08004c6d
 8004d2c:	20000758 	.word	0x20000758

08004d30 <_fwalk_sglue>:
 8004d30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004d34:	4607      	mov	r7, r0
 8004d36:	4688      	mov	r8, r1
 8004d38:	4614      	mov	r4, r2
 8004d3a:	2600      	movs	r6, #0
 8004d3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004d40:	f1b9 0901 	subs.w	r9, r9, #1
 8004d44:	d505      	bpl.n	8004d52 <_fwalk_sglue+0x22>
 8004d46:	6824      	ldr	r4, [r4, #0]
 8004d48:	2c00      	cmp	r4, #0
 8004d4a:	d1f7      	bne.n	8004d3c <_fwalk_sglue+0xc>
 8004d4c:	4630      	mov	r0, r6
 8004d4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004d52:	89ab      	ldrh	r3, [r5, #12]
 8004d54:	2b01      	cmp	r3, #1
 8004d56:	d907      	bls.n	8004d68 <_fwalk_sglue+0x38>
 8004d58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004d5c:	3301      	adds	r3, #1
 8004d5e:	d003      	beq.n	8004d68 <_fwalk_sglue+0x38>
 8004d60:	4629      	mov	r1, r5
 8004d62:	4638      	mov	r0, r7
 8004d64:	47c0      	blx	r8
 8004d66:	4306      	orrs	r6, r0
 8004d68:	3568      	adds	r5, #104	@ 0x68
 8004d6a:	e7e9      	b.n	8004d40 <_fwalk_sglue+0x10>

08004d6c <iprintf>:
 8004d6c:	b40f      	push	{r0, r1, r2, r3}
 8004d6e:	b507      	push	{r0, r1, r2, lr}
 8004d70:	4906      	ldr	r1, [pc, #24]	@ (8004d8c <iprintf+0x20>)
 8004d72:	ab04      	add	r3, sp, #16
 8004d74:	6808      	ldr	r0, [r1, #0]
 8004d76:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d7a:	6881      	ldr	r1, [r0, #8]
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	f000 fb5d 	bl	800543c <_vfiprintf_r>
 8004d82:	b003      	add	sp, #12
 8004d84:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d88:	b004      	add	sp, #16
 8004d8a:	4770      	bx	lr
 8004d8c:	2000002c 	.word	0x2000002c

08004d90 <siprintf>:
 8004d90:	b40e      	push	{r1, r2, r3}
 8004d92:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d96:	b500      	push	{lr}
 8004d98:	b09c      	sub	sp, #112	@ 0x70
 8004d9a:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d9c:	9002      	str	r0, [sp, #8]
 8004d9e:	9006      	str	r0, [sp, #24]
 8004da0:	9107      	str	r1, [sp, #28]
 8004da2:	9104      	str	r1, [sp, #16]
 8004da4:	4808      	ldr	r0, [pc, #32]	@ (8004dc8 <siprintf+0x38>)
 8004da6:	4909      	ldr	r1, [pc, #36]	@ (8004dcc <siprintf+0x3c>)
 8004da8:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dac:	9105      	str	r1, [sp, #20]
 8004dae:	6800      	ldr	r0, [r0, #0]
 8004db0:	a902      	add	r1, sp, #8
 8004db2:	9301      	str	r3, [sp, #4]
 8004db4:	f000 fa1e 	bl	80051f4 <_svfiprintf_r>
 8004db8:	2200      	movs	r2, #0
 8004dba:	9b02      	ldr	r3, [sp, #8]
 8004dbc:	701a      	strb	r2, [r3, #0]
 8004dbe:	b01c      	add	sp, #112	@ 0x70
 8004dc0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004dc4:	b003      	add	sp, #12
 8004dc6:	4770      	bx	lr
 8004dc8:	2000002c 	.word	0x2000002c
 8004dcc:	ffff0208 	.word	0xffff0208

08004dd0 <__sread>:
 8004dd0:	b510      	push	{r4, lr}
 8004dd2:	460c      	mov	r4, r1
 8004dd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd8:	f000 f868 	bl	8004eac <_read_r>
 8004ddc:	2800      	cmp	r0, #0
 8004dde:	bfab      	itete	ge
 8004de0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004de2:	89a3      	ldrhlt	r3, [r4, #12]
 8004de4:	181b      	addge	r3, r3, r0
 8004de6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004dea:	bfac      	ite	ge
 8004dec:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004dee:	81a3      	strhlt	r3, [r4, #12]
 8004df0:	bd10      	pop	{r4, pc}

08004df2 <__swrite>:
 8004df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004df6:	461f      	mov	r7, r3
 8004df8:	898b      	ldrh	r3, [r1, #12]
 8004dfa:	4605      	mov	r5, r0
 8004dfc:	05db      	lsls	r3, r3, #23
 8004dfe:	460c      	mov	r4, r1
 8004e00:	4616      	mov	r6, r2
 8004e02:	d505      	bpl.n	8004e10 <__swrite+0x1e>
 8004e04:	2302      	movs	r3, #2
 8004e06:	2200      	movs	r2, #0
 8004e08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e0c:	f000 f83c 	bl	8004e88 <_lseek_r>
 8004e10:	89a3      	ldrh	r3, [r4, #12]
 8004e12:	4632      	mov	r2, r6
 8004e14:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004e18:	81a3      	strh	r3, [r4, #12]
 8004e1a:	4628      	mov	r0, r5
 8004e1c:	463b      	mov	r3, r7
 8004e1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004e22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e26:	f000 b853 	b.w	8004ed0 <_write_r>

08004e2a <__sseek>:
 8004e2a:	b510      	push	{r4, lr}
 8004e2c:	460c      	mov	r4, r1
 8004e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e32:	f000 f829 	bl	8004e88 <_lseek_r>
 8004e36:	1c43      	adds	r3, r0, #1
 8004e38:	89a3      	ldrh	r3, [r4, #12]
 8004e3a:	bf15      	itete	ne
 8004e3c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004e3e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004e42:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004e46:	81a3      	strheq	r3, [r4, #12]
 8004e48:	bf18      	it	ne
 8004e4a:	81a3      	strhne	r3, [r4, #12]
 8004e4c:	bd10      	pop	{r4, pc}

08004e4e <__sclose>:
 8004e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e52:	f000 b809 	b.w	8004e68 <_close_r>

08004e56 <memset>:
 8004e56:	4603      	mov	r3, r0
 8004e58:	4402      	add	r2, r0
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d100      	bne.n	8004e60 <memset+0xa>
 8004e5e:	4770      	bx	lr
 8004e60:	f803 1b01 	strb.w	r1, [r3], #1
 8004e64:	e7f9      	b.n	8004e5a <memset+0x4>
	...

08004e68 <_close_r>:
 8004e68:	b538      	push	{r3, r4, r5, lr}
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	4d05      	ldr	r5, [pc, #20]	@ (8004e84 <_close_r+0x1c>)
 8004e6e:	4604      	mov	r4, r0
 8004e70:	4608      	mov	r0, r1
 8004e72:	602b      	str	r3, [r5, #0]
 8004e74:	f7fd fa4b 	bl	800230e <_close>
 8004e78:	1c43      	adds	r3, r0, #1
 8004e7a:	d102      	bne.n	8004e82 <_close_r+0x1a>
 8004e7c:	682b      	ldr	r3, [r5, #0]
 8004e7e:	b103      	cbz	r3, 8004e82 <_close_r+0x1a>
 8004e80:	6023      	str	r3, [r4, #0]
 8004e82:	bd38      	pop	{r3, r4, r5, pc}
 8004e84:	2000075c 	.word	0x2000075c

08004e88 <_lseek_r>:
 8004e88:	b538      	push	{r3, r4, r5, lr}
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	4608      	mov	r0, r1
 8004e8e:	4611      	mov	r1, r2
 8004e90:	2200      	movs	r2, #0
 8004e92:	4d05      	ldr	r5, [pc, #20]	@ (8004ea8 <_lseek_r+0x20>)
 8004e94:	602a      	str	r2, [r5, #0]
 8004e96:	461a      	mov	r2, r3
 8004e98:	f7fd fa5d 	bl	8002356 <_lseek>
 8004e9c:	1c43      	adds	r3, r0, #1
 8004e9e:	d102      	bne.n	8004ea6 <_lseek_r+0x1e>
 8004ea0:	682b      	ldr	r3, [r5, #0]
 8004ea2:	b103      	cbz	r3, 8004ea6 <_lseek_r+0x1e>
 8004ea4:	6023      	str	r3, [r4, #0]
 8004ea6:	bd38      	pop	{r3, r4, r5, pc}
 8004ea8:	2000075c 	.word	0x2000075c

08004eac <_read_r>:
 8004eac:	b538      	push	{r3, r4, r5, lr}
 8004eae:	4604      	mov	r4, r0
 8004eb0:	4608      	mov	r0, r1
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	4d05      	ldr	r5, [pc, #20]	@ (8004ecc <_read_r+0x20>)
 8004eb8:	602a      	str	r2, [r5, #0]
 8004eba:	461a      	mov	r2, r3
 8004ebc:	f7fd fa0a 	bl	80022d4 <_read>
 8004ec0:	1c43      	adds	r3, r0, #1
 8004ec2:	d102      	bne.n	8004eca <_read_r+0x1e>
 8004ec4:	682b      	ldr	r3, [r5, #0]
 8004ec6:	b103      	cbz	r3, 8004eca <_read_r+0x1e>
 8004ec8:	6023      	str	r3, [r4, #0]
 8004eca:	bd38      	pop	{r3, r4, r5, pc}
 8004ecc:	2000075c 	.word	0x2000075c

08004ed0 <_write_r>:
 8004ed0:	b538      	push	{r3, r4, r5, lr}
 8004ed2:	4604      	mov	r4, r0
 8004ed4:	4608      	mov	r0, r1
 8004ed6:	4611      	mov	r1, r2
 8004ed8:	2200      	movs	r2, #0
 8004eda:	4d05      	ldr	r5, [pc, #20]	@ (8004ef0 <_write_r+0x20>)
 8004edc:	602a      	str	r2, [r5, #0]
 8004ede:	461a      	mov	r2, r3
 8004ee0:	f7fc ff62 	bl	8001da8 <_write>
 8004ee4:	1c43      	adds	r3, r0, #1
 8004ee6:	d102      	bne.n	8004eee <_write_r+0x1e>
 8004ee8:	682b      	ldr	r3, [r5, #0]
 8004eea:	b103      	cbz	r3, 8004eee <_write_r+0x1e>
 8004eec:	6023      	str	r3, [r4, #0]
 8004eee:	bd38      	pop	{r3, r4, r5, pc}
 8004ef0:	2000075c 	.word	0x2000075c

08004ef4 <__errno>:
 8004ef4:	4b01      	ldr	r3, [pc, #4]	@ (8004efc <__errno+0x8>)
 8004ef6:	6818      	ldr	r0, [r3, #0]
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	2000002c 	.word	0x2000002c

08004f00 <__libc_init_array>:
 8004f00:	b570      	push	{r4, r5, r6, lr}
 8004f02:	2600      	movs	r6, #0
 8004f04:	4d0c      	ldr	r5, [pc, #48]	@ (8004f38 <__libc_init_array+0x38>)
 8004f06:	4c0d      	ldr	r4, [pc, #52]	@ (8004f3c <__libc_init_array+0x3c>)
 8004f08:	1b64      	subs	r4, r4, r5
 8004f0a:	10a4      	asrs	r4, r4, #2
 8004f0c:	42a6      	cmp	r6, r4
 8004f0e:	d109      	bne.n	8004f24 <__libc_init_array+0x24>
 8004f10:	f000 ff7a 	bl	8005e08 <_init>
 8004f14:	2600      	movs	r6, #0
 8004f16:	4d0a      	ldr	r5, [pc, #40]	@ (8004f40 <__libc_init_array+0x40>)
 8004f18:	4c0a      	ldr	r4, [pc, #40]	@ (8004f44 <__libc_init_array+0x44>)
 8004f1a:	1b64      	subs	r4, r4, r5
 8004f1c:	10a4      	asrs	r4, r4, #2
 8004f1e:	42a6      	cmp	r6, r4
 8004f20:	d105      	bne.n	8004f2e <__libc_init_array+0x2e>
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
 8004f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f28:	4798      	blx	r3
 8004f2a:	3601      	adds	r6, #1
 8004f2c:	e7ee      	b.n	8004f0c <__libc_init_array+0xc>
 8004f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004f32:	4798      	blx	r3
 8004f34:	3601      	adds	r6, #1
 8004f36:	e7f2      	b.n	8004f1e <__libc_init_array+0x1e>
 8004f38:	08007418 	.word	0x08007418
 8004f3c:	08007418 	.word	0x08007418
 8004f40:	08007418 	.word	0x08007418
 8004f44:	0800741c 	.word	0x0800741c

08004f48 <__retarget_lock_init_recursive>:
 8004f48:	4770      	bx	lr

08004f4a <__retarget_lock_acquire_recursive>:
 8004f4a:	4770      	bx	lr

08004f4c <__retarget_lock_release_recursive>:
 8004f4c:	4770      	bx	lr
	...

08004f50 <_free_r>:
 8004f50:	b538      	push	{r3, r4, r5, lr}
 8004f52:	4605      	mov	r5, r0
 8004f54:	2900      	cmp	r1, #0
 8004f56:	d040      	beq.n	8004fda <_free_r+0x8a>
 8004f58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f5c:	1f0c      	subs	r4, r1, #4
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	bfb8      	it	lt
 8004f62:	18e4      	addlt	r4, r4, r3
 8004f64:	f000 f8de 	bl	8005124 <__malloc_lock>
 8004f68:	4a1c      	ldr	r2, [pc, #112]	@ (8004fdc <_free_r+0x8c>)
 8004f6a:	6813      	ldr	r3, [r2, #0]
 8004f6c:	b933      	cbnz	r3, 8004f7c <_free_r+0x2c>
 8004f6e:	6063      	str	r3, [r4, #4]
 8004f70:	6014      	str	r4, [r2, #0]
 8004f72:	4628      	mov	r0, r5
 8004f74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004f78:	f000 b8da 	b.w	8005130 <__malloc_unlock>
 8004f7c:	42a3      	cmp	r3, r4
 8004f7e:	d908      	bls.n	8004f92 <_free_r+0x42>
 8004f80:	6820      	ldr	r0, [r4, #0]
 8004f82:	1821      	adds	r1, r4, r0
 8004f84:	428b      	cmp	r3, r1
 8004f86:	bf01      	itttt	eq
 8004f88:	6819      	ldreq	r1, [r3, #0]
 8004f8a:	685b      	ldreq	r3, [r3, #4]
 8004f8c:	1809      	addeq	r1, r1, r0
 8004f8e:	6021      	streq	r1, [r4, #0]
 8004f90:	e7ed      	b.n	8004f6e <_free_r+0x1e>
 8004f92:	461a      	mov	r2, r3
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	b10b      	cbz	r3, 8004f9c <_free_r+0x4c>
 8004f98:	42a3      	cmp	r3, r4
 8004f9a:	d9fa      	bls.n	8004f92 <_free_r+0x42>
 8004f9c:	6811      	ldr	r1, [r2, #0]
 8004f9e:	1850      	adds	r0, r2, r1
 8004fa0:	42a0      	cmp	r0, r4
 8004fa2:	d10b      	bne.n	8004fbc <_free_r+0x6c>
 8004fa4:	6820      	ldr	r0, [r4, #0]
 8004fa6:	4401      	add	r1, r0
 8004fa8:	1850      	adds	r0, r2, r1
 8004faa:	4283      	cmp	r3, r0
 8004fac:	6011      	str	r1, [r2, #0]
 8004fae:	d1e0      	bne.n	8004f72 <_free_r+0x22>
 8004fb0:	6818      	ldr	r0, [r3, #0]
 8004fb2:	685b      	ldr	r3, [r3, #4]
 8004fb4:	4408      	add	r0, r1
 8004fb6:	6010      	str	r0, [r2, #0]
 8004fb8:	6053      	str	r3, [r2, #4]
 8004fba:	e7da      	b.n	8004f72 <_free_r+0x22>
 8004fbc:	d902      	bls.n	8004fc4 <_free_r+0x74>
 8004fbe:	230c      	movs	r3, #12
 8004fc0:	602b      	str	r3, [r5, #0]
 8004fc2:	e7d6      	b.n	8004f72 <_free_r+0x22>
 8004fc4:	6820      	ldr	r0, [r4, #0]
 8004fc6:	1821      	adds	r1, r4, r0
 8004fc8:	428b      	cmp	r3, r1
 8004fca:	bf01      	itttt	eq
 8004fcc:	6819      	ldreq	r1, [r3, #0]
 8004fce:	685b      	ldreq	r3, [r3, #4]
 8004fd0:	1809      	addeq	r1, r1, r0
 8004fd2:	6021      	streq	r1, [r4, #0]
 8004fd4:	6063      	str	r3, [r4, #4]
 8004fd6:	6054      	str	r4, [r2, #4]
 8004fd8:	e7cb      	b.n	8004f72 <_free_r+0x22>
 8004fda:	bd38      	pop	{r3, r4, r5, pc}
 8004fdc:	20000768 	.word	0x20000768

08004fe0 <sbrk_aligned>:
 8004fe0:	b570      	push	{r4, r5, r6, lr}
 8004fe2:	4e0f      	ldr	r6, [pc, #60]	@ (8005020 <sbrk_aligned+0x40>)
 8004fe4:	460c      	mov	r4, r1
 8004fe6:	6831      	ldr	r1, [r6, #0]
 8004fe8:	4605      	mov	r5, r0
 8004fea:	b911      	cbnz	r1, 8004ff2 <sbrk_aligned+0x12>
 8004fec:	f000 fe26 	bl	8005c3c <_sbrk_r>
 8004ff0:	6030      	str	r0, [r6, #0]
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	4628      	mov	r0, r5
 8004ff6:	f000 fe21 	bl	8005c3c <_sbrk_r>
 8004ffa:	1c43      	adds	r3, r0, #1
 8004ffc:	d103      	bne.n	8005006 <sbrk_aligned+0x26>
 8004ffe:	f04f 34ff 	mov.w	r4, #4294967295
 8005002:	4620      	mov	r0, r4
 8005004:	bd70      	pop	{r4, r5, r6, pc}
 8005006:	1cc4      	adds	r4, r0, #3
 8005008:	f024 0403 	bic.w	r4, r4, #3
 800500c:	42a0      	cmp	r0, r4
 800500e:	d0f8      	beq.n	8005002 <sbrk_aligned+0x22>
 8005010:	1a21      	subs	r1, r4, r0
 8005012:	4628      	mov	r0, r5
 8005014:	f000 fe12 	bl	8005c3c <_sbrk_r>
 8005018:	3001      	adds	r0, #1
 800501a:	d1f2      	bne.n	8005002 <sbrk_aligned+0x22>
 800501c:	e7ef      	b.n	8004ffe <sbrk_aligned+0x1e>
 800501e:	bf00      	nop
 8005020:	20000764 	.word	0x20000764

08005024 <_malloc_r>:
 8005024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005028:	1ccd      	adds	r5, r1, #3
 800502a:	f025 0503 	bic.w	r5, r5, #3
 800502e:	3508      	adds	r5, #8
 8005030:	2d0c      	cmp	r5, #12
 8005032:	bf38      	it	cc
 8005034:	250c      	movcc	r5, #12
 8005036:	2d00      	cmp	r5, #0
 8005038:	4606      	mov	r6, r0
 800503a:	db01      	blt.n	8005040 <_malloc_r+0x1c>
 800503c:	42a9      	cmp	r1, r5
 800503e:	d904      	bls.n	800504a <_malloc_r+0x26>
 8005040:	230c      	movs	r3, #12
 8005042:	6033      	str	r3, [r6, #0]
 8005044:	2000      	movs	r0, #0
 8005046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800504a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005120 <_malloc_r+0xfc>
 800504e:	f000 f869 	bl	8005124 <__malloc_lock>
 8005052:	f8d8 3000 	ldr.w	r3, [r8]
 8005056:	461c      	mov	r4, r3
 8005058:	bb44      	cbnz	r4, 80050ac <_malloc_r+0x88>
 800505a:	4629      	mov	r1, r5
 800505c:	4630      	mov	r0, r6
 800505e:	f7ff ffbf 	bl	8004fe0 <sbrk_aligned>
 8005062:	1c43      	adds	r3, r0, #1
 8005064:	4604      	mov	r4, r0
 8005066:	d158      	bne.n	800511a <_malloc_r+0xf6>
 8005068:	f8d8 4000 	ldr.w	r4, [r8]
 800506c:	4627      	mov	r7, r4
 800506e:	2f00      	cmp	r7, #0
 8005070:	d143      	bne.n	80050fa <_malloc_r+0xd6>
 8005072:	2c00      	cmp	r4, #0
 8005074:	d04b      	beq.n	800510e <_malloc_r+0xea>
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	4639      	mov	r1, r7
 800507a:	4630      	mov	r0, r6
 800507c:	eb04 0903 	add.w	r9, r4, r3
 8005080:	f000 fddc 	bl	8005c3c <_sbrk_r>
 8005084:	4581      	cmp	r9, r0
 8005086:	d142      	bne.n	800510e <_malloc_r+0xea>
 8005088:	6821      	ldr	r1, [r4, #0]
 800508a:	4630      	mov	r0, r6
 800508c:	1a6d      	subs	r5, r5, r1
 800508e:	4629      	mov	r1, r5
 8005090:	f7ff ffa6 	bl	8004fe0 <sbrk_aligned>
 8005094:	3001      	adds	r0, #1
 8005096:	d03a      	beq.n	800510e <_malloc_r+0xea>
 8005098:	6823      	ldr	r3, [r4, #0]
 800509a:	442b      	add	r3, r5
 800509c:	6023      	str	r3, [r4, #0]
 800509e:	f8d8 3000 	ldr.w	r3, [r8]
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	bb62      	cbnz	r2, 8005100 <_malloc_r+0xdc>
 80050a6:	f8c8 7000 	str.w	r7, [r8]
 80050aa:	e00f      	b.n	80050cc <_malloc_r+0xa8>
 80050ac:	6822      	ldr	r2, [r4, #0]
 80050ae:	1b52      	subs	r2, r2, r5
 80050b0:	d420      	bmi.n	80050f4 <_malloc_r+0xd0>
 80050b2:	2a0b      	cmp	r2, #11
 80050b4:	d917      	bls.n	80050e6 <_malloc_r+0xc2>
 80050b6:	1961      	adds	r1, r4, r5
 80050b8:	42a3      	cmp	r3, r4
 80050ba:	6025      	str	r5, [r4, #0]
 80050bc:	bf18      	it	ne
 80050be:	6059      	strne	r1, [r3, #4]
 80050c0:	6863      	ldr	r3, [r4, #4]
 80050c2:	bf08      	it	eq
 80050c4:	f8c8 1000 	streq.w	r1, [r8]
 80050c8:	5162      	str	r2, [r4, r5]
 80050ca:	604b      	str	r3, [r1, #4]
 80050cc:	4630      	mov	r0, r6
 80050ce:	f000 f82f 	bl	8005130 <__malloc_unlock>
 80050d2:	f104 000b 	add.w	r0, r4, #11
 80050d6:	1d23      	adds	r3, r4, #4
 80050d8:	f020 0007 	bic.w	r0, r0, #7
 80050dc:	1ac2      	subs	r2, r0, r3
 80050de:	bf1c      	itt	ne
 80050e0:	1a1b      	subne	r3, r3, r0
 80050e2:	50a3      	strne	r3, [r4, r2]
 80050e4:	e7af      	b.n	8005046 <_malloc_r+0x22>
 80050e6:	6862      	ldr	r2, [r4, #4]
 80050e8:	42a3      	cmp	r3, r4
 80050ea:	bf0c      	ite	eq
 80050ec:	f8c8 2000 	streq.w	r2, [r8]
 80050f0:	605a      	strne	r2, [r3, #4]
 80050f2:	e7eb      	b.n	80050cc <_malloc_r+0xa8>
 80050f4:	4623      	mov	r3, r4
 80050f6:	6864      	ldr	r4, [r4, #4]
 80050f8:	e7ae      	b.n	8005058 <_malloc_r+0x34>
 80050fa:	463c      	mov	r4, r7
 80050fc:	687f      	ldr	r7, [r7, #4]
 80050fe:	e7b6      	b.n	800506e <_malloc_r+0x4a>
 8005100:	461a      	mov	r2, r3
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	42a3      	cmp	r3, r4
 8005106:	d1fb      	bne.n	8005100 <_malloc_r+0xdc>
 8005108:	2300      	movs	r3, #0
 800510a:	6053      	str	r3, [r2, #4]
 800510c:	e7de      	b.n	80050cc <_malloc_r+0xa8>
 800510e:	230c      	movs	r3, #12
 8005110:	4630      	mov	r0, r6
 8005112:	6033      	str	r3, [r6, #0]
 8005114:	f000 f80c 	bl	8005130 <__malloc_unlock>
 8005118:	e794      	b.n	8005044 <_malloc_r+0x20>
 800511a:	6005      	str	r5, [r0, #0]
 800511c:	e7d6      	b.n	80050cc <_malloc_r+0xa8>
 800511e:	bf00      	nop
 8005120:	20000768 	.word	0x20000768

08005124 <__malloc_lock>:
 8005124:	4801      	ldr	r0, [pc, #4]	@ (800512c <__malloc_lock+0x8>)
 8005126:	f7ff bf10 	b.w	8004f4a <__retarget_lock_acquire_recursive>
 800512a:	bf00      	nop
 800512c:	20000760 	.word	0x20000760

08005130 <__malloc_unlock>:
 8005130:	4801      	ldr	r0, [pc, #4]	@ (8005138 <__malloc_unlock+0x8>)
 8005132:	f7ff bf0b 	b.w	8004f4c <__retarget_lock_release_recursive>
 8005136:	bf00      	nop
 8005138:	20000760 	.word	0x20000760

0800513c <__ssputs_r>:
 800513c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005140:	461f      	mov	r7, r3
 8005142:	688e      	ldr	r6, [r1, #8]
 8005144:	4682      	mov	sl, r0
 8005146:	42be      	cmp	r6, r7
 8005148:	460c      	mov	r4, r1
 800514a:	4690      	mov	r8, r2
 800514c:	680b      	ldr	r3, [r1, #0]
 800514e:	d82d      	bhi.n	80051ac <__ssputs_r+0x70>
 8005150:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005154:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005158:	d026      	beq.n	80051a8 <__ssputs_r+0x6c>
 800515a:	6965      	ldr	r5, [r4, #20]
 800515c:	6909      	ldr	r1, [r1, #16]
 800515e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005162:	eba3 0901 	sub.w	r9, r3, r1
 8005166:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800516a:	1c7b      	adds	r3, r7, #1
 800516c:	444b      	add	r3, r9
 800516e:	106d      	asrs	r5, r5, #1
 8005170:	429d      	cmp	r5, r3
 8005172:	bf38      	it	cc
 8005174:	461d      	movcc	r5, r3
 8005176:	0553      	lsls	r3, r2, #21
 8005178:	d527      	bpl.n	80051ca <__ssputs_r+0x8e>
 800517a:	4629      	mov	r1, r5
 800517c:	f7ff ff52 	bl	8005024 <_malloc_r>
 8005180:	4606      	mov	r6, r0
 8005182:	b360      	cbz	r0, 80051de <__ssputs_r+0xa2>
 8005184:	464a      	mov	r2, r9
 8005186:	6921      	ldr	r1, [r4, #16]
 8005188:	f000 fd76 	bl	8005c78 <memcpy>
 800518c:	89a3      	ldrh	r3, [r4, #12]
 800518e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005192:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005196:	81a3      	strh	r3, [r4, #12]
 8005198:	6126      	str	r6, [r4, #16]
 800519a:	444e      	add	r6, r9
 800519c:	6026      	str	r6, [r4, #0]
 800519e:	463e      	mov	r6, r7
 80051a0:	6165      	str	r5, [r4, #20]
 80051a2:	eba5 0509 	sub.w	r5, r5, r9
 80051a6:	60a5      	str	r5, [r4, #8]
 80051a8:	42be      	cmp	r6, r7
 80051aa:	d900      	bls.n	80051ae <__ssputs_r+0x72>
 80051ac:	463e      	mov	r6, r7
 80051ae:	4632      	mov	r2, r6
 80051b0:	4641      	mov	r1, r8
 80051b2:	6820      	ldr	r0, [r4, #0]
 80051b4:	f000 fd28 	bl	8005c08 <memmove>
 80051b8:	2000      	movs	r0, #0
 80051ba:	68a3      	ldr	r3, [r4, #8]
 80051bc:	1b9b      	subs	r3, r3, r6
 80051be:	60a3      	str	r3, [r4, #8]
 80051c0:	6823      	ldr	r3, [r4, #0]
 80051c2:	4433      	add	r3, r6
 80051c4:	6023      	str	r3, [r4, #0]
 80051c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051ca:	462a      	mov	r2, r5
 80051cc:	f000 fd62 	bl	8005c94 <_realloc_r>
 80051d0:	4606      	mov	r6, r0
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d1e0      	bne.n	8005198 <__ssputs_r+0x5c>
 80051d6:	4650      	mov	r0, sl
 80051d8:	6921      	ldr	r1, [r4, #16]
 80051da:	f7ff feb9 	bl	8004f50 <_free_r>
 80051de:	230c      	movs	r3, #12
 80051e0:	f8ca 3000 	str.w	r3, [sl]
 80051e4:	89a3      	ldrh	r3, [r4, #12]
 80051e6:	f04f 30ff 	mov.w	r0, #4294967295
 80051ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051ee:	81a3      	strh	r3, [r4, #12]
 80051f0:	e7e9      	b.n	80051c6 <__ssputs_r+0x8a>
	...

080051f4 <_svfiprintf_r>:
 80051f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80051f8:	4698      	mov	r8, r3
 80051fa:	898b      	ldrh	r3, [r1, #12]
 80051fc:	4607      	mov	r7, r0
 80051fe:	061b      	lsls	r3, r3, #24
 8005200:	460d      	mov	r5, r1
 8005202:	4614      	mov	r4, r2
 8005204:	b09d      	sub	sp, #116	@ 0x74
 8005206:	d510      	bpl.n	800522a <_svfiprintf_r+0x36>
 8005208:	690b      	ldr	r3, [r1, #16]
 800520a:	b973      	cbnz	r3, 800522a <_svfiprintf_r+0x36>
 800520c:	2140      	movs	r1, #64	@ 0x40
 800520e:	f7ff ff09 	bl	8005024 <_malloc_r>
 8005212:	6028      	str	r0, [r5, #0]
 8005214:	6128      	str	r0, [r5, #16]
 8005216:	b930      	cbnz	r0, 8005226 <_svfiprintf_r+0x32>
 8005218:	230c      	movs	r3, #12
 800521a:	603b      	str	r3, [r7, #0]
 800521c:	f04f 30ff 	mov.w	r0, #4294967295
 8005220:	b01d      	add	sp, #116	@ 0x74
 8005222:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005226:	2340      	movs	r3, #64	@ 0x40
 8005228:	616b      	str	r3, [r5, #20]
 800522a:	2300      	movs	r3, #0
 800522c:	9309      	str	r3, [sp, #36]	@ 0x24
 800522e:	2320      	movs	r3, #32
 8005230:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005234:	2330      	movs	r3, #48	@ 0x30
 8005236:	f04f 0901 	mov.w	r9, #1
 800523a:	f8cd 800c 	str.w	r8, [sp, #12]
 800523e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80053d8 <_svfiprintf_r+0x1e4>
 8005242:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005246:	4623      	mov	r3, r4
 8005248:	469a      	mov	sl, r3
 800524a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800524e:	b10a      	cbz	r2, 8005254 <_svfiprintf_r+0x60>
 8005250:	2a25      	cmp	r2, #37	@ 0x25
 8005252:	d1f9      	bne.n	8005248 <_svfiprintf_r+0x54>
 8005254:	ebba 0b04 	subs.w	fp, sl, r4
 8005258:	d00b      	beq.n	8005272 <_svfiprintf_r+0x7e>
 800525a:	465b      	mov	r3, fp
 800525c:	4622      	mov	r2, r4
 800525e:	4629      	mov	r1, r5
 8005260:	4638      	mov	r0, r7
 8005262:	f7ff ff6b 	bl	800513c <__ssputs_r>
 8005266:	3001      	adds	r0, #1
 8005268:	f000 80a7 	beq.w	80053ba <_svfiprintf_r+0x1c6>
 800526c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800526e:	445a      	add	r2, fp
 8005270:	9209      	str	r2, [sp, #36]	@ 0x24
 8005272:	f89a 3000 	ldrb.w	r3, [sl]
 8005276:	2b00      	cmp	r3, #0
 8005278:	f000 809f 	beq.w	80053ba <_svfiprintf_r+0x1c6>
 800527c:	2300      	movs	r3, #0
 800527e:	f04f 32ff 	mov.w	r2, #4294967295
 8005282:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005286:	f10a 0a01 	add.w	sl, sl, #1
 800528a:	9304      	str	r3, [sp, #16]
 800528c:	9307      	str	r3, [sp, #28]
 800528e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005292:	931a      	str	r3, [sp, #104]	@ 0x68
 8005294:	4654      	mov	r4, sl
 8005296:	2205      	movs	r2, #5
 8005298:	f814 1b01 	ldrb.w	r1, [r4], #1
 800529c:	484e      	ldr	r0, [pc, #312]	@ (80053d8 <_svfiprintf_r+0x1e4>)
 800529e:	f000 fcdd 	bl	8005c5c <memchr>
 80052a2:	9a04      	ldr	r2, [sp, #16]
 80052a4:	b9d8      	cbnz	r0, 80052de <_svfiprintf_r+0xea>
 80052a6:	06d0      	lsls	r0, r2, #27
 80052a8:	bf44      	itt	mi
 80052aa:	2320      	movmi	r3, #32
 80052ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052b0:	0711      	lsls	r1, r2, #28
 80052b2:	bf44      	itt	mi
 80052b4:	232b      	movmi	r3, #43	@ 0x2b
 80052b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80052ba:	f89a 3000 	ldrb.w	r3, [sl]
 80052be:	2b2a      	cmp	r3, #42	@ 0x2a
 80052c0:	d015      	beq.n	80052ee <_svfiprintf_r+0xfa>
 80052c2:	4654      	mov	r4, sl
 80052c4:	2000      	movs	r0, #0
 80052c6:	f04f 0c0a 	mov.w	ip, #10
 80052ca:	9a07      	ldr	r2, [sp, #28]
 80052cc:	4621      	mov	r1, r4
 80052ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052d2:	3b30      	subs	r3, #48	@ 0x30
 80052d4:	2b09      	cmp	r3, #9
 80052d6:	d94b      	bls.n	8005370 <_svfiprintf_r+0x17c>
 80052d8:	b1b0      	cbz	r0, 8005308 <_svfiprintf_r+0x114>
 80052da:	9207      	str	r2, [sp, #28]
 80052dc:	e014      	b.n	8005308 <_svfiprintf_r+0x114>
 80052de:	eba0 0308 	sub.w	r3, r0, r8
 80052e2:	fa09 f303 	lsl.w	r3, r9, r3
 80052e6:	4313      	orrs	r3, r2
 80052e8:	46a2      	mov	sl, r4
 80052ea:	9304      	str	r3, [sp, #16]
 80052ec:	e7d2      	b.n	8005294 <_svfiprintf_r+0xa0>
 80052ee:	9b03      	ldr	r3, [sp, #12]
 80052f0:	1d19      	adds	r1, r3, #4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	9103      	str	r1, [sp, #12]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	bfbb      	ittet	lt
 80052fa:	425b      	neglt	r3, r3
 80052fc:	f042 0202 	orrlt.w	r2, r2, #2
 8005300:	9307      	strge	r3, [sp, #28]
 8005302:	9307      	strlt	r3, [sp, #28]
 8005304:	bfb8      	it	lt
 8005306:	9204      	strlt	r2, [sp, #16]
 8005308:	7823      	ldrb	r3, [r4, #0]
 800530a:	2b2e      	cmp	r3, #46	@ 0x2e
 800530c:	d10a      	bne.n	8005324 <_svfiprintf_r+0x130>
 800530e:	7863      	ldrb	r3, [r4, #1]
 8005310:	2b2a      	cmp	r3, #42	@ 0x2a
 8005312:	d132      	bne.n	800537a <_svfiprintf_r+0x186>
 8005314:	9b03      	ldr	r3, [sp, #12]
 8005316:	3402      	adds	r4, #2
 8005318:	1d1a      	adds	r2, r3, #4
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	9203      	str	r2, [sp, #12]
 800531e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005322:	9305      	str	r3, [sp, #20]
 8005324:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80053dc <_svfiprintf_r+0x1e8>
 8005328:	2203      	movs	r2, #3
 800532a:	4650      	mov	r0, sl
 800532c:	7821      	ldrb	r1, [r4, #0]
 800532e:	f000 fc95 	bl	8005c5c <memchr>
 8005332:	b138      	cbz	r0, 8005344 <_svfiprintf_r+0x150>
 8005334:	2240      	movs	r2, #64	@ 0x40
 8005336:	9b04      	ldr	r3, [sp, #16]
 8005338:	eba0 000a 	sub.w	r0, r0, sl
 800533c:	4082      	lsls	r2, r0
 800533e:	4313      	orrs	r3, r2
 8005340:	3401      	adds	r4, #1
 8005342:	9304      	str	r3, [sp, #16]
 8005344:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005348:	2206      	movs	r2, #6
 800534a:	4825      	ldr	r0, [pc, #148]	@ (80053e0 <_svfiprintf_r+0x1ec>)
 800534c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005350:	f000 fc84 	bl	8005c5c <memchr>
 8005354:	2800      	cmp	r0, #0
 8005356:	d036      	beq.n	80053c6 <_svfiprintf_r+0x1d2>
 8005358:	4b22      	ldr	r3, [pc, #136]	@ (80053e4 <_svfiprintf_r+0x1f0>)
 800535a:	bb1b      	cbnz	r3, 80053a4 <_svfiprintf_r+0x1b0>
 800535c:	9b03      	ldr	r3, [sp, #12]
 800535e:	3307      	adds	r3, #7
 8005360:	f023 0307 	bic.w	r3, r3, #7
 8005364:	3308      	adds	r3, #8
 8005366:	9303      	str	r3, [sp, #12]
 8005368:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800536a:	4433      	add	r3, r6
 800536c:	9309      	str	r3, [sp, #36]	@ 0x24
 800536e:	e76a      	b.n	8005246 <_svfiprintf_r+0x52>
 8005370:	460c      	mov	r4, r1
 8005372:	2001      	movs	r0, #1
 8005374:	fb0c 3202 	mla	r2, ip, r2, r3
 8005378:	e7a8      	b.n	80052cc <_svfiprintf_r+0xd8>
 800537a:	2300      	movs	r3, #0
 800537c:	f04f 0c0a 	mov.w	ip, #10
 8005380:	4619      	mov	r1, r3
 8005382:	3401      	adds	r4, #1
 8005384:	9305      	str	r3, [sp, #20]
 8005386:	4620      	mov	r0, r4
 8005388:	f810 2b01 	ldrb.w	r2, [r0], #1
 800538c:	3a30      	subs	r2, #48	@ 0x30
 800538e:	2a09      	cmp	r2, #9
 8005390:	d903      	bls.n	800539a <_svfiprintf_r+0x1a6>
 8005392:	2b00      	cmp	r3, #0
 8005394:	d0c6      	beq.n	8005324 <_svfiprintf_r+0x130>
 8005396:	9105      	str	r1, [sp, #20]
 8005398:	e7c4      	b.n	8005324 <_svfiprintf_r+0x130>
 800539a:	4604      	mov	r4, r0
 800539c:	2301      	movs	r3, #1
 800539e:	fb0c 2101 	mla	r1, ip, r1, r2
 80053a2:	e7f0      	b.n	8005386 <_svfiprintf_r+0x192>
 80053a4:	ab03      	add	r3, sp, #12
 80053a6:	9300      	str	r3, [sp, #0]
 80053a8:	462a      	mov	r2, r5
 80053aa:	4638      	mov	r0, r7
 80053ac:	4b0e      	ldr	r3, [pc, #56]	@ (80053e8 <_svfiprintf_r+0x1f4>)
 80053ae:	a904      	add	r1, sp, #16
 80053b0:	f3af 8000 	nop.w
 80053b4:	1c42      	adds	r2, r0, #1
 80053b6:	4606      	mov	r6, r0
 80053b8:	d1d6      	bne.n	8005368 <_svfiprintf_r+0x174>
 80053ba:	89ab      	ldrh	r3, [r5, #12]
 80053bc:	065b      	lsls	r3, r3, #25
 80053be:	f53f af2d 	bmi.w	800521c <_svfiprintf_r+0x28>
 80053c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80053c4:	e72c      	b.n	8005220 <_svfiprintf_r+0x2c>
 80053c6:	ab03      	add	r3, sp, #12
 80053c8:	9300      	str	r3, [sp, #0]
 80053ca:	462a      	mov	r2, r5
 80053cc:	4638      	mov	r0, r7
 80053ce:	4b06      	ldr	r3, [pc, #24]	@ (80053e8 <_svfiprintf_r+0x1f4>)
 80053d0:	a904      	add	r1, sp, #16
 80053d2:	f000 f9bd 	bl	8005750 <_printf_i>
 80053d6:	e7ed      	b.n	80053b4 <_svfiprintf_r+0x1c0>
 80053d8:	080073e2 	.word	0x080073e2
 80053dc:	080073e8 	.word	0x080073e8
 80053e0:	080073ec 	.word	0x080073ec
 80053e4:	00000000 	.word	0x00000000
 80053e8:	0800513d 	.word	0x0800513d

080053ec <__sfputc_r>:
 80053ec:	6893      	ldr	r3, [r2, #8]
 80053ee:	b410      	push	{r4}
 80053f0:	3b01      	subs	r3, #1
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	6093      	str	r3, [r2, #8]
 80053f6:	da07      	bge.n	8005408 <__sfputc_r+0x1c>
 80053f8:	6994      	ldr	r4, [r2, #24]
 80053fa:	42a3      	cmp	r3, r4
 80053fc:	db01      	blt.n	8005402 <__sfputc_r+0x16>
 80053fe:	290a      	cmp	r1, #10
 8005400:	d102      	bne.n	8005408 <__sfputc_r+0x1c>
 8005402:	bc10      	pop	{r4}
 8005404:	f000 bb6c 	b.w	8005ae0 <__swbuf_r>
 8005408:	6813      	ldr	r3, [r2, #0]
 800540a:	1c58      	adds	r0, r3, #1
 800540c:	6010      	str	r0, [r2, #0]
 800540e:	7019      	strb	r1, [r3, #0]
 8005410:	4608      	mov	r0, r1
 8005412:	bc10      	pop	{r4}
 8005414:	4770      	bx	lr

08005416 <__sfputs_r>:
 8005416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005418:	4606      	mov	r6, r0
 800541a:	460f      	mov	r7, r1
 800541c:	4614      	mov	r4, r2
 800541e:	18d5      	adds	r5, r2, r3
 8005420:	42ac      	cmp	r4, r5
 8005422:	d101      	bne.n	8005428 <__sfputs_r+0x12>
 8005424:	2000      	movs	r0, #0
 8005426:	e007      	b.n	8005438 <__sfputs_r+0x22>
 8005428:	463a      	mov	r2, r7
 800542a:	4630      	mov	r0, r6
 800542c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005430:	f7ff ffdc 	bl	80053ec <__sfputc_r>
 8005434:	1c43      	adds	r3, r0, #1
 8005436:	d1f3      	bne.n	8005420 <__sfputs_r+0xa>
 8005438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800543c <_vfiprintf_r>:
 800543c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005440:	460d      	mov	r5, r1
 8005442:	4614      	mov	r4, r2
 8005444:	4698      	mov	r8, r3
 8005446:	4606      	mov	r6, r0
 8005448:	b09d      	sub	sp, #116	@ 0x74
 800544a:	b118      	cbz	r0, 8005454 <_vfiprintf_r+0x18>
 800544c:	6a03      	ldr	r3, [r0, #32]
 800544e:	b90b      	cbnz	r3, 8005454 <_vfiprintf_r+0x18>
 8005450:	f7ff fc56 	bl	8004d00 <__sinit>
 8005454:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005456:	07d9      	lsls	r1, r3, #31
 8005458:	d405      	bmi.n	8005466 <_vfiprintf_r+0x2a>
 800545a:	89ab      	ldrh	r3, [r5, #12]
 800545c:	059a      	lsls	r2, r3, #22
 800545e:	d402      	bmi.n	8005466 <_vfiprintf_r+0x2a>
 8005460:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005462:	f7ff fd72 	bl	8004f4a <__retarget_lock_acquire_recursive>
 8005466:	89ab      	ldrh	r3, [r5, #12]
 8005468:	071b      	lsls	r3, r3, #28
 800546a:	d501      	bpl.n	8005470 <_vfiprintf_r+0x34>
 800546c:	692b      	ldr	r3, [r5, #16]
 800546e:	b99b      	cbnz	r3, 8005498 <_vfiprintf_r+0x5c>
 8005470:	4629      	mov	r1, r5
 8005472:	4630      	mov	r0, r6
 8005474:	f000 fb72 	bl	8005b5c <__swsetup_r>
 8005478:	b170      	cbz	r0, 8005498 <_vfiprintf_r+0x5c>
 800547a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800547c:	07dc      	lsls	r4, r3, #31
 800547e:	d504      	bpl.n	800548a <_vfiprintf_r+0x4e>
 8005480:	f04f 30ff 	mov.w	r0, #4294967295
 8005484:	b01d      	add	sp, #116	@ 0x74
 8005486:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800548a:	89ab      	ldrh	r3, [r5, #12]
 800548c:	0598      	lsls	r0, r3, #22
 800548e:	d4f7      	bmi.n	8005480 <_vfiprintf_r+0x44>
 8005490:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005492:	f7ff fd5b 	bl	8004f4c <__retarget_lock_release_recursive>
 8005496:	e7f3      	b.n	8005480 <_vfiprintf_r+0x44>
 8005498:	2300      	movs	r3, #0
 800549a:	9309      	str	r3, [sp, #36]	@ 0x24
 800549c:	2320      	movs	r3, #32
 800549e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80054a2:	2330      	movs	r3, #48	@ 0x30
 80054a4:	f04f 0901 	mov.w	r9, #1
 80054a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80054ac:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005658 <_vfiprintf_r+0x21c>
 80054b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80054b4:	4623      	mov	r3, r4
 80054b6:	469a      	mov	sl, r3
 80054b8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80054bc:	b10a      	cbz	r2, 80054c2 <_vfiprintf_r+0x86>
 80054be:	2a25      	cmp	r2, #37	@ 0x25
 80054c0:	d1f9      	bne.n	80054b6 <_vfiprintf_r+0x7a>
 80054c2:	ebba 0b04 	subs.w	fp, sl, r4
 80054c6:	d00b      	beq.n	80054e0 <_vfiprintf_r+0xa4>
 80054c8:	465b      	mov	r3, fp
 80054ca:	4622      	mov	r2, r4
 80054cc:	4629      	mov	r1, r5
 80054ce:	4630      	mov	r0, r6
 80054d0:	f7ff ffa1 	bl	8005416 <__sfputs_r>
 80054d4:	3001      	adds	r0, #1
 80054d6:	f000 80a7 	beq.w	8005628 <_vfiprintf_r+0x1ec>
 80054da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80054dc:	445a      	add	r2, fp
 80054de:	9209      	str	r2, [sp, #36]	@ 0x24
 80054e0:	f89a 3000 	ldrb.w	r3, [sl]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f000 809f 	beq.w	8005628 <_vfiprintf_r+0x1ec>
 80054ea:	2300      	movs	r3, #0
 80054ec:	f04f 32ff 	mov.w	r2, #4294967295
 80054f0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80054f4:	f10a 0a01 	add.w	sl, sl, #1
 80054f8:	9304      	str	r3, [sp, #16]
 80054fa:	9307      	str	r3, [sp, #28]
 80054fc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005500:	931a      	str	r3, [sp, #104]	@ 0x68
 8005502:	4654      	mov	r4, sl
 8005504:	2205      	movs	r2, #5
 8005506:	f814 1b01 	ldrb.w	r1, [r4], #1
 800550a:	4853      	ldr	r0, [pc, #332]	@ (8005658 <_vfiprintf_r+0x21c>)
 800550c:	f000 fba6 	bl	8005c5c <memchr>
 8005510:	9a04      	ldr	r2, [sp, #16]
 8005512:	b9d8      	cbnz	r0, 800554c <_vfiprintf_r+0x110>
 8005514:	06d1      	lsls	r1, r2, #27
 8005516:	bf44      	itt	mi
 8005518:	2320      	movmi	r3, #32
 800551a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800551e:	0713      	lsls	r3, r2, #28
 8005520:	bf44      	itt	mi
 8005522:	232b      	movmi	r3, #43	@ 0x2b
 8005524:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005528:	f89a 3000 	ldrb.w	r3, [sl]
 800552c:	2b2a      	cmp	r3, #42	@ 0x2a
 800552e:	d015      	beq.n	800555c <_vfiprintf_r+0x120>
 8005530:	4654      	mov	r4, sl
 8005532:	2000      	movs	r0, #0
 8005534:	f04f 0c0a 	mov.w	ip, #10
 8005538:	9a07      	ldr	r2, [sp, #28]
 800553a:	4621      	mov	r1, r4
 800553c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005540:	3b30      	subs	r3, #48	@ 0x30
 8005542:	2b09      	cmp	r3, #9
 8005544:	d94b      	bls.n	80055de <_vfiprintf_r+0x1a2>
 8005546:	b1b0      	cbz	r0, 8005576 <_vfiprintf_r+0x13a>
 8005548:	9207      	str	r2, [sp, #28]
 800554a:	e014      	b.n	8005576 <_vfiprintf_r+0x13a>
 800554c:	eba0 0308 	sub.w	r3, r0, r8
 8005550:	fa09 f303 	lsl.w	r3, r9, r3
 8005554:	4313      	orrs	r3, r2
 8005556:	46a2      	mov	sl, r4
 8005558:	9304      	str	r3, [sp, #16]
 800555a:	e7d2      	b.n	8005502 <_vfiprintf_r+0xc6>
 800555c:	9b03      	ldr	r3, [sp, #12]
 800555e:	1d19      	adds	r1, r3, #4
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	9103      	str	r1, [sp, #12]
 8005564:	2b00      	cmp	r3, #0
 8005566:	bfbb      	ittet	lt
 8005568:	425b      	neglt	r3, r3
 800556a:	f042 0202 	orrlt.w	r2, r2, #2
 800556e:	9307      	strge	r3, [sp, #28]
 8005570:	9307      	strlt	r3, [sp, #28]
 8005572:	bfb8      	it	lt
 8005574:	9204      	strlt	r2, [sp, #16]
 8005576:	7823      	ldrb	r3, [r4, #0]
 8005578:	2b2e      	cmp	r3, #46	@ 0x2e
 800557a:	d10a      	bne.n	8005592 <_vfiprintf_r+0x156>
 800557c:	7863      	ldrb	r3, [r4, #1]
 800557e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005580:	d132      	bne.n	80055e8 <_vfiprintf_r+0x1ac>
 8005582:	9b03      	ldr	r3, [sp, #12]
 8005584:	3402      	adds	r4, #2
 8005586:	1d1a      	adds	r2, r3, #4
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	9203      	str	r2, [sp, #12]
 800558c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005590:	9305      	str	r3, [sp, #20]
 8005592:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800565c <_vfiprintf_r+0x220>
 8005596:	2203      	movs	r2, #3
 8005598:	4650      	mov	r0, sl
 800559a:	7821      	ldrb	r1, [r4, #0]
 800559c:	f000 fb5e 	bl	8005c5c <memchr>
 80055a0:	b138      	cbz	r0, 80055b2 <_vfiprintf_r+0x176>
 80055a2:	2240      	movs	r2, #64	@ 0x40
 80055a4:	9b04      	ldr	r3, [sp, #16]
 80055a6:	eba0 000a 	sub.w	r0, r0, sl
 80055aa:	4082      	lsls	r2, r0
 80055ac:	4313      	orrs	r3, r2
 80055ae:	3401      	adds	r4, #1
 80055b0:	9304      	str	r3, [sp, #16]
 80055b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80055b6:	2206      	movs	r2, #6
 80055b8:	4829      	ldr	r0, [pc, #164]	@ (8005660 <_vfiprintf_r+0x224>)
 80055ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80055be:	f000 fb4d 	bl	8005c5c <memchr>
 80055c2:	2800      	cmp	r0, #0
 80055c4:	d03f      	beq.n	8005646 <_vfiprintf_r+0x20a>
 80055c6:	4b27      	ldr	r3, [pc, #156]	@ (8005664 <_vfiprintf_r+0x228>)
 80055c8:	bb1b      	cbnz	r3, 8005612 <_vfiprintf_r+0x1d6>
 80055ca:	9b03      	ldr	r3, [sp, #12]
 80055cc:	3307      	adds	r3, #7
 80055ce:	f023 0307 	bic.w	r3, r3, #7
 80055d2:	3308      	adds	r3, #8
 80055d4:	9303      	str	r3, [sp, #12]
 80055d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80055d8:	443b      	add	r3, r7
 80055da:	9309      	str	r3, [sp, #36]	@ 0x24
 80055dc:	e76a      	b.n	80054b4 <_vfiprintf_r+0x78>
 80055de:	460c      	mov	r4, r1
 80055e0:	2001      	movs	r0, #1
 80055e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80055e6:	e7a8      	b.n	800553a <_vfiprintf_r+0xfe>
 80055e8:	2300      	movs	r3, #0
 80055ea:	f04f 0c0a 	mov.w	ip, #10
 80055ee:	4619      	mov	r1, r3
 80055f0:	3401      	adds	r4, #1
 80055f2:	9305      	str	r3, [sp, #20]
 80055f4:	4620      	mov	r0, r4
 80055f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80055fa:	3a30      	subs	r2, #48	@ 0x30
 80055fc:	2a09      	cmp	r2, #9
 80055fe:	d903      	bls.n	8005608 <_vfiprintf_r+0x1cc>
 8005600:	2b00      	cmp	r3, #0
 8005602:	d0c6      	beq.n	8005592 <_vfiprintf_r+0x156>
 8005604:	9105      	str	r1, [sp, #20]
 8005606:	e7c4      	b.n	8005592 <_vfiprintf_r+0x156>
 8005608:	4604      	mov	r4, r0
 800560a:	2301      	movs	r3, #1
 800560c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005610:	e7f0      	b.n	80055f4 <_vfiprintf_r+0x1b8>
 8005612:	ab03      	add	r3, sp, #12
 8005614:	9300      	str	r3, [sp, #0]
 8005616:	462a      	mov	r2, r5
 8005618:	4630      	mov	r0, r6
 800561a:	4b13      	ldr	r3, [pc, #76]	@ (8005668 <_vfiprintf_r+0x22c>)
 800561c:	a904      	add	r1, sp, #16
 800561e:	f3af 8000 	nop.w
 8005622:	4607      	mov	r7, r0
 8005624:	1c78      	adds	r0, r7, #1
 8005626:	d1d6      	bne.n	80055d6 <_vfiprintf_r+0x19a>
 8005628:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800562a:	07d9      	lsls	r1, r3, #31
 800562c:	d405      	bmi.n	800563a <_vfiprintf_r+0x1fe>
 800562e:	89ab      	ldrh	r3, [r5, #12]
 8005630:	059a      	lsls	r2, r3, #22
 8005632:	d402      	bmi.n	800563a <_vfiprintf_r+0x1fe>
 8005634:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005636:	f7ff fc89 	bl	8004f4c <__retarget_lock_release_recursive>
 800563a:	89ab      	ldrh	r3, [r5, #12]
 800563c:	065b      	lsls	r3, r3, #25
 800563e:	f53f af1f 	bmi.w	8005480 <_vfiprintf_r+0x44>
 8005642:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005644:	e71e      	b.n	8005484 <_vfiprintf_r+0x48>
 8005646:	ab03      	add	r3, sp, #12
 8005648:	9300      	str	r3, [sp, #0]
 800564a:	462a      	mov	r2, r5
 800564c:	4630      	mov	r0, r6
 800564e:	4b06      	ldr	r3, [pc, #24]	@ (8005668 <_vfiprintf_r+0x22c>)
 8005650:	a904      	add	r1, sp, #16
 8005652:	f000 f87d 	bl	8005750 <_printf_i>
 8005656:	e7e4      	b.n	8005622 <_vfiprintf_r+0x1e6>
 8005658:	080073e2 	.word	0x080073e2
 800565c:	080073e8 	.word	0x080073e8
 8005660:	080073ec 	.word	0x080073ec
 8005664:	00000000 	.word	0x00000000
 8005668:	08005417 	.word	0x08005417

0800566c <_printf_common>:
 800566c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005670:	4616      	mov	r6, r2
 8005672:	4698      	mov	r8, r3
 8005674:	688a      	ldr	r2, [r1, #8]
 8005676:	690b      	ldr	r3, [r1, #16]
 8005678:	4607      	mov	r7, r0
 800567a:	4293      	cmp	r3, r2
 800567c:	bfb8      	it	lt
 800567e:	4613      	movlt	r3, r2
 8005680:	6033      	str	r3, [r6, #0]
 8005682:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005686:	460c      	mov	r4, r1
 8005688:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800568c:	b10a      	cbz	r2, 8005692 <_printf_common+0x26>
 800568e:	3301      	adds	r3, #1
 8005690:	6033      	str	r3, [r6, #0]
 8005692:	6823      	ldr	r3, [r4, #0]
 8005694:	0699      	lsls	r1, r3, #26
 8005696:	bf42      	ittt	mi
 8005698:	6833      	ldrmi	r3, [r6, #0]
 800569a:	3302      	addmi	r3, #2
 800569c:	6033      	strmi	r3, [r6, #0]
 800569e:	6825      	ldr	r5, [r4, #0]
 80056a0:	f015 0506 	ands.w	r5, r5, #6
 80056a4:	d106      	bne.n	80056b4 <_printf_common+0x48>
 80056a6:	f104 0a19 	add.w	sl, r4, #25
 80056aa:	68e3      	ldr	r3, [r4, #12]
 80056ac:	6832      	ldr	r2, [r6, #0]
 80056ae:	1a9b      	subs	r3, r3, r2
 80056b0:	42ab      	cmp	r3, r5
 80056b2:	dc2b      	bgt.n	800570c <_printf_common+0xa0>
 80056b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80056b8:	6822      	ldr	r2, [r4, #0]
 80056ba:	3b00      	subs	r3, #0
 80056bc:	bf18      	it	ne
 80056be:	2301      	movne	r3, #1
 80056c0:	0692      	lsls	r2, r2, #26
 80056c2:	d430      	bmi.n	8005726 <_printf_common+0xba>
 80056c4:	4641      	mov	r1, r8
 80056c6:	4638      	mov	r0, r7
 80056c8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80056cc:	47c8      	blx	r9
 80056ce:	3001      	adds	r0, #1
 80056d0:	d023      	beq.n	800571a <_printf_common+0xae>
 80056d2:	6823      	ldr	r3, [r4, #0]
 80056d4:	6922      	ldr	r2, [r4, #16]
 80056d6:	f003 0306 	and.w	r3, r3, #6
 80056da:	2b04      	cmp	r3, #4
 80056dc:	bf14      	ite	ne
 80056de:	2500      	movne	r5, #0
 80056e0:	6833      	ldreq	r3, [r6, #0]
 80056e2:	f04f 0600 	mov.w	r6, #0
 80056e6:	bf08      	it	eq
 80056e8:	68e5      	ldreq	r5, [r4, #12]
 80056ea:	f104 041a 	add.w	r4, r4, #26
 80056ee:	bf08      	it	eq
 80056f0:	1aed      	subeq	r5, r5, r3
 80056f2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80056f6:	bf08      	it	eq
 80056f8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80056fc:	4293      	cmp	r3, r2
 80056fe:	bfc4      	itt	gt
 8005700:	1a9b      	subgt	r3, r3, r2
 8005702:	18ed      	addgt	r5, r5, r3
 8005704:	42b5      	cmp	r5, r6
 8005706:	d11a      	bne.n	800573e <_printf_common+0xd2>
 8005708:	2000      	movs	r0, #0
 800570a:	e008      	b.n	800571e <_printf_common+0xb2>
 800570c:	2301      	movs	r3, #1
 800570e:	4652      	mov	r2, sl
 8005710:	4641      	mov	r1, r8
 8005712:	4638      	mov	r0, r7
 8005714:	47c8      	blx	r9
 8005716:	3001      	adds	r0, #1
 8005718:	d103      	bne.n	8005722 <_printf_common+0xb6>
 800571a:	f04f 30ff 	mov.w	r0, #4294967295
 800571e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005722:	3501      	adds	r5, #1
 8005724:	e7c1      	b.n	80056aa <_printf_common+0x3e>
 8005726:	2030      	movs	r0, #48	@ 0x30
 8005728:	18e1      	adds	r1, r4, r3
 800572a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005734:	4422      	add	r2, r4
 8005736:	3302      	adds	r3, #2
 8005738:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800573c:	e7c2      	b.n	80056c4 <_printf_common+0x58>
 800573e:	2301      	movs	r3, #1
 8005740:	4622      	mov	r2, r4
 8005742:	4641      	mov	r1, r8
 8005744:	4638      	mov	r0, r7
 8005746:	47c8      	blx	r9
 8005748:	3001      	adds	r0, #1
 800574a:	d0e6      	beq.n	800571a <_printf_common+0xae>
 800574c:	3601      	adds	r6, #1
 800574e:	e7d9      	b.n	8005704 <_printf_common+0x98>

08005750 <_printf_i>:
 8005750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005754:	7e0f      	ldrb	r7, [r1, #24]
 8005756:	4691      	mov	r9, r2
 8005758:	2f78      	cmp	r7, #120	@ 0x78
 800575a:	4680      	mov	r8, r0
 800575c:	460c      	mov	r4, r1
 800575e:	469a      	mov	sl, r3
 8005760:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005762:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005766:	d807      	bhi.n	8005778 <_printf_i+0x28>
 8005768:	2f62      	cmp	r7, #98	@ 0x62
 800576a:	d80a      	bhi.n	8005782 <_printf_i+0x32>
 800576c:	2f00      	cmp	r7, #0
 800576e:	f000 80d3 	beq.w	8005918 <_printf_i+0x1c8>
 8005772:	2f58      	cmp	r7, #88	@ 0x58
 8005774:	f000 80ba 	beq.w	80058ec <_printf_i+0x19c>
 8005778:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800577c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005780:	e03a      	b.n	80057f8 <_printf_i+0xa8>
 8005782:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005786:	2b15      	cmp	r3, #21
 8005788:	d8f6      	bhi.n	8005778 <_printf_i+0x28>
 800578a:	a101      	add	r1, pc, #4	@ (adr r1, 8005790 <_printf_i+0x40>)
 800578c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005790:	080057e9 	.word	0x080057e9
 8005794:	080057fd 	.word	0x080057fd
 8005798:	08005779 	.word	0x08005779
 800579c:	08005779 	.word	0x08005779
 80057a0:	08005779 	.word	0x08005779
 80057a4:	08005779 	.word	0x08005779
 80057a8:	080057fd 	.word	0x080057fd
 80057ac:	08005779 	.word	0x08005779
 80057b0:	08005779 	.word	0x08005779
 80057b4:	08005779 	.word	0x08005779
 80057b8:	08005779 	.word	0x08005779
 80057bc:	080058ff 	.word	0x080058ff
 80057c0:	08005827 	.word	0x08005827
 80057c4:	080058b9 	.word	0x080058b9
 80057c8:	08005779 	.word	0x08005779
 80057cc:	08005779 	.word	0x08005779
 80057d0:	08005921 	.word	0x08005921
 80057d4:	08005779 	.word	0x08005779
 80057d8:	08005827 	.word	0x08005827
 80057dc:	08005779 	.word	0x08005779
 80057e0:	08005779 	.word	0x08005779
 80057e4:	080058c1 	.word	0x080058c1
 80057e8:	6833      	ldr	r3, [r6, #0]
 80057ea:	1d1a      	adds	r2, r3, #4
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	6032      	str	r2, [r6, #0]
 80057f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80057f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80057f8:	2301      	movs	r3, #1
 80057fa:	e09e      	b.n	800593a <_printf_i+0x1ea>
 80057fc:	6833      	ldr	r3, [r6, #0]
 80057fe:	6820      	ldr	r0, [r4, #0]
 8005800:	1d19      	adds	r1, r3, #4
 8005802:	6031      	str	r1, [r6, #0]
 8005804:	0606      	lsls	r6, r0, #24
 8005806:	d501      	bpl.n	800580c <_printf_i+0xbc>
 8005808:	681d      	ldr	r5, [r3, #0]
 800580a:	e003      	b.n	8005814 <_printf_i+0xc4>
 800580c:	0645      	lsls	r5, r0, #25
 800580e:	d5fb      	bpl.n	8005808 <_printf_i+0xb8>
 8005810:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005814:	2d00      	cmp	r5, #0
 8005816:	da03      	bge.n	8005820 <_printf_i+0xd0>
 8005818:	232d      	movs	r3, #45	@ 0x2d
 800581a:	426d      	negs	r5, r5
 800581c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005820:	230a      	movs	r3, #10
 8005822:	4859      	ldr	r0, [pc, #356]	@ (8005988 <_printf_i+0x238>)
 8005824:	e011      	b.n	800584a <_printf_i+0xfa>
 8005826:	6821      	ldr	r1, [r4, #0]
 8005828:	6833      	ldr	r3, [r6, #0]
 800582a:	0608      	lsls	r0, r1, #24
 800582c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005830:	d402      	bmi.n	8005838 <_printf_i+0xe8>
 8005832:	0649      	lsls	r1, r1, #25
 8005834:	bf48      	it	mi
 8005836:	b2ad      	uxthmi	r5, r5
 8005838:	2f6f      	cmp	r7, #111	@ 0x6f
 800583a:	6033      	str	r3, [r6, #0]
 800583c:	bf14      	ite	ne
 800583e:	230a      	movne	r3, #10
 8005840:	2308      	moveq	r3, #8
 8005842:	4851      	ldr	r0, [pc, #324]	@ (8005988 <_printf_i+0x238>)
 8005844:	2100      	movs	r1, #0
 8005846:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800584a:	6866      	ldr	r6, [r4, #4]
 800584c:	2e00      	cmp	r6, #0
 800584e:	bfa8      	it	ge
 8005850:	6821      	ldrge	r1, [r4, #0]
 8005852:	60a6      	str	r6, [r4, #8]
 8005854:	bfa4      	itt	ge
 8005856:	f021 0104 	bicge.w	r1, r1, #4
 800585a:	6021      	strge	r1, [r4, #0]
 800585c:	b90d      	cbnz	r5, 8005862 <_printf_i+0x112>
 800585e:	2e00      	cmp	r6, #0
 8005860:	d04b      	beq.n	80058fa <_printf_i+0x1aa>
 8005862:	4616      	mov	r6, r2
 8005864:	fbb5 f1f3 	udiv	r1, r5, r3
 8005868:	fb03 5711 	mls	r7, r3, r1, r5
 800586c:	5dc7      	ldrb	r7, [r0, r7]
 800586e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005872:	462f      	mov	r7, r5
 8005874:	42bb      	cmp	r3, r7
 8005876:	460d      	mov	r5, r1
 8005878:	d9f4      	bls.n	8005864 <_printf_i+0x114>
 800587a:	2b08      	cmp	r3, #8
 800587c:	d10b      	bne.n	8005896 <_printf_i+0x146>
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	07df      	lsls	r7, r3, #31
 8005882:	d508      	bpl.n	8005896 <_printf_i+0x146>
 8005884:	6923      	ldr	r3, [r4, #16]
 8005886:	6861      	ldr	r1, [r4, #4]
 8005888:	4299      	cmp	r1, r3
 800588a:	bfde      	ittt	le
 800588c:	2330      	movle	r3, #48	@ 0x30
 800588e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005892:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005896:	1b92      	subs	r2, r2, r6
 8005898:	6122      	str	r2, [r4, #16]
 800589a:	464b      	mov	r3, r9
 800589c:	4621      	mov	r1, r4
 800589e:	4640      	mov	r0, r8
 80058a0:	f8cd a000 	str.w	sl, [sp]
 80058a4:	aa03      	add	r2, sp, #12
 80058a6:	f7ff fee1 	bl	800566c <_printf_common>
 80058aa:	3001      	adds	r0, #1
 80058ac:	d14a      	bne.n	8005944 <_printf_i+0x1f4>
 80058ae:	f04f 30ff 	mov.w	r0, #4294967295
 80058b2:	b004      	add	sp, #16
 80058b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	f043 0320 	orr.w	r3, r3, #32
 80058be:	6023      	str	r3, [r4, #0]
 80058c0:	2778      	movs	r7, #120	@ 0x78
 80058c2:	4832      	ldr	r0, [pc, #200]	@ (800598c <_printf_i+0x23c>)
 80058c4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80058c8:	6823      	ldr	r3, [r4, #0]
 80058ca:	6831      	ldr	r1, [r6, #0]
 80058cc:	061f      	lsls	r7, r3, #24
 80058ce:	f851 5b04 	ldr.w	r5, [r1], #4
 80058d2:	d402      	bmi.n	80058da <_printf_i+0x18a>
 80058d4:	065f      	lsls	r7, r3, #25
 80058d6:	bf48      	it	mi
 80058d8:	b2ad      	uxthmi	r5, r5
 80058da:	6031      	str	r1, [r6, #0]
 80058dc:	07d9      	lsls	r1, r3, #31
 80058de:	bf44      	itt	mi
 80058e0:	f043 0320 	orrmi.w	r3, r3, #32
 80058e4:	6023      	strmi	r3, [r4, #0]
 80058e6:	b11d      	cbz	r5, 80058f0 <_printf_i+0x1a0>
 80058e8:	2310      	movs	r3, #16
 80058ea:	e7ab      	b.n	8005844 <_printf_i+0xf4>
 80058ec:	4826      	ldr	r0, [pc, #152]	@ (8005988 <_printf_i+0x238>)
 80058ee:	e7e9      	b.n	80058c4 <_printf_i+0x174>
 80058f0:	6823      	ldr	r3, [r4, #0]
 80058f2:	f023 0320 	bic.w	r3, r3, #32
 80058f6:	6023      	str	r3, [r4, #0]
 80058f8:	e7f6      	b.n	80058e8 <_printf_i+0x198>
 80058fa:	4616      	mov	r6, r2
 80058fc:	e7bd      	b.n	800587a <_printf_i+0x12a>
 80058fe:	6833      	ldr	r3, [r6, #0]
 8005900:	6825      	ldr	r5, [r4, #0]
 8005902:	1d18      	adds	r0, r3, #4
 8005904:	6961      	ldr	r1, [r4, #20]
 8005906:	6030      	str	r0, [r6, #0]
 8005908:	062e      	lsls	r6, r5, #24
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	d501      	bpl.n	8005912 <_printf_i+0x1c2>
 800590e:	6019      	str	r1, [r3, #0]
 8005910:	e002      	b.n	8005918 <_printf_i+0x1c8>
 8005912:	0668      	lsls	r0, r5, #25
 8005914:	d5fb      	bpl.n	800590e <_printf_i+0x1be>
 8005916:	8019      	strh	r1, [r3, #0]
 8005918:	2300      	movs	r3, #0
 800591a:	4616      	mov	r6, r2
 800591c:	6123      	str	r3, [r4, #16]
 800591e:	e7bc      	b.n	800589a <_printf_i+0x14a>
 8005920:	6833      	ldr	r3, [r6, #0]
 8005922:	2100      	movs	r1, #0
 8005924:	1d1a      	adds	r2, r3, #4
 8005926:	6032      	str	r2, [r6, #0]
 8005928:	681e      	ldr	r6, [r3, #0]
 800592a:	6862      	ldr	r2, [r4, #4]
 800592c:	4630      	mov	r0, r6
 800592e:	f000 f995 	bl	8005c5c <memchr>
 8005932:	b108      	cbz	r0, 8005938 <_printf_i+0x1e8>
 8005934:	1b80      	subs	r0, r0, r6
 8005936:	6060      	str	r0, [r4, #4]
 8005938:	6863      	ldr	r3, [r4, #4]
 800593a:	6123      	str	r3, [r4, #16]
 800593c:	2300      	movs	r3, #0
 800593e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005942:	e7aa      	b.n	800589a <_printf_i+0x14a>
 8005944:	4632      	mov	r2, r6
 8005946:	4649      	mov	r1, r9
 8005948:	4640      	mov	r0, r8
 800594a:	6923      	ldr	r3, [r4, #16]
 800594c:	47d0      	blx	sl
 800594e:	3001      	adds	r0, #1
 8005950:	d0ad      	beq.n	80058ae <_printf_i+0x15e>
 8005952:	6823      	ldr	r3, [r4, #0]
 8005954:	079b      	lsls	r3, r3, #30
 8005956:	d413      	bmi.n	8005980 <_printf_i+0x230>
 8005958:	68e0      	ldr	r0, [r4, #12]
 800595a:	9b03      	ldr	r3, [sp, #12]
 800595c:	4298      	cmp	r0, r3
 800595e:	bfb8      	it	lt
 8005960:	4618      	movlt	r0, r3
 8005962:	e7a6      	b.n	80058b2 <_printf_i+0x162>
 8005964:	2301      	movs	r3, #1
 8005966:	4632      	mov	r2, r6
 8005968:	4649      	mov	r1, r9
 800596a:	4640      	mov	r0, r8
 800596c:	47d0      	blx	sl
 800596e:	3001      	adds	r0, #1
 8005970:	d09d      	beq.n	80058ae <_printf_i+0x15e>
 8005972:	3501      	adds	r5, #1
 8005974:	68e3      	ldr	r3, [r4, #12]
 8005976:	9903      	ldr	r1, [sp, #12]
 8005978:	1a5b      	subs	r3, r3, r1
 800597a:	42ab      	cmp	r3, r5
 800597c:	dcf2      	bgt.n	8005964 <_printf_i+0x214>
 800597e:	e7eb      	b.n	8005958 <_printf_i+0x208>
 8005980:	2500      	movs	r5, #0
 8005982:	f104 0619 	add.w	r6, r4, #25
 8005986:	e7f5      	b.n	8005974 <_printf_i+0x224>
 8005988:	080073f3 	.word	0x080073f3
 800598c:	08007404 	.word	0x08007404

08005990 <__sflush_r>:
 8005990:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005996:	0716      	lsls	r6, r2, #28
 8005998:	4605      	mov	r5, r0
 800599a:	460c      	mov	r4, r1
 800599c:	d454      	bmi.n	8005a48 <__sflush_r+0xb8>
 800599e:	684b      	ldr	r3, [r1, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	dc02      	bgt.n	80059aa <__sflush_r+0x1a>
 80059a4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	dd48      	ble.n	8005a3c <__sflush_r+0xac>
 80059aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059ac:	2e00      	cmp	r6, #0
 80059ae:	d045      	beq.n	8005a3c <__sflush_r+0xac>
 80059b0:	2300      	movs	r3, #0
 80059b2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80059b6:	682f      	ldr	r7, [r5, #0]
 80059b8:	6a21      	ldr	r1, [r4, #32]
 80059ba:	602b      	str	r3, [r5, #0]
 80059bc:	d030      	beq.n	8005a20 <__sflush_r+0x90>
 80059be:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80059c0:	89a3      	ldrh	r3, [r4, #12]
 80059c2:	0759      	lsls	r1, r3, #29
 80059c4:	d505      	bpl.n	80059d2 <__sflush_r+0x42>
 80059c6:	6863      	ldr	r3, [r4, #4]
 80059c8:	1ad2      	subs	r2, r2, r3
 80059ca:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80059cc:	b10b      	cbz	r3, 80059d2 <__sflush_r+0x42>
 80059ce:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80059d0:	1ad2      	subs	r2, r2, r3
 80059d2:	2300      	movs	r3, #0
 80059d4:	4628      	mov	r0, r5
 80059d6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80059d8:	6a21      	ldr	r1, [r4, #32]
 80059da:	47b0      	blx	r6
 80059dc:	1c43      	adds	r3, r0, #1
 80059de:	89a3      	ldrh	r3, [r4, #12]
 80059e0:	d106      	bne.n	80059f0 <__sflush_r+0x60>
 80059e2:	6829      	ldr	r1, [r5, #0]
 80059e4:	291d      	cmp	r1, #29
 80059e6:	d82b      	bhi.n	8005a40 <__sflush_r+0xb0>
 80059e8:	4a28      	ldr	r2, [pc, #160]	@ (8005a8c <__sflush_r+0xfc>)
 80059ea:	410a      	asrs	r2, r1
 80059ec:	07d6      	lsls	r6, r2, #31
 80059ee:	d427      	bmi.n	8005a40 <__sflush_r+0xb0>
 80059f0:	2200      	movs	r2, #0
 80059f2:	6062      	str	r2, [r4, #4]
 80059f4:	6922      	ldr	r2, [r4, #16]
 80059f6:	04d9      	lsls	r1, r3, #19
 80059f8:	6022      	str	r2, [r4, #0]
 80059fa:	d504      	bpl.n	8005a06 <__sflush_r+0x76>
 80059fc:	1c42      	adds	r2, r0, #1
 80059fe:	d101      	bne.n	8005a04 <__sflush_r+0x74>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	b903      	cbnz	r3, 8005a06 <__sflush_r+0x76>
 8005a04:	6560      	str	r0, [r4, #84]	@ 0x54
 8005a06:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005a08:	602f      	str	r7, [r5, #0]
 8005a0a:	b1b9      	cbz	r1, 8005a3c <__sflush_r+0xac>
 8005a0c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005a10:	4299      	cmp	r1, r3
 8005a12:	d002      	beq.n	8005a1a <__sflush_r+0x8a>
 8005a14:	4628      	mov	r0, r5
 8005a16:	f7ff fa9b 	bl	8004f50 <_free_r>
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005a1e:	e00d      	b.n	8005a3c <__sflush_r+0xac>
 8005a20:	2301      	movs	r3, #1
 8005a22:	4628      	mov	r0, r5
 8005a24:	47b0      	blx	r6
 8005a26:	4602      	mov	r2, r0
 8005a28:	1c50      	adds	r0, r2, #1
 8005a2a:	d1c9      	bne.n	80059c0 <__sflush_r+0x30>
 8005a2c:	682b      	ldr	r3, [r5, #0]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0c6      	beq.n	80059c0 <__sflush_r+0x30>
 8005a32:	2b1d      	cmp	r3, #29
 8005a34:	d001      	beq.n	8005a3a <__sflush_r+0xaa>
 8005a36:	2b16      	cmp	r3, #22
 8005a38:	d11d      	bne.n	8005a76 <__sflush_r+0xe6>
 8005a3a:	602f      	str	r7, [r5, #0]
 8005a3c:	2000      	movs	r0, #0
 8005a3e:	e021      	b.n	8005a84 <__sflush_r+0xf4>
 8005a40:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a44:	b21b      	sxth	r3, r3
 8005a46:	e01a      	b.n	8005a7e <__sflush_r+0xee>
 8005a48:	690f      	ldr	r7, [r1, #16]
 8005a4a:	2f00      	cmp	r7, #0
 8005a4c:	d0f6      	beq.n	8005a3c <__sflush_r+0xac>
 8005a4e:	0793      	lsls	r3, r2, #30
 8005a50:	bf18      	it	ne
 8005a52:	2300      	movne	r3, #0
 8005a54:	680e      	ldr	r6, [r1, #0]
 8005a56:	bf08      	it	eq
 8005a58:	694b      	ldreq	r3, [r1, #20]
 8005a5a:	1bf6      	subs	r6, r6, r7
 8005a5c:	600f      	str	r7, [r1, #0]
 8005a5e:	608b      	str	r3, [r1, #8]
 8005a60:	2e00      	cmp	r6, #0
 8005a62:	ddeb      	ble.n	8005a3c <__sflush_r+0xac>
 8005a64:	4633      	mov	r3, r6
 8005a66:	463a      	mov	r2, r7
 8005a68:	4628      	mov	r0, r5
 8005a6a:	6a21      	ldr	r1, [r4, #32]
 8005a6c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8005a70:	47e0      	blx	ip
 8005a72:	2800      	cmp	r0, #0
 8005a74:	dc07      	bgt.n	8005a86 <__sflush_r+0xf6>
 8005a76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005a82:	81a3      	strh	r3, [r4, #12]
 8005a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a86:	4407      	add	r7, r0
 8005a88:	1a36      	subs	r6, r6, r0
 8005a8a:	e7e9      	b.n	8005a60 <__sflush_r+0xd0>
 8005a8c:	dfbffffe 	.word	0xdfbffffe

08005a90 <_fflush_r>:
 8005a90:	b538      	push	{r3, r4, r5, lr}
 8005a92:	690b      	ldr	r3, [r1, #16]
 8005a94:	4605      	mov	r5, r0
 8005a96:	460c      	mov	r4, r1
 8005a98:	b913      	cbnz	r3, 8005aa0 <_fflush_r+0x10>
 8005a9a:	2500      	movs	r5, #0
 8005a9c:	4628      	mov	r0, r5
 8005a9e:	bd38      	pop	{r3, r4, r5, pc}
 8005aa0:	b118      	cbz	r0, 8005aaa <_fflush_r+0x1a>
 8005aa2:	6a03      	ldr	r3, [r0, #32]
 8005aa4:	b90b      	cbnz	r3, 8005aaa <_fflush_r+0x1a>
 8005aa6:	f7ff f92b 	bl	8004d00 <__sinit>
 8005aaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d0f3      	beq.n	8005a9a <_fflush_r+0xa>
 8005ab2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005ab4:	07d0      	lsls	r0, r2, #31
 8005ab6:	d404      	bmi.n	8005ac2 <_fflush_r+0x32>
 8005ab8:	0599      	lsls	r1, r3, #22
 8005aba:	d402      	bmi.n	8005ac2 <_fflush_r+0x32>
 8005abc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005abe:	f7ff fa44 	bl	8004f4a <__retarget_lock_acquire_recursive>
 8005ac2:	4628      	mov	r0, r5
 8005ac4:	4621      	mov	r1, r4
 8005ac6:	f7ff ff63 	bl	8005990 <__sflush_r>
 8005aca:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005acc:	4605      	mov	r5, r0
 8005ace:	07da      	lsls	r2, r3, #31
 8005ad0:	d4e4      	bmi.n	8005a9c <_fflush_r+0xc>
 8005ad2:	89a3      	ldrh	r3, [r4, #12]
 8005ad4:	059b      	lsls	r3, r3, #22
 8005ad6:	d4e1      	bmi.n	8005a9c <_fflush_r+0xc>
 8005ad8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005ada:	f7ff fa37 	bl	8004f4c <__retarget_lock_release_recursive>
 8005ade:	e7dd      	b.n	8005a9c <_fflush_r+0xc>

08005ae0 <__swbuf_r>:
 8005ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ae2:	460e      	mov	r6, r1
 8005ae4:	4614      	mov	r4, r2
 8005ae6:	4605      	mov	r5, r0
 8005ae8:	b118      	cbz	r0, 8005af2 <__swbuf_r+0x12>
 8005aea:	6a03      	ldr	r3, [r0, #32]
 8005aec:	b90b      	cbnz	r3, 8005af2 <__swbuf_r+0x12>
 8005aee:	f7ff f907 	bl	8004d00 <__sinit>
 8005af2:	69a3      	ldr	r3, [r4, #24]
 8005af4:	60a3      	str	r3, [r4, #8]
 8005af6:	89a3      	ldrh	r3, [r4, #12]
 8005af8:	071a      	lsls	r2, r3, #28
 8005afa:	d501      	bpl.n	8005b00 <__swbuf_r+0x20>
 8005afc:	6923      	ldr	r3, [r4, #16]
 8005afe:	b943      	cbnz	r3, 8005b12 <__swbuf_r+0x32>
 8005b00:	4621      	mov	r1, r4
 8005b02:	4628      	mov	r0, r5
 8005b04:	f000 f82a 	bl	8005b5c <__swsetup_r>
 8005b08:	b118      	cbz	r0, 8005b12 <__swbuf_r+0x32>
 8005b0a:	f04f 37ff 	mov.w	r7, #4294967295
 8005b0e:	4638      	mov	r0, r7
 8005b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	6922      	ldr	r2, [r4, #16]
 8005b16:	b2f6      	uxtb	r6, r6
 8005b18:	1a98      	subs	r0, r3, r2
 8005b1a:	6963      	ldr	r3, [r4, #20]
 8005b1c:	4637      	mov	r7, r6
 8005b1e:	4283      	cmp	r3, r0
 8005b20:	dc05      	bgt.n	8005b2e <__swbuf_r+0x4e>
 8005b22:	4621      	mov	r1, r4
 8005b24:	4628      	mov	r0, r5
 8005b26:	f7ff ffb3 	bl	8005a90 <_fflush_r>
 8005b2a:	2800      	cmp	r0, #0
 8005b2c:	d1ed      	bne.n	8005b0a <__swbuf_r+0x2a>
 8005b2e:	68a3      	ldr	r3, [r4, #8]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	60a3      	str	r3, [r4, #8]
 8005b34:	6823      	ldr	r3, [r4, #0]
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	6022      	str	r2, [r4, #0]
 8005b3a:	701e      	strb	r6, [r3, #0]
 8005b3c:	6962      	ldr	r2, [r4, #20]
 8005b3e:	1c43      	adds	r3, r0, #1
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d004      	beq.n	8005b4e <__swbuf_r+0x6e>
 8005b44:	89a3      	ldrh	r3, [r4, #12]
 8005b46:	07db      	lsls	r3, r3, #31
 8005b48:	d5e1      	bpl.n	8005b0e <__swbuf_r+0x2e>
 8005b4a:	2e0a      	cmp	r6, #10
 8005b4c:	d1df      	bne.n	8005b0e <__swbuf_r+0x2e>
 8005b4e:	4621      	mov	r1, r4
 8005b50:	4628      	mov	r0, r5
 8005b52:	f7ff ff9d 	bl	8005a90 <_fflush_r>
 8005b56:	2800      	cmp	r0, #0
 8005b58:	d0d9      	beq.n	8005b0e <__swbuf_r+0x2e>
 8005b5a:	e7d6      	b.n	8005b0a <__swbuf_r+0x2a>

08005b5c <__swsetup_r>:
 8005b5c:	b538      	push	{r3, r4, r5, lr}
 8005b5e:	4b29      	ldr	r3, [pc, #164]	@ (8005c04 <__swsetup_r+0xa8>)
 8005b60:	4605      	mov	r5, r0
 8005b62:	6818      	ldr	r0, [r3, #0]
 8005b64:	460c      	mov	r4, r1
 8005b66:	b118      	cbz	r0, 8005b70 <__swsetup_r+0x14>
 8005b68:	6a03      	ldr	r3, [r0, #32]
 8005b6a:	b90b      	cbnz	r3, 8005b70 <__swsetup_r+0x14>
 8005b6c:	f7ff f8c8 	bl	8004d00 <__sinit>
 8005b70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b74:	0719      	lsls	r1, r3, #28
 8005b76:	d422      	bmi.n	8005bbe <__swsetup_r+0x62>
 8005b78:	06da      	lsls	r2, r3, #27
 8005b7a:	d407      	bmi.n	8005b8c <__swsetup_r+0x30>
 8005b7c:	2209      	movs	r2, #9
 8005b7e:	602a      	str	r2, [r5, #0]
 8005b80:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005b84:	f04f 30ff 	mov.w	r0, #4294967295
 8005b88:	81a3      	strh	r3, [r4, #12]
 8005b8a:	e033      	b.n	8005bf4 <__swsetup_r+0x98>
 8005b8c:	0758      	lsls	r0, r3, #29
 8005b8e:	d512      	bpl.n	8005bb6 <__swsetup_r+0x5a>
 8005b90:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005b92:	b141      	cbz	r1, 8005ba6 <__swsetup_r+0x4a>
 8005b94:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005b98:	4299      	cmp	r1, r3
 8005b9a:	d002      	beq.n	8005ba2 <__swsetup_r+0x46>
 8005b9c:	4628      	mov	r0, r5
 8005b9e:	f7ff f9d7 	bl	8004f50 <_free_r>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ba6:	89a3      	ldrh	r3, [r4, #12]
 8005ba8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005bac:	81a3      	strh	r3, [r4, #12]
 8005bae:	2300      	movs	r3, #0
 8005bb0:	6063      	str	r3, [r4, #4]
 8005bb2:	6923      	ldr	r3, [r4, #16]
 8005bb4:	6023      	str	r3, [r4, #0]
 8005bb6:	89a3      	ldrh	r3, [r4, #12]
 8005bb8:	f043 0308 	orr.w	r3, r3, #8
 8005bbc:	81a3      	strh	r3, [r4, #12]
 8005bbe:	6923      	ldr	r3, [r4, #16]
 8005bc0:	b94b      	cbnz	r3, 8005bd6 <__swsetup_r+0x7a>
 8005bc2:	89a3      	ldrh	r3, [r4, #12]
 8005bc4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005bc8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005bcc:	d003      	beq.n	8005bd6 <__swsetup_r+0x7a>
 8005bce:	4621      	mov	r1, r4
 8005bd0:	4628      	mov	r0, r5
 8005bd2:	f000 f8b2 	bl	8005d3a <__smakebuf_r>
 8005bd6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005bda:	f013 0201 	ands.w	r2, r3, #1
 8005bde:	d00a      	beq.n	8005bf6 <__swsetup_r+0x9a>
 8005be0:	2200      	movs	r2, #0
 8005be2:	60a2      	str	r2, [r4, #8]
 8005be4:	6962      	ldr	r2, [r4, #20]
 8005be6:	4252      	negs	r2, r2
 8005be8:	61a2      	str	r2, [r4, #24]
 8005bea:	6922      	ldr	r2, [r4, #16]
 8005bec:	b942      	cbnz	r2, 8005c00 <__swsetup_r+0xa4>
 8005bee:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005bf2:	d1c5      	bne.n	8005b80 <__swsetup_r+0x24>
 8005bf4:	bd38      	pop	{r3, r4, r5, pc}
 8005bf6:	0799      	lsls	r1, r3, #30
 8005bf8:	bf58      	it	pl
 8005bfa:	6962      	ldrpl	r2, [r4, #20]
 8005bfc:	60a2      	str	r2, [r4, #8]
 8005bfe:	e7f4      	b.n	8005bea <__swsetup_r+0x8e>
 8005c00:	2000      	movs	r0, #0
 8005c02:	e7f7      	b.n	8005bf4 <__swsetup_r+0x98>
 8005c04:	2000002c 	.word	0x2000002c

08005c08 <memmove>:
 8005c08:	4288      	cmp	r0, r1
 8005c0a:	b510      	push	{r4, lr}
 8005c0c:	eb01 0402 	add.w	r4, r1, r2
 8005c10:	d902      	bls.n	8005c18 <memmove+0x10>
 8005c12:	4284      	cmp	r4, r0
 8005c14:	4623      	mov	r3, r4
 8005c16:	d807      	bhi.n	8005c28 <memmove+0x20>
 8005c18:	1e43      	subs	r3, r0, #1
 8005c1a:	42a1      	cmp	r1, r4
 8005c1c:	d008      	beq.n	8005c30 <memmove+0x28>
 8005c1e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005c22:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005c26:	e7f8      	b.n	8005c1a <memmove+0x12>
 8005c28:	4601      	mov	r1, r0
 8005c2a:	4402      	add	r2, r0
 8005c2c:	428a      	cmp	r2, r1
 8005c2e:	d100      	bne.n	8005c32 <memmove+0x2a>
 8005c30:	bd10      	pop	{r4, pc}
 8005c32:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005c36:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005c3a:	e7f7      	b.n	8005c2c <memmove+0x24>

08005c3c <_sbrk_r>:
 8005c3c:	b538      	push	{r3, r4, r5, lr}
 8005c3e:	2300      	movs	r3, #0
 8005c40:	4d05      	ldr	r5, [pc, #20]	@ (8005c58 <_sbrk_r+0x1c>)
 8005c42:	4604      	mov	r4, r0
 8005c44:	4608      	mov	r0, r1
 8005c46:	602b      	str	r3, [r5, #0]
 8005c48:	f7fc fb92 	bl	8002370 <_sbrk>
 8005c4c:	1c43      	adds	r3, r0, #1
 8005c4e:	d102      	bne.n	8005c56 <_sbrk_r+0x1a>
 8005c50:	682b      	ldr	r3, [r5, #0]
 8005c52:	b103      	cbz	r3, 8005c56 <_sbrk_r+0x1a>
 8005c54:	6023      	str	r3, [r4, #0]
 8005c56:	bd38      	pop	{r3, r4, r5, pc}
 8005c58:	2000075c 	.word	0x2000075c

08005c5c <memchr>:
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	b510      	push	{r4, lr}
 8005c60:	b2c9      	uxtb	r1, r1
 8005c62:	4402      	add	r2, r0
 8005c64:	4293      	cmp	r3, r2
 8005c66:	4618      	mov	r0, r3
 8005c68:	d101      	bne.n	8005c6e <memchr+0x12>
 8005c6a:	2000      	movs	r0, #0
 8005c6c:	e003      	b.n	8005c76 <memchr+0x1a>
 8005c6e:	7804      	ldrb	r4, [r0, #0]
 8005c70:	3301      	adds	r3, #1
 8005c72:	428c      	cmp	r4, r1
 8005c74:	d1f6      	bne.n	8005c64 <memchr+0x8>
 8005c76:	bd10      	pop	{r4, pc}

08005c78 <memcpy>:
 8005c78:	440a      	add	r2, r1
 8005c7a:	4291      	cmp	r1, r2
 8005c7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c80:	d100      	bne.n	8005c84 <memcpy+0xc>
 8005c82:	4770      	bx	lr
 8005c84:	b510      	push	{r4, lr}
 8005c86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c8a:	4291      	cmp	r1, r2
 8005c8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c90:	d1f9      	bne.n	8005c86 <memcpy+0xe>
 8005c92:	bd10      	pop	{r4, pc}

08005c94 <_realloc_r>:
 8005c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c98:	4680      	mov	r8, r0
 8005c9a:	4615      	mov	r5, r2
 8005c9c:	460c      	mov	r4, r1
 8005c9e:	b921      	cbnz	r1, 8005caa <_realloc_r+0x16>
 8005ca0:	4611      	mov	r1, r2
 8005ca2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ca6:	f7ff b9bd 	b.w	8005024 <_malloc_r>
 8005caa:	b92a      	cbnz	r2, 8005cb8 <_realloc_r+0x24>
 8005cac:	f7ff f950 	bl	8004f50 <_free_r>
 8005cb0:	2400      	movs	r4, #0
 8005cb2:	4620      	mov	r0, r4
 8005cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005cb8:	f000 f89e 	bl	8005df8 <_malloc_usable_size_r>
 8005cbc:	4285      	cmp	r5, r0
 8005cbe:	4606      	mov	r6, r0
 8005cc0:	d802      	bhi.n	8005cc8 <_realloc_r+0x34>
 8005cc2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005cc6:	d8f4      	bhi.n	8005cb2 <_realloc_r+0x1e>
 8005cc8:	4629      	mov	r1, r5
 8005cca:	4640      	mov	r0, r8
 8005ccc:	f7ff f9aa 	bl	8005024 <_malloc_r>
 8005cd0:	4607      	mov	r7, r0
 8005cd2:	2800      	cmp	r0, #0
 8005cd4:	d0ec      	beq.n	8005cb0 <_realloc_r+0x1c>
 8005cd6:	42b5      	cmp	r5, r6
 8005cd8:	462a      	mov	r2, r5
 8005cda:	4621      	mov	r1, r4
 8005cdc:	bf28      	it	cs
 8005cde:	4632      	movcs	r2, r6
 8005ce0:	f7ff ffca 	bl	8005c78 <memcpy>
 8005ce4:	4621      	mov	r1, r4
 8005ce6:	4640      	mov	r0, r8
 8005ce8:	f7ff f932 	bl	8004f50 <_free_r>
 8005cec:	463c      	mov	r4, r7
 8005cee:	e7e0      	b.n	8005cb2 <_realloc_r+0x1e>

08005cf0 <__swhatbuf_r>:
 8005cf0:	b570      	push	{r4, r5, r6, lr}
 8005cf2:	460c      	mov	r4, r1
 8005cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf8:	4615      	mov	r5, r2
 8005cfa:	2900      	cmp	r1, #0
 8005cfc:	461e      	mov	r6, r3
 8005cfe:	b096      	sub	sp, #88	@ 0x58
 8005d00:	da0c      	bge.n	8005d1c <__swhatbuf_r+0x2c>
 8005d02:	89a3      	ldrh	r3, [r4, #12]
 8005d04:	2100      	movs	r1, #0
 8005d06:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005d0a:	bf14      	ite	ne
 8005d0c:	2340      	movne	r3, #64	@ 0x40
 8005d0e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005d12:	2000      	movs	r0, #0
 8005d14:	6031      	str	r1, [r6, #0]
 8005d16:	602b      	str	r3, [r5, #0]
 8005d18:	b016      	add	sp, #88	@ 0x58
 8005d1a:	bd70      	pop	{r4, r5, r6, pc}
 8005d1c:	466a      	mov	r2, sp
 8005d1e:	f000 f849 	bl	8005db4 <_fstat_r>
 8005d22:	2800      	cmp	r0, #0
 8005d24:	dbed      	blt.n	8005d02 <__swhatbuf_r+0x12>
 8005d26:	9901      	ldr	r1, [sp, #4]
 8005d28:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005d2c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005d30:	4259      	negs	r1, r3
 8005d32:	4159      	adcs	r1, r3
 8005d34:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005d38:	e7eb      	b.n	8005d12 <__swhatbuf_r+0x22>

08005d3a <__smakebuf_r>:
 8005d3a:	898b      	ldrh	r3, [r1, #12]
 8005d3c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005d3e:	079d      	lsls	r5, r3, #30
 8005d40:	4606      	mov	r6, r0
 8005d42:	460c      	mov	r4, r1
 8005d44:	d507      	bpl.n	8005d56 <__smakebuf_r+0x1c>
 8005d46:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005d4a:	6023      	str	r3, [r4, #0]
 8005d4c:	6123      	str	r3, [r4, #16]
 8005d4e:	2301      	movs	r3, #1
 8005d50:	6163      	str	r3, [r4, #20]
 8005d52:	b003      	add	sp, #12
 8005d54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005d56:	466a      	mov	r2, sp
 8005d58:	ab01      	add	r3, sp, #4
 8005d5a:	f7ff ffc9 	bl	8005cf0 <__swhatbuf_r>
 8005d5e:	9f00      	ldr	r7, [sp, #0]
 8005d60:	4605      	mov	r5, r0
 8005d62:	4639      	mov	r1, r7
 8005d64:	4630      	mov	r0, r6
 8005d66:	f7ff f95d 	bl	8005024 <_malloc_r>
 8005d6a:	b948      	cbnz	r0, 8005d80 <__smakebuf_r+0x46>
 8005d6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d70:	059a      	lsls	r2, r3, #22
 8005d72:	d4ee      	bmi.n	8005d52 <__smakebuf_r+0x18>
 8005d74:	f023 0303 	bic.w	r3, r3, #3
 8005d78:	f043 0302 	orr.w	r3, r3, #2
 8005d7c:	81a3      	strh	r3, [r4, #12]
 8005d7e:	e7e2      	b.n	8005d46 <__smakebuf_r+0xc>
 8005d80:	89a3      	ldrh	r3, [r4, #12]
 8005d82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005d86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005d8a:	81a3      	strh	r3, [r4, #12]
 8005d8c:	9b01      	ldr	r3, [sp, #4]
 8005d8e:	6020      	str	r0, [r4, #0]
 8005d90:	b15b      	cbz	r3, 8005daa <__smakebuf_r+0x70>
 8005d92:	4630      	mov	r0, r6
 8005d94:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d98:	f000 f81e 	bl	8005dd8 <_isatty_r>
 8005d9c:	b128      	cbz	r0, 8005daa <__smakebuf_r+0x70>
 8005d9e:	89a3      	ldrh	r3, [r4, #12]
 8005da0:	f023 0303 	bic.w	r3, r3, #3
 8005da4:	f043 0301 	orr.w	r3, r3, #1
 8005da8:	81a3      	strh	r3, [r4, #12]
 8005daa:	89a3      	ldrh	r3, [r4, #12]
 8005dac:	431d      	orrs	r5, r3
 8005dae:	81a5      	strh	r5, [r4, #12]
 8005db0:	e7cf      	b.n	8005d52 <__smakebuf_r+0x18>
	...

08005db4 <_fstat_r>:
 8005db4:	b538      	push	{r3, r4, r5, lr}
 8005db6:	2300      	movs	r3, #0
 8005db8:	4d06      	ldr	r5, [pc, #24]	@ (8005dd4 <_fstat_r+0x20>)
 8005dba:	4604      	mov	r4, r0
 8005dbc:	4608      	mov	r0, r1
 8005dbe:	4611      	mov	r1, r2
 8005dc0:	602b      	str	r3, [r5, #0]
 8005dc2:	f7fc faaf 	bl	8002324 <_fstat>
 8005dc6:	1c43      	adds	r3, r0, #1
 8005dc8:	d102      	bne.n	8005dd0 <_fstat_r+0x1c>
 8005dca:	682b      	ldr	r3, [r5, #0]
 8005dcc:	b103      	cbz	r3, 8005dd0 <_fstat_r+0x1c>
 8005dce:	6023      	str	r3, [r4, #0]
 8005dd0:	bd38      	pop	{r3, r4, r5, pc}
 8005dd2:	bf00      	nop
 8005dd4:	2000075c 	.word	0x2000075c

08005dd8 <_isatty_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	2300      	movs	r3, #0
 8005ddc:	4d05      	ldr	r5, [pc, #20]	@ (8005df4 <_isatty_r+0x1c>)
 8005dde:	4604      	mov	r4, r0
 8005de0:	4608      	mov	r0, r1
 8005de2:	602b      	str	r3, [r5, #0]
 8005de4:	f7fc faad 	bl	8002342 <_isatty>
 8005de8:	1c43      	adds	r3, r0, #1
 8005dea:	d102      	bne.n	8005df2 <_isatty_r+0x1a>
 8005dec:	682b      	ldr	r3, [r5, #0]
 8005dee:	b103      	cbz	r3, 8005df2 <_isatty_r+0x1a>
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	bd38      	pop	{r3, r4, r5, pc}
 8005df4:	2000075c 	.word	0x2000075c

08005df8 <_malloc_usable_size_r>:
 8005df8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005dfc:	1f18      	subs	r0, r3, #4
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	bfbc      	itt	lt
 8005e02:	580b      	ldrlt	r3, [r1, r0]
 8005e04:	18c0      	addlt	r0, r0, r3
 8005e06:	4770      	bx	lr

08005e08 <_init>:
 8005e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e0a:	bf00      	nop
 8005e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e0e:	bc08      	pop	{r3}
 8005e10:	469e      	mov	lr, r3
 8005e12:	4770      	bx	lr

08005e14 <_fini>:
 8005e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e16:	bf00      	nop
 8005e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005e1a:	bc08      	pop	{r3}
 8005e1c:	469e      	mov	lr, r3
 8005e1e:	4770      	bx	lr
